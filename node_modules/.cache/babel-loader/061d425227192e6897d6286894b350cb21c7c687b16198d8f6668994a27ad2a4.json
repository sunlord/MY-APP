{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isTypedArray, clone, createHashMap, isArray, isObject, isArrayLike, hasOwn, assert, each, map, isNumber, isString } from 'zrender/lib/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SERIES_LAYOUT_BY_COLUMN, SOURCE_FORMAT_UNKNOWN, SOURCE_FORMAT_KEYED_COLUMNS, SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW } from '../util/types';\nimport { getDataItemValue } from '../util/model';\n; // @inner\n\nvar SourceImpl = /** @class */\nfunction () {\n  // readonly frozen: boolean;\n  function SourceImpl(fields) {\n    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);\n    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN; // Visit config\n\n    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;\n    this.startIndex = fields.startIndex || 0;\n    this.dimensionsDefine = fields.dimensionsDefine;\n    this.dimensionsDetectedCount = fields.dimensionsDetectedCount;\n    this.encodeDefine = fields.encodeDefine;\n    this.metaRawOption = fields.metaRawOption;\n  }\n  return SourceImpl;\n}();\nexport function isSourceInstance(val) {\n  return val instanceof SourceImpl;\n}\nexport function createSource(sourceData, thisMetaRawOption,\n// can be null. If not provided, auto detect it from `sourceData`.\nsourceFormat, encodeDefine // can be null\n) {\n  sourceFormat = sourceFormat || detectSourceFormat(sourceData);\n  var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;\n  var determined = determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);\n  var source = new SourceImpl({\n    data: sourceData,\n    sourceFormat: sourceFormat,\n    seriesLayoutBy: seriesLayoutBy,\n    dimensionsDefine: determined.dimensionsDefine,\n    startIndex: determined.startIndex,\n    dimensionsDetectedCount: determined.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(encodeDefine),\n    metaRawOption: clone(thisMetaRawOption)\n  });\n  return source;\n}\n/**\n * Wrap original series data for some compatibility cases.\n */\n\nexport function createSourceFromSeriesDataOption(data) {\n  return new SourceImpl({\n    data: data,\n    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL\n  });\n}\n/**\n * Clone source but excludes source data.\n */\n\nexport function cloneSourceShallow(source) {\n  return new SourceImpl({\n    data: source.data,\n    sourceFormat: source.sourceFormat,\n    seriesLayoutBy: source.seriesLayoutBy,\n    dimensionsDefine: clone(source.dimensionsDefine),\n    startIndex: source.startIndex,\n    dimensionsDetectedCount: source.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(source.encodeDefine)\n  });\n}\nfunction makeEncodeDefine(encodeDefine) {\n  // null means user not specify `series.encode`.\n  return encodeDefine ? createHashMap(encodeDefine) : null;\n}\n/**\n * Note: An empty array will be detected as `SOURCE_FORMAT_ARRAY_ROWS`.\n */\n\nexport function detectSourceFormat(data) {\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (hasOwn(data, key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  }\n  return sourceFormat;\n}\n/**\n * Determine the source definitions from data standalone dimensions definitions\n * are not specified.\n */\n\nfunction determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader,\n// standalone raw dimensions definition, like:\n// {\n//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]\n// }\n// in `dataset` or `series`\ndimensionsDefine) {\n  var dimensionsDetectedCount;\n  var startIndex; // PEDING: could data be null/undefined here?\n  // currently, if `dataset.source` not specified, error thrown.\n  // if `series.data` not specified, nothing rendered without error thrown.\n  // Should test these cases.\n\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n      startIndex: startIndex,\n      dimensionsDetectedCount: dimensionsDetectedCount\n    };\n  }\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data; // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n      }, seriesLayoutBy, dataArrayRows, 10);\n    } else {\n      startIndex = isNumber(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;\n    }\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val + '' : '';\n      }, seriesLayoutBy, dataArrayRows, Infinity);\n    }\n    dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectedCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!!dimensionsDefine, 'dimensions must be given if data is TypedArray.');\n    }\n  }\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n    dimensionsDetectedCount: dimensionsDetectedCount\n  };\n}\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n  if (obj) {\n    var dimensions_1 = [];\n    each(obj, function (value, key) {\n      dimensions_1.push(key);\n    });\n    return dimensions_1;\n  }\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\nfunction normalizeDimensionsOption(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (rawItem, index) {\n    rawItem = isObject(rawItem) ? rawItem : {\n      name: rawItem\n    }; // Other fields will be discarded.\n\n    var item = {\n      name: rawItem.name,\n      displayName: rawItem.displayName,\n      type: rawItem.type\n    }; // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n    var exist = nameMap.get(item.name);\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n    return item;\n  });\n}\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}","map":{"version":3,"names":["isTypedArray","clone","createHashMap","isArray","isObject","isArrayLike","hasOwn","assert","each","map","isNumber","isString","SOURCE_FORMAT_ORIGINAL","SERIES_LAYOUT_BY_COLUMN","SOURCE_FORMAT_UNKNOWN","SOURCE_FORMAT_KEYED_COLUMNS","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","SERIES_LAYOUT_BY_ROW","getDataItemValue","SourceImpl","fields","data","sourceFormat","seriesLayoutBy","startIndex","dimensionsDefine","dimensionsDetectedCount","encodeDefine","metaRawOption","isSourceInstance","val","createSource","sourceData","thisMetaRawOption","detectSourceFormat","determined","determineSourceDimensions","sourceHeader","dimensions","source","makeEncodeDefine","createSourceFromSeriesDataOption","cloneSourceShallow","length","i","len","item","key","normalizeDimensionsOption","dataArrayRows","arrayRowsTravelFirst","index","Infinity","objectRowsCollectDimensions","colArr","push","value0","process","env","NODE_ENV","firstIndex","obj","dimensions_1","value","nameMap","rawItem","name","displayName","type","exist","get","set","count","cb","maxLoop"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/data/Source.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isTypedArray, clone, createHashMap, isArray, isObject, isArrayLike, hasOwn, assert, each, map, isNumber, isString } from 'zrender/lib/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SERIES_LAYOUT_BY_COLUMN, SOURCE_FORMAT_UNKNOWN, SOURCE_FORMAT_KEYED_COLUMNS, SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW } from '../util/types';\nimport { getDataItemValue } from '../util/model';\n; // @inner\n\nvar SourceImpl =\n/** @class */\nfunction () {\n  // readonly frozen: boolean;\n  function SourceImpl(fields) {\n    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);\n    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN; // Visit config\n\n    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;\n    this.startIndex = fields.startIndex || 0;\n    this.dimensionsDefine = fields.dimensionsDefine;\n    this.dimensionsDetectedCount = fields.dimensionsDetectedCount;\n    this.encodeDefine = fields.encodeDefine;\n    this.metaRawOption = fields.metaRawOption;\n  }\n\n  return SourceImpl;\n}();\n\nexport function isSourceInstance(val) {\n  return val instanceof SourceImpl;\n}\nexport function createSource(sourceData, thisMetaRawOption, // can be null. If not provided, auto detect it from `sourceData`.\nsourceFormat, encodeDefine // can be null\n) {\n  sourceFormat = sourceFormat || detectSourceFormat(sourceData);\n  var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;\n  var determined = determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);\n  var source = new SourceImpl({\n    data: sourceData,\n    sourceFormat: sourceFormat,\n    seriesLayoutBy: seriesLayoutBy,\n    dimensionsDefine: determined.dimensionsDefine,\n    startIndex: determined.startIndex,\n    dimensionsDetectedCount: determined.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(encodeDefine),\n    metaRawOption: clone(thisMetaRawOption)\n  });\n  return source;\n}\n/**\n * Wrap original series data for some compatibility cases.\n */\n\nexport function createSourceFromSeriesDataOption(data) {\n  return new SourceImpl({\n    data: data,\n    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL\n  });\n}\n/**\n * Clone source but excludes source data.\n */\n\nexport function cloneSourceShallow(source) {\n  return new SourceImpl({\n    data: source.data,\n    sourceFormat: source.sourceFormat,\n    seriesLayoutBy: source.seriesLayoutBy,\n    dimensionsDefine: clone(source.dimensionsDefine),\n    startIndex: source.startIndex,\n    dimensionsDetectedCount: source.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(source.encodeDefine)\n  });\n}\n\nfunction makeEncodeDefine(encodeDefine) {\n  // null means user not specify `series.encode`.\n  return encodeDefine ? createHashMap(encodeDefine) : null;\n}\n/**\n * Note: An empty array will be detected as `SOURCE_FORMAT_ARRAY_ROWS`.\n */\n\n\nexport function detectSourceFormat(data) {\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (hasOwn(data, key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  }\n\n  return sourceFormat;\n}\n/**\n * Determine the source definitions from data standalone dimensions definitions\n * are not specified.\n */\n\nfunction determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader, // standalone raw dimensions definition, like:\n// {\n//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]\n// }\n// in `dataset` or `series`\ndimensionsDefine) {\n  var dimensionsDetectedCount;\n  var startIndex; // PEDING: could data be null/undefined here?\n  // currently, if `dataset.source` not specified, error thrown.\n  // if `series.data` not specified, nothing rendered without error thrown.\n  // Should test these cases.\n\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n      startIndex: startIndex,\n      dimensionsDetectedCount: dimensionsDetectedCount\n    };\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data; // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, dataArrayRows, 10);\n    } else {\n      startIndex = isNumber(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val + '' : '';\n      }, seriesLayoutBy, dataArrayRows, Infinity);\n    }\n\n    dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectedCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!!dimensionsDefine, 'dimensions must be given if data is TypedArray.');\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n    dimensionsDetectedCount: dimensionsDetectedCount\n  };\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions_1 = [];\n    each(obj, function (value, key) {\n      dimensions_1.push(key);\n    });\n    return dimensions_1;\n  }\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsOption(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (rawItem, index) {\n    rawItem = isObject(rawItem) ? rawItem : {\n      name: rawItem\n    }; // Other fields will be discarded.\n\n    var item = {\n      name: rawItem.name,\n      displayName: rawItem.displayName,\n      type: rawItem.type\n    }; // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
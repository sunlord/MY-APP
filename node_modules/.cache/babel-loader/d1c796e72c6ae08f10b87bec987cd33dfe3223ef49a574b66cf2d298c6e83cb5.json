{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getTooltipMarker, encodeHTML, makeValueReadable, convertToColorString } from '../../util/format';\nimport { isString, each, hasOwn, isArray, map, assert, extend } from 'zrender/lib/core/util';\nimport { SortOrderComparator } from '../../data/helper/dataValueHelper';\nimport { getRandomIdBase } from '../../util/number';\nvar TOOLTIP_LINE_HEIGHT_CSS = 'line-height:1'; // TODO: more textStyle option\n\nfunction getTooltipTextStyle(textStyle, renderMode) {\n  var nameFontColor = textStyle.color || '#6e7079';\n  var nameFontSize = textStyle.fontSize || 12;\n  var nameFontWeight = textStyle.fontWeight || '400';\n  var valueFontColor = textStyle.color || '#464646';\n  var valueFontSize = textStyle.fontSize || 14;\n  var valueFontWeight = textStyle.fontWeight || '900';\n  if (renderMode === 'html') {\n    // `textStyle` is probably from user input, should be encoded to reduce security risk.\n    return {\n      // eslint-disable-next-line max-len\n      nameStyle: \"font-size:\" + encodeHTML(nameFontSize + '') + \"px;color:\" + encodeHTML(nameFontColor) + \";font-weight:\" + encodeHTML(nameFontWeight + ''),\n      // eslint-disable-next-line max-len\n      valueStyle: \"font-size:\" + encodeHTML(valueFontSize + '') + \"px;color:\" + encodeHTML(valueFontColor) + \";font-weight:\" + encodeHTML(valueFontWeight + '')\n    };\n  } else {\n    return {\n      nameStyle: {\n        fontSize: nameFontSize,\n        fill: nameFontColor,\n        fontWeight: nameFontWeight\n      },\n      valueStyle: {\n        fontSize: valueFontSize,\n        fill: valueFontColor,\n        fontWeight: valueFontWeight\n      }\n    };\n  }\n} // See `TooltipMarkupLayoutIntent['innerGapLevel']`.\n// (value from UI design)\n\nvar HTML_GAPS = [0, 10, 20, 30];\nvar RICH_TEXT_GAPS = ['', '\\n', '\\n\\n', '\\n\\n\\n']; // eslint-disable-next-line max-len\n\nexport function createTooltipMarkup(type, option) {\n  option.type = type;\n  return option;\n}\nfunction getBuilder(fragment) {\n  return hasOwn(builderMap, fragment.type) && builderMap[fragment.type];\n}\nvar builderMap = {\n  /**\n   * A `section` block is like:\n   * ```\n   * header\n   * subBlock\n   * subBlock\n   * ...\n   * ```\n   */\n  section: {\n    planLayout: function (fragment) {\n      var subBlockLen = fragment.blocks.length;\n      var thisBlockHasInnerGap = subBlockLen > 1 || subBlockLen > 0 && !fragment.noHeader;\n      var thisGapLevelBetweenSubBlocks = 0;\n      each(fragment.blocks, function (subBlock) {\n        getBuilder(subBlock).planLayout(subBlock);\n        var subGapLevel = subBlock.__gapLevelBetweenSubBlocks; // If the some of the sub-blocks have some gaps (like 10px) inside, this block\n        // should use a larger gap (like 20px) to distinguish those sub-blocks.\n\n        if (subGapLevel >= thisGapLevelBetweenSubBlocks) {\n          thisGapLevelBetweenSubBlocks = subGapLevel + (thisBlockHasInnerGap && (\n          // 0 always can not be readable gap level.\n          !subGapLevel // If no header, always keep the sub gap level. Otherwise\n          // look weird in case `multipleSeries`.\n          || subBlock.type === 'section' && !subBlock.noHeader) ? 1 : 0);\n        }\n      });\n      fragment.__gapLevelBetweenSubBlocks = thisGapLevelBetweenSubBlocks;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var noHeader = fragment.noHeader;\n      var gaps = getGap(fragment);\n      var subMarkupText = buildSubBlocks(ctx, fragment, noHeader ? topMarginForOuterGap : gaps.html, toolTipTextStyle);\n      if (noHeader) {\n        return subMarkupText;\n      }\n      var displayableHeader = makeValueReadable(fragment.header, 'ordinal', ctx.useUTC);\n      var nameStyle = getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;\n      if (ctx.renderMode === 'richText') {\n        return wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;\n      } else {\n        return wrapBlockHTML(\"<div style=\\\"\" + nameStyle + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodeHTML(displayableHeader) + '</div>' + subMarkupText, topMarginForOuterGap);\n      }\n    }\n  },\n  /**\n   * A `nameValue` block is like:\n   * ```\n   * marker  name  value\n   * ```\n   */\n  nameValue: {\n    planLayout: function (fragment) {\n      fragment.__gapLevelBetweenSubBlocks = 0;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var renderMode = ctx.renderMode;\n      var noName = fragment.noName;\n      var noValue = fragment.noValue;\n      var noMarker = !fragment.markerType;\n      var name = fragment.name;\n      var value = fragment.value;\n      var useUTC = ctx.useUTC;\n      if (noName && noValue) {\n        return;\n      }\n      var markerStr = noMarker ? '' : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || '#333', renderMode);\n      var readableName = noName ? '' : makeValueReadable(name, 'ordinal', useUTC);\n      var valueTypeOption = fragment.valueType;\n      var readableValueList = noValue ? [] : isArray(value) ? map(value, function (val, idx) {\n        return makeValueReadable(val, isArray(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);\n      }) : [makeValueReadable(value, isArray(valueTypeOption) ? valueTypeOption[0] : valueTypeOption, useUTC)];\n      var valueAlignRight = !noMarker || !noName; // It little weird if only value next to marker but far from marker.\n\n      var valueCloseToMarker = !noMarker && noName;\n      var _a = getTooltipTextStyle(toolTipTextStyle, renderMode),\n        nameStyle = _a.nameStyle,\n        valueStyle = _a.valueStyle;\n      return renderMode === 'richText' ? (noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameRichText(ctx, readableName, nameStyle)) // Value has commas inside, so use ' ' as delimiter for multiple values.\n      + (noValue ? '' : wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : wrapBlockHTML((noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? '' : wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);\n    }\n  }\n};\nfunction buildSubBlocks(ctx, fragment, topMarginForOuterGap, tooltipTextStyle) {\n  var subMarkupTextList = [];\n  var subBlocks = fragment.blocks || [];\n  assert(!subBlocks || isArray(subBlocks));\n  subBlocks = subBlocks || [];\n  var orderMode = ctx.orderMode;\n  if (fragment.sortBlocks && orderMode) {\n    subBlocks = subBlocks.slice();\n    var orderMap = {\n      valueAsc: 'asc',\n      valueDesc: 'desc'\n    };\n    if (hasOwn(orderMap, orderMode)) {\n      var comparator_1 = new SortOrderComparator(orderMap[orderMode], null);\n      subBlocks.sort(function (a, b) {\n        return comparator_1.evaluate(a.sortParam, b.sortParam);\n      });\n    } // FIXME 'seriesDesc' necessary?\n    else if (orderMode === 'seriesDesc') {\n      subBlocks.reverse();\n    }\n  }\n  var gaps = getGap(fragment);\n  each(subBlocks, function (subBlock, idx) {\n    var subMarkupText = getBuilder(subBlock).build(ctx, subBlock, idx > 0 ? gaps.html : 0, tooltipTextStyle);\n    subMarkupText != null && subMarkupTextList.push(subMarkupText);\n  });\n  if (!subMarkupTextList.length) {\n    return;\n  }\n  return ctx.renderMode === 'richText' ? subMarkupTextList.join(gaps.richText) : wrapBlockHTML(subMarkupTextList.join(''), topMarginForOuterGap);\n}\n/**\n * @return markupText. null/undefined means no content.\n */\n\nexport function buildTooltipMarkup(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {\n  if (!fragment) {\n    return;\n  }\n  var builder = getBuilder(fragment);\n  builder.planLayout(fragment);\n  var ctx = {\n    useUTC: useUTC,\n    renderMode: renderMode,\n    orderMode: orderMode,\n    markupStyleCreator: markupStyleCreator\n  };\n  return builder.build(ctx, fragment, 0, toolTipTextStyle);\n}\nfunction getGap(fragment) {\n  var gapLevelBetweenSubBlocks = fragment.__gapLevelBetweenSubBlocks;\n  return {\n    html: HTML_GAPS[gapLevelBetweenSubBlocks],\n    richText: RICH_TEXT_GAPS[gapLevelBetweenSubBlocks]\n  };\n}\nfunction wrapBlockHTML(encodedContent, topGap) {\n  var clearfix = '<div style=\"clear:both\"></div>';\n  var marginCSS = \"margin: \" + topGap + \"px 0 0\";\n  return \"<div style=\\\"\" + marginCSS + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodedContent + clearfix + '</div>';\n}\nfunction wrapInlineNameHTML(name, leftHasMarker, style) {\n  var marginCss = leftHasMarker ? 'margin-left:2px' : '';\n  return \"<span style=\\\"\" + style + \";\" + marginCss + \"\\\">\" + encodeHTML(name) + '</span>';\n}\nfunction wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {\n  // Do not too close to marker, considering there are multiple values separated by spaces.\n  var paddingStr = valueCloseToMarker ? '10px' : '20px';\n  var alignCSS = alignRight ? \"float:right;margin-left:\" + paddingStr : '';\n  return \"<span style=\\\"\" + alignCSS + \";\" + style + \"\\\">\" // Value has commas inside, so use '  ' as delimiter for multiple values.\n  + map(valueList, function (value) {\n    return encodeHTML(value);\n  }).join('&nbsp;&nbsp;') + '</span>';\n}\nfunction wrapInlineNameRichText(ctx, name, style) {\n  return ctx.markupStyleCreator.wrapRichTextStyle(name, style);\n}\nfunction wrapInlineValueRichText(ctx, valueList, alignRight, valueCloseToMarker, style) {\n  var styles = [style];\n  var paddingLeft = valueCloseToMarker ? 10 : 20;\n  alignRight && styles.push({\n    padding: [0, 0, 0, paddingLeft],\n    align: 'right'\n  }); // Value has commas inside, so use '  ' as delimiter for multiple values.\n\n  return ctx.markupStyleCreator.wrapRichTextStyle(valueList.join('  '), styles);\n}\nexport function retrieveVisualColorForTooltipMarker(series, dataIndex) {\n  var style = series.getData().getItemVisual(dataIndex, 'style');\n  var color = style[series.visualDrawType];\n  return convertToColorString(color);\n}\nexport function getPaddingFromTooltipModel(model, renderMode) {\n  var padding = model.get('padding');\n  return padding != null ? padding // We give slightly different to look pretty.\n  : renderMode === 'richText' ? [8, 10] : 10;\n}\n/**\n * The major feature is generate styles for `renderMode: 'richText'`.\n * But it also serves `renderMode: 'html'` to provide\n * \"renderMode-independent\" API.\n */\n\nvar TooltipMarkupStyleCreator = /** @class */\nfunction () {\n  function TooltipMarkupStyleCreator() {\n    this.richTextStyles = {}; // Notice that \"generate a style name\" usuall happens repeatly when mouse moving and\n    // displaying a tooltip. So we put the `_nextStyleNameId` as a member of each creator\n    // rather than static shared by all creators (which will cause it increase to fast).\n\n    this._nextStyleNameId = getRandomIdBase();\n  }\n  TooltipMarkupStyleCreator.prototype._generateStyleName = function () {\n    return '__EC_aUTo_' + this._nextStyleNameId++;\n  };\n  TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function (markerType, colorStr, renderMode) {\n    var markerId = renderMode === 'richText' ? this._generateStyleName() : null;\n    var marker = getTooltipMarker({\n      color: colorStr,\n      type: markerType,\n      renderMode: renderMode,\n      markerId: markerId\n    });\n    if (isString(marker)) {\n      return marker;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        assert(markerId);\n      }\n      this.richTextStyles[markerId] = marker.style;\n      return marker.content;\n    }\n  };\n  /**\n   * @usage\n   * ```ts\n   * const styledText = markupStyleCreator.wrapRichTextStyle([\n   *     // The styles will be auto merged.\n   *     {\n   *         fontSize: 12,\n   *         color: 'blue'\n   *     },\n   *     {\n   *         padding: 20\n   *     }\n   * ]);\n   * ```\n   */\n\n  TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function (text, styles) {\n    var finalStl = {};\n    if (isArray(styles)) {\n      each(styles, function (stl) {\n        return extend(finalStl, stl);\n      });\n    } else {\n      extend(finalStl, styles);\n    }\n    var styleName = this._generateStyleName();\n    this.richTextStyles[styleName] = finalStl;\n    return \"{\" + styleName + \"|\" + text + \"}\";\n  };\n  return TooltipMarkupStyleCreator;\n}();\nexport { TooltipMarkupStyleCreator };","map":{"version":3,"names":["getTooltipMarker","encodeHTML","makeValueReadable","convertToColorString","isString","each","hasOwn","isArray","map","assert","extend","SortOrderComparator","getRandomIdBase","TOOLTIP_LINE_HEIGHT_CSS","getTooltipTextStyle","textStyle","renderMode","nameFontColor","color","nameFontSize","fontSize","nameFontWeight","fontWeight","valueFontColor","valueFontSize","valueFontWeight","nameStyle","valueStyle","fill","HTML_GAPS","RICH_TEXT_GAPS","createTooltipMarkup","type","option","getBuilder","fragment","builderMap","section","planLayout","subBlockLen","blocks","length","thisBlockHasInnerGap","noHeader","thisGapLevelBetweenSubBlocks","subBlock","subGapLevel","__gapLevelBetweenSubBlocks","build","ctx","topMarginForOuterGap","toolTipTextStyle","gaps","getGap","subMarkupText","buildSubBlocks","html","displayableHeader","header","useUTC","wrapInlineNameRichText","richText","wrapBlockHTML","nameValue","noName","noValue","noMarker","markerType","name","value","markerStr","markupStyleCreator","makeTooltipMarker","markerColor","readableName","valueTypeOption","valueType","readableValueList","val","idx","valueAlignRight","valueCloseToMarker","_a","wrapInlineValueRichText","wrapInlineNameHTML","wrapInlineValueHTML","tooltipTextStyle","subMarkupTextList","subBlocks","orderMode","sortBlocks","slice","orderMap","valueAsc","valueDesc","comparator_1","sort","a","b","evaluate","sortParam","reverse","push","join","buildTooltipMarkup","builder","gapLevelBetweenSubBlocks","encodedContent","topGap","clearfix","marginCSS","leftHasMarker","style","marginCss","valueList","alignRight","paddingStr","alignCSS","wrapRichTextStyle","styles","paddingLeft","padding","align","retrieveVisualColorForTooltipMarker","series","dataIndex","getData","getItemVisual","visualDrawType","getPaddingFromTooltipModel","model","get","TooltipMarkupStyleCreator","richTextStyles","_nextStyleNameId","prototype","_generateStyleName","colorStr","markerId","marker","process","env","NODE_ENV","content","text","finalStl","stl","styleName"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/component/tooltip/tooltipMarkup.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getTooltipMarker, encodeHTML, makeValueReadable, convertToColorString } from '../../util/format';\nimport { isString, each, hasOwn, isArray, map, assert, extend } from 'zrender/lib/core/util';\nimport { SortOrderComparator } from '../../data/helper/dataValueHelper';\nimport { getRandomIdBase } from '../../util/number';\nvar TOOLTIP_LINE_HEIGHT_CSS = 'line-height:1'; // TODO: more textStyle option\n\nfunction getTooltipTextStyle(textStyle, renderMode) {\n  var nameFontColor = textStyle.color || '#6e7079';\n  var nameFontSize = textStyle.fontSize || 12;\n  var nameFontWeight = textStyle.fontWeight || '400';\n  var valueFontColor = textStyle.color || '#464646';\n  var valueFontSize = textStyle.fontSize || 14;\n  var valueFontWeight = textStyle.fontWeight || '900';\n\n  if (renderMode === 'html') {\n    // `textStyle` is probably from user input, should be encoded to reduce security risk.\n    return {\n      // eslint-disable-next-line max-len\n      nameStyle: \"font-size:\" + encodeHTML(nameFontSize + '') + \"px;color:\" + encodeHTML(nameFontColor) + \";font-weight:\" + encodeHTML(nameFontWeight + ''),\n      // eslint-disable-next-line max-len\n      valueStyle: \"font-size:\" + encodeHTML(valueFontSize + '') + \"px;color:\" + encodeHTML(valueFontColor) + \";font-weight:\" + encodeHTML(valueFontWeight + '')\n    };\n  } else {\n    return {\n      nameStyle: {\n        fontSize: nameFontSize,\n        fill: nameFontColor,\n        fontWeight: nameFontWeight\n      },\n      valueStyle: {\n        fontSize: valueFontSize,\n        fill: valueFontColor,\n        fontWeight: valueFontWeight\n      }\n    };\n  }\n} // See `TooltipMarkupLayoutIntent['innerGapLevel']`.\n// (value from UI design)\n\n\nvar HTML_GAPS = [0, 10, 20, 30];\nvar RICH_TEXT_GAPS = ['', '\\n', '\\n\\n', '\\n\\n\\n']; // eslint-disable-next-line max-len\n\nexport function createTooltipMarkup(type, option) {\n  option.type = type;\n  return option;\n}\n\nfunction getBuilder(fragment) {\n  return hasOwn(builderMap, fragment.type) && builderMap[fragment.type];\n}\n\nvar builderMap = {\n  /**\n   * A `section` block is like:\n   * ```\n   * header\n   * subBlock\n   * subBlock\n   * ...\n   * ```\n   */\n  section: {\n    planLayout: function (fragment) {\n      var subBlockLen = fragment.blocks.length;\n      var thisBlockHasInnerGap = subBlockLen > 1 || subBlockLen > 0 && !fragment.noHeader;\n      var thisGapLevelBetweenSubBlocks = 0;\n      each(fragment.blocks, function (subBlock) {\n        getBuilder(subBlock).planLayout(subBlock);\n        var subGapLevel = subBlock.__gapLevelBetweenSubBlocks; // If the some of the sub-blocks have some gaps (like 10px) inside, this block\n        // should use a larger gap (like 20px) to distinguish those sub-blocks.\n\n        if (subGapLevel >= thisGapLevelBetweenSubBlocks) {\n          thisGapLevelBetweenSubBlocks = subGapLevel + (thisBlockHasInnerGap && ( // 0 always can not be readable gap level.\n          !subGapLevel // If no header, always keep the sub gap level. Otherwise\n          // look weird in case `multipleSeries`.\n          || subBlock.type === 'section' && !subBlock.noHeader) ? 1 : 0);\n        }\n      });\n      fragment.__gapLevelBetweenSubBlocks = thisGapLevelBetweenSubBlocks;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var noHeader = fragment.noHeader;\n      var gaps = getGap(fragment);\n      var subMarkupText = buildSubBlocks(ctx, fragment, noHeader ? topMarginForOuterGap : gaps.html, toolTipTextStyle);\n\n      if (noHeader) {\n        return subMarkupText;\n      }\n\n      var displayableHeader = makeValueReadable(fragment.header, 'ordinal', ctx.useUTC);\n      var nameStyle = getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;\n\n      if (ctx.renderMode === 'richText') {\n        return wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;\n      } else {\n        return wrapBlockHTML(\"<div style=\\\"\" + nameStyle + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodeHTML(displayableHeader) + '</div>' + subMarkupText, topMarginForOuterGap);\n      }\n    }\n  },\n\n  /**\n   * A `nameValue` block is like:\n   * ```\n   * marker  name  value\n   * ```\n   */\n  nameValue: {\n    planLayout: function (fragment) {\n      fragment.__gapLevelBetweenSubBlocks = 0;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var renderMode = ctx.renderMode;\n      var noName = fragment.noName;\n      var noValue = fragment.noValue;\n      var noMarker = !fragment.markerType;\n      var name = fragment.name;\n      var value = fragment.value;\n      var useUTC = ctx.useUTC;\n\n      if (noName && noValue) {\n        return;\n      }\n\n      var markerStr = noMarker ? '' : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || '#333', renderMode);\n      var readableName = noName ? '' : makeValueReadable(name, 'ordinal', useUTC);\n      var valueTypeOption = fragment.valueType;\n      var readableValueList = noValue ? [] : isArray(value) ? map(value, function (val, idx) {\n        return makeValueReadable(val, isArray(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);\n      }) : [makeValueReadable(value, isArray(valueTypeOption) ? valueTypeOption[0] : valueTypeOption, useUTC)];\n      var valueAlignRight = !noMarker || !noName; // It little weird if only value next to marker but far from marker.\n\n      var valueCloseToMarker = !noMarker && noName;\n\n      var _a = getTooltipTextStyle(toolTipTextStyle, renderMode),\n          nameStyle = _a.nameStyle,\n          valueStyle = _a.valueStyle;\n\n      return renderMode === 'richText' ? (noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameRichText(ctx, readableName, nameStyle)) // Value has commas inside, so use ' ' as delimiter for multiple values.\n      + (noValue ? '' : wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : wrapBlockHTML((noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? '' : wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);\n    }\n  }\n};\n\nfunction buildSubBlocks(ctx, fragment, topMarginForOuterGap, tooltipTextStyle) {\n  var subMarkupTextList = [];\n  var subBlocks = fragment.blocks || [];\n  assert(!subBlocks || isArray(subBlocks));\n  subBlocks = subBlocks || [];\n  var orderMode = ctx.orderMode;\n\n  if (fragment.sortBlocks && orderMode) {\n    subBlocks = subBlocks.slice();\n    var orderMap = {\n      valueAsc: 'asc',\n      valueDesc: 'desc'\n    };\n\n    if (hasOwn(orderMap, orderMode)) {\n      var comparator_1 = new SortOrderComparator(orderMap[orderMode], null);\n      subBlocks.sort(function (a, b) {\n        return comparator_1.evaluate(a.sortParam, b.sortParam);\n      });\n    } // FIXME 'seriesDesc' necessary?\n    else if (orderMode === 'seriesDesc') {\n        subBlocks.reverse();\n      }\n  }\n\n  var gaps = getGap(fragment);\n  each(subBlocks, function (subBlock, idx) {\n    var subMarkupText = getBuilder(subBlock).build(ctx, subBlock, idx > 0 ? gaps.html : 0, tooltipTextStyle);\n    subMarkupText != null && subMarkupTextList.push(subMarkupText);\n  });\n\n  if (!subMarkupTextList.length) {\n    return;\n  }\n\n  return ctx.renderMode === 'richText' ? subMarkupTextList.join(gaps.richText) : wrapBlockHTML(subMarkupTextList.join(''), topMarginForOuterGap);\n}\n/**\n * @return markupText. null/undefined means no content.\n */\n\n\nexport function buildTooltipMarkup(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {\n  if (!fragment) {\n    return;\n  }\n\n  var builder = getBuilder(fragment);\n  builder.planLayout(fragment);\n  var ctx = {\n    useUTC: useUTC,\n    renderMode: renderMode,\n    orderMode: orderMode,\n    markupStyleCreator: markupStyleCreator\n  };\n  return builder.build(ctx, fragment, 0, toolTipTextStyle);\n}\n\nfunction getGap(fragment) {\n  var gapLevelBetweenSubBlocks = fragment.__gapLevelBetweenSubBlocks;\n  return {\n    html: HTML_GAPS[gapLevelBetweenSubBlocks],\n    richText: RICH_TEXT_GAPS[gapLevelBetweenSubBlocks]\n  };\n}\n\nfunction wrapBlockHTML(encodedContent, topGap) {\n  var clearfix = '<div style=\"clear:both\"></div>';\n  var marginCSS = \"margin: \" + topGap + \"px 0 0\";\n  return \"<div style=\\\"\" + marginCSS + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodedContent + clearfix + '</div>';\n}\n\nfunction wrapInlineNameHTML(name, leftHasMarker, style) {\n  var marginCss = leftHasMarker ? 'margin-left:2px' : '';\n  return \"<span style=\\\"\" + style + \";\" + marginCss + \"\\\">\" + encodeHTML(name) + '</span>';\n}\n\nfunction wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {\n  // Do not too close to marker, considering there are multiple values separated by spaces.\n  var paddingStr = valueCloseToMarker ? '10px' : '20px';\n  var alignCSS = alignRight ? \"float:right;margin-left:\" + paddingStr : '';\n  return \"<span style=\\\"\" + alignCSS + \";\" + style + \"\\\">\" // Value has commas inside, so use '  ' as delimiter for multiple values.\n  + map(valueList, function (value) {\n    return encodeHTML(value);\n  }).join('&nbsp;&nbsp;') + '</span>';\n}\n\nfunction wrapInlineNameRichText(ctx, name, style) {\n  return ctx.markupStyleCreator.wrapRichTextStyle(name, style);\n}\n\nfunction wrapInlineValueRichText(ctx, valueList, alignRight, valueCloseToMarker, style) {\n  var styles = [style];\n  var paddingLeft = valueCloseToMarker ? 10 : 20;\n  alignRight && styles.push({\n    padding: [0, 0, 0, paddingLeft],\n    align: 'right'\n  }); // Value has commas inside, so use '  ' as delimiter for multiple values.\n\n  return ctx.markupStyleCreator.wrapRichTextStyle(valueList.join('  '), styles);\n}\n\nexport function retrieveVisualColorForTooltipMarker(series, dataIndex) {\n  var style = series.getData().getItemVisual(dataIndex, 'style');\n  var color = style[series.visualDrawType];\n  return convertToColorString(color);\n}\nexport function getPaddingFromTooltipModel(model, renderMode) {\n  var padding = model.get('padding');\n  return padding != null ? padding // We give slightly different to look pretty.\n  : renderMode === 'richText' ? [8, 10] : 10;\n}\n/**\n * The major feature is generate styles for `renderMode: 'richText'`.\n * But it also serves `renderMode: 'html'` to provide\n * \"renderMode-independent\" API.\n */\n\nvar TooltipMarkupStyleCreator =\n/** @class */\nfunction () {\n  function TooltipMarkupStyleCreator() {\n    this.richTextStyles = {}; // Notice that \"generate a style name\" usuall happens repeatly when mouse moving and\n    // displaying a tooltip. So we put the `_nextStyleNameId` as a member of each creator\n    // rather than static shared by all creators (which will cause it increase to fast).\n\n    this._nextStyleNameId = getRandomIdBase();\n  }\n\n  TooltipMarkupStyleCreator.prototype._generateStyleName = function () {\n    return '__EC_aUTo_' + this._nextStyleNameId++;\n  };\n\n  TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function (markerType, colorStr, renderMode) {\n    var markerId = renderMode === 'richText' ? this._generateStyleName() : null;\n    var marker = getTooltipMarker({\n      color: colorStr,\n      type: markerType,\n      renderMode: renderMode,\n      markerId: markerId\n    });\n\n    if (isString(marker)) {\n      return marker;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        assert(markerId);\n      }\n\n      this.richTextStyles[markerId] = marker.style;\n      return marker.content;\n    }\n  };\n  /**\n   * @usage\n   * ```ts\n   * const styledText = markupStyleCreator.wrapRichTextStyle([\n   *     // The styles will be auto merged.\n   *     {\n   *         fontSize: 12,\n   *         color: 'blue'\n   *     },\n   *     {\n   *         padding: 20\n   *     }\n   * ]);\n   * ```\n   */\n\n\n  TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function (text, styles) {\n    var finalStl = {};\n\n    if (isArray(styles)) {\n      each(styles, function (stl) {\n        return extend(finalStl, stl);\n      });\n    } else {\n      extend(finalStl, styles);\n    }\n\n    var styleName = this._generateStyleName();\n\n    this.richTextStyles[styleName] = finalStl;\n    return \"{\" + styleName + \"|\" + text + \"}\";\n  };\n\n  return TooltipMarkupStyleCreator;\n}();\n\nexport { TooltipMarkupStyleCreator };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
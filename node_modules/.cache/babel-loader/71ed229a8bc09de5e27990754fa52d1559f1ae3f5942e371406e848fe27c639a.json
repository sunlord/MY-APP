{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { GeoJSONRegion } from './Region';\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n  var jsonCompressed = json;\n  var encodeScale = jsonCompressed.UTF8Scale;\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n  var features = jsonCompressed.features;\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n    if (geometry.type === 'Polygon') {\n      var coordinates = geometry.coordinates;\n      for (var c = 0; c < coordinates.length; c++) {\n        coordinates[c] = decodePolygon(coordinates[c], geometry.encodeOffsets[c], encodeScale);\n      }\n    } else if (geometry.type === 'MultiPolygon') {\n      var coordinates = geometry.coordinates;\n      for (var c = 0; c < coordinates.length; c++) {\n        var coordinate = coordinates[c];\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          coordinate[c2] = decodePolygon(coordinate[c2], geometry.encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n  jsonCompressed.UTF8Encoding = false;\n  return jsonCompressed;\n}\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n  return result;\n}\nexport default function parseGeoJSON(geoJson, nameProperty) {\n  geoJson = decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var geometries = [];\n    if (geo.type === 'Polygon') {\n      var coordinates = geo.coordinates;\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n    if (geo.type === 'MultiPolygon') {\n      var coordinates = geo.coordinates;\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n    var region = new GeoJSONRegion(properties[nameProperty || 'name'], geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}","map":{"version":3,"names":["zrUtil","GeoJSONRegion","decode","json","UTF8Encoding","jsonCompressed","encodeScale","UTF8Scale","features","f","length","feature","geometry","type","coordinates","c","decodePolygon","encodeOffsets","coordinate","c2","result","prevX","prevY","i","x","charCodeAt","y","push","parseGeoJSON","geoJson","nameProperty","map","filter","featureObj","properties","geo","geometries","exterior","interiors","slice","each","item","region","cp"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/coord/geo/parseGeoJson.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { GeoJSONRegion } from './Region';\n\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var jsonCompressed = json;\n  var encodeScale = jsonCompressed.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = jsonCompressed.features;\n\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n\n    if (geometry.type === 'Polygon') {\n      var coordinates = geometry.coordinates;\n\n      for (var c = 0; c < coordinates.length; c++) {\n        coordinates[c] = decodePolygon(coordinates[c], geometry.encodeOffsets[c], encodeScale);\n      }\n    } else if (geometry.type === 'MultiPolygon') {\n      var coordinates = geometry.coordinates;\n\n      for (var c = 0; c < coordinates.length; c++) {\n        var coordinate = coordinates[c];\n\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          coordinate[c2] = decodePolygon(coordinate[c2], geometry.encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n\n  jsonCompressed.UTF8Encoding = false;\n  return jsonCompressed;\n}\n\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n\nexport default function parseGeoJSON(geoJson, nameProperty) {\n  geoJson = decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var geometries = [];\n\n    if (geo.type === 'Polygon') {\n      var coordinates = geo.coordinates;\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n\n    if (geo.type === 'MultiPolygon') {\n      var coordinates = geo.coordinates;\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n\n    var region = new GeoJSONRegion(properties[nameProperty || 'name'], geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
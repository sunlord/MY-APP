{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport LineDraw from '../helper/LineDraw';\nimport EffectLine from '../helper/EffectLine';\nimport Line from '../helper/Line';\nimport Polyline from '../helper/Polyline';\nimport EffectPolyline from '../helper/EffectPolyline';\nimport LargeLineDraw from '../helper/LargeLineDraw';\nimport linesLayout from './linesLayout';\nimport { createClipPath } from '../helper/createClipPathFromCoordSys';\nimport ChartView from '../../view/Chart';\nvar LinesView = /** @class */\nfunction (_super) {\n  __extends(LinesView, _super);\n  function LinesView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = LinesView.type;\n    return _this;\n  }\n  LinesView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n    var zlevel = seriesModel.get('zlevel');\n    var trailLength = seriesModel.get(['effect', 'trailLength']);\n    var zr = api.getZr(); // Avoid the drag cause ghost shadow\n    // FIXME Better way ?\n    // SVG doesn't support\n\n    var isSvg = zr.painter.getType() === 'svg';\n    if (!isSvg) {\n      zr.painter.getLayer(zlevel).clear(true);\n    } // Config layer with motion blur\n\n    if (this._lastZlevel != null && !isSvg) {\n      zr.configLayer(this._lastZlevel, {\n        motionBlur: false\n      });\n    }\n    if (this._showEffect(seriesModel) && trailLength) {\n      if (process.env.NODE_ENV !== 'production') {\n        var notInIndividual_1 = false;\n        ecModel.eachSeries(function (otherSeriesModel) {\n          if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {\n            notInIndividual_1 = true;\n          }\n        });\n        notInIndividual_1 && console.warn('Lines with trail effect should have an individual zlevel');\n      }\n      if (!isSvg) {\n        zr.configLayer(zlevel, {\n          motionBlur: true,\n          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\n        });\n      }\n    }\n    lineDraw.updateData(data);\n    var clipPath = seriesModel.get('clip', true) && createClipPath(seriesModel.coordinateSystem, false, seriesModel);\n    if (clipPath) {\n      this.group.setClipPath(clipPath);\n    } else {\n      this.group.removeClipPath();\n    }\n    this._lastZlevel = zlevel;\n    this._finished = true;\n  };\n  LinesView.prototype.incrementalPrepareRender = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n    lineDraw.incrementalPrepareUpdate(data);\n    this._clearLayer(api);\n    this._finished = false;\n  };\n  LinesView.prototype.incrementalRender = function (taskParams, seriesModel, ecModel) {\n    this._lineDraw.incrementalUpdate(taskParams, seriesModel.getData());\n    this._finished = taskParams.end === seriesModel.getData().count();\n  };\n  LinesView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var pipelineContext = seriesModel.pipelineContext;\n    if (!this._finished || pipelineContext.large || pipelineContext.progressiveRender) {\n      // TODO Don't have to do update in large mode. Only do it when there are millions of data.\n      return {\n        update: true\n      };\n    } else {\n      // TODO Use same logic with ScatterView.\n      // Manually update layout\n      var res = linesLayout.reset(seriesModel, ecModel, api);\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count(),\n          count: data.count()\n        }, data);\n      } // Not in large mode\n\n      this._lineDraw.updateLayout();\n      this._clearLayer(api);\n    }\n  };\n  LinesView.prototype._updateLineDraw = function (data, seriesModel) {\n    var lineDraw = this._lineDraw;\n    var hasEffect = this._showEffect(seriesModel);\n    var isPolyline = !!seriesModel.get('polyline');\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n    if (process.env.NODE_ENV !== 'production') {\n      if (hasEffect && isLargeDraw) {\n        console.warn('Large lines not support effect');\n      }\n    }\n    if (!lineDraw || hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLargeDraw !== this._isLargeDraw) {\n      if (lineDraw) {\n        lineDraw.remove();\n      }\n      lineDraw = this._lineDraw = isLargeDraw ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);\n      this._hasEffet = hasEffect;\n      this._isPolyline = isPolyline;\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n    this.group.add(lineDraw.group);\n    return lineDraw;\n  };\n  LinesView.prototype._showEffect = function (seriesModel) {\n    return !!seriesModel.get(['effect', 'show']);\n  };\n  LinesView.prototype._clearLayer = function (api) {\n    // Not use motion when dragging or zooming\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n    if (!isSvg && this._lastZlevel != null) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  };\n  LinesView.prototype.remove = function (ecModel, api) {\n    this._lineDraw && this._lineDraw.remove();\n    this._lineDraw = null; // Clear motion when lineDraw is removed\n\n    this._clearLayer(api);\n  };\n  LinesView.type = 'lines';\n  return LinesView;\n}(ChartView);\nexport default LinesView;","map":{"version":3,"names":["__extends","LineDraw","EffectLine","Line","Polyline","EffectPolyline","LargeLineDraw","linesLayout","createClipPath","ChartView","LinesView","_super","_this","apply","arguments","type","prototype","render","seriesModel","ecModel","api","data","getData","lineDraw","_updateLineDraw","zlevel","get","trailLength","zr","getZr","isSvg","painter","getType","getLayer","clear","_lastZlevel","configLayer","motionBlur","_showEffect","process","env","NODE_ENV","notInIndividual_1","eachSeries","otherSeriesModel","console","warn","lastFrameAlpha","Math","max","min","updateData","clipPath","coordinateSystem","group","setClipPath","removeClipPath","_finished","incrementalPrepareRender","incrementalPrepareUpdate","_clearLayer","incrementalRender","taskParams","_lineDraw","incrementalUpdate","end","count","updateTransform","pipelineContext","large","progressiveRender","update","res","reset","progress","start","updateLayout","hasEffect","isPolyline","isLargeDraw","_hasEffet","_isPolyline","_isLargeDraw","remove","removeAll","add"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/chart/lines/LinesView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport LineDraw from '../helper/LineDraw';\nimport EffectLine from '../helper/EffectLine';\nimport Line from '../helper/Line';\nimport Polyline from '../helper/Polyline';\nimport EffectPolyline from '../helper/EffectPolyline';\nimport LargeLineDraw from '../helper/LargeLineDraw';\nimport linesLayout from './linesLayout';\nimport { createClipPath } from '../helper/createClipPathFromCoordSys';\nimport ChartView from '../../view/Chart';\n\nvar LinesView =\n/** @class */\nfunction (_super) {\n  __extends(LinesView, _super);\n\n  function LinesView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LinesView.type;\n    return _this;\n  }\n\n  LinesView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n\n    var zlevel = seriesModel.get('zlevel');\n    var trailLength = seriesModel.get(['effect', 'trailLength']);\n    var zr = api.getZr(); // Avoid the drag cause ghost shadow\n    // FIXME Better way ?\n    // SVG doesn't support\n\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(zlevel).clear(true);\n    } // Config layer with motion blur\n\n\n    if (this._lastZlevel != null && !isSvg) {\n      zr.configLayer(this._lastZlevel, {\n        motionBlur: false\n      });\n    }\n\n    if (this._showEffect(seriesModel) && trailLength) {\n      if (process.env.NODE_ENV !== 'production') {\n        var notInIndividual_1 = false;\n        ecModel.eachSeries(function (otherSeriesModel) {\n          if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {\n            notInIndividual_1 = true;\n          }\n        });\n        notInIndividual_1 && console.warn('Lines with trail effect should have an individual zlevel');\n      }\n\n      if (!isSvg) {\n        zr.configLayer(zlevel, {\n          motionBlur: true,\n          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\n        });\n      }\n    }\n\n    lineDraw.updateData(data);\n    var clipPath = seriesModel.get('clip', true) && createClipPath(seriesModel.coordinateSystem, false, seriesModel);\n\n    if (clipPath) {\n      this.group.setClipPath(clipPath);\n    } else {\n      this.group.removeClipPath();\n    }\n\n    this._lastZlevel = zlevel;\n    this._finished = true;\n  };\n\n  LinesView.prototype.incrementalPrepareRender = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n\n    lineDraw.incrementalPrepareUpdate(data);\n\n    this._clearLayer(api);\n\n    this._finished = false;\n  };\n\n  LinesView.prototype.incrementalRender = function (taskParams, seriesModel, ecModel) {\n    this._lineDraw.incrementalUpdate(taskParams, seriesModel.getData());\n\n    this._finished = taskParams.end === seriesModel.getData().count();\n  };\n\n  LinesView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var pipelineContext = seriesModel.pipelineContext;\n\n    if (!this._finished || pipelineContext.large || pipelineContext.progressiveRender) {\n      // TODO Don't have to do update in large mode. Only do it when there are millions of data.\n      return {\n        update: true\n      };\n    } else {\n      // TODO Use same logic with ScatterView.\n      // Manually update layout\n      var res = linesLayout.reset(seriesModel, ecModel, api);\n\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count(),\n          count: data.count()\n        }, data);\n      } // Not in large mode\n\n\n      this._lineDraw.updateLayout();\n\n      this._clearLayer(api);\n    }\n  };\n\n  LinesView.prototype._updateLineDraw = function (data, seriesModel) {\n    var lineDraw = this._lineDraw;\n\n    var hasEffect = this._showEffect(seriesModel);\n\n    var isPolyline = !!seriesModel.get('polyline');\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hasEffect && isLargeDraw) {\n        console.warn('Large lines not support effect');\n      }\n    }\n\n    if (!lineDraw || hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLargeDraw !== this._isLargeDraw) {\n      if (lineDraw) {\n        lineDraw.remove();\n      }\n\n      lineDraw = this._lineDraw = isLargeDraw ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);\n      this._hasEffet = hasEffect;\n      this._isPolyline = isPolyline;\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n\n    this.group.add(lineDraw.group);\n    return lineDraw;\n  };\n\n  LinesView.prototype._showEffect = function (seriesModel) {\n    return !!seriesModel.get(['effect', 'show']);\n  };\n\n  LinesView.prototype._clearLayer = function (api) {\n    // Not use motion when dragging or zooming\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg && this._lastZlevel != null) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  };\n\n  LinesView.prototype.remove = function (ecModel, api) {\n    this._lineDraw && this._lineDraw.remove();\n    this._lineDraw = null; // Clear motion when lineDraw is removed\n\n    this._clearLayer(api);\n  };\n\n  LinesView.type = 'lines';\n  return LinesView;\n}(ChartView);\n\nexport default LinesView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport List from '../../data/List';\nimport createDimensions from '../../data/helper/createDimensions';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport { getDataItemValue } from '../../util/model';\nimport CoordinateSystem from '../../core/CoordinateSystem';\nimport { getCoordSysInfoBySeries } from '../../model/referHelper';\nimport { createSourceFromSeriesDataOption, isSourceInstance } from '../../data/Source';\nimport { enableDataStack } from '../../data/helper/dataStackHelper';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper';\nimport { SOURCE_FORMAT_ORIGINAL } from '../../util/types';\nfunction createListFromArray(source, seriesModel, opt) {\n  opt = opt || {};\n  if (!isSourceInstance(source)) {\n    source = createSourceFromSeriesDataOption(source);\n  }\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var registeredCoordSys = CoordinateSystem.get(coordSysName);\n  var coordSysInfo = getCoordSysInfoBySeries(seriesModel);\n  var coordSysDimDefs;\n  if (coordSysInfo && coordSysInfo.coordSysDims) {\n    coordSysDimDefs = zrUtil.map(coordSysInfo.coordSysDims, function (dim) {\n      var dimInfo = {\n        name: dim\n      };\n      var axisModel = coordSysInfo.axisMap.get(dim);\n      if (axisModel) {\n        var axisType = axisModel.get('type');\n        dimInfo.type = getDimensionTypeByAxis(axisType); // dimInfo.stackable = isStackable(axisType);\n      }\n\n      return dimInfo;\n    });\n  }\n  if (!coordSysDimDefs) {\n    // Get dimensions from registered coordinate system\n    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];\n  }\n  var useEncodeDefaulter = opt.useEncodeDefaulter;\n  var dimInfoList = createDimensions(source, {\n    coordDimensions: coordSysDimDefs,\n    generateCoord: opt.generateCoord,\n    encodeDefaulter: zrUtil.isFunction(useEncodeDefaulter) ? useEncodeDefaulter : useEncodeDefaulter ? zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordSysDimDefs, seriesModel) : null\n  });\n  var firstCategoryDimIndex;\n  var hasNameEncode;\n  coordSysInfo && zrUtil.each(dimInfoList, function (dimInfo, dimIndex) {\n    var coordDim = dimInfo.coordDim;\n    var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);\n    if (categoryAxisModel) {\n      if (firstCategoryDimIndex == null) {\n        firstCategoryDimIndex = dimIndex;\n      }\n      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();\n      if (opt.createInvertedIndices) {\n        dimInfo.createInvertedIndices = true;\n      }\n    }\n    if (dimInfo.otherDims.itemName != null) {\n      hasNameEncode = true;\n    }\n  });\n  if (!hasNameEncode && firstCategoryDimIndex != null) {\n    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;\n  }\n  var stackCalculationInfo = enableDataStack(seriesModel, dimInfoList);\n  var list = new List(dimInfoList, seriesModel);\n  list.setCalculationInfo(stackCalculationInfo);\n  var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {\n    // Use dataIndex as ordinal value in categoryAxis\n    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);\n  } : null;\n  list.hasItemOption = false;\n  list.initData(source, null, dimValueGetter);\n  return list;\n}\nfunction isNeedCompleteOrdinalData(source) {\n  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var sampleItem = firstDataNotNull(source.data || []);\n    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));\n  }\n}\nfunction firstDataNotNull(data) {\n  var i = 0;\n  while (i < data.length && data[i] == null) {\n    i++;\n  }\n  return data[i];\n}\nexport default createListFromArray;","map":{"version":3,"names":["zrUtil","List","createDimensions","getDimensionTypeByAxis","getDataItemValue","CoordinateSystem","getCoordSysInfoBySeries","createSourceFromSeriesDataOption","isSourceInstance","enableDataStack","makeSeriesEncodeForAxisCoordSys","SOURCE_FORMAT_ORIGINAL","createListFromArray","source","seriesModel","opt","coordSysName","get","registeredCoordSys","coordSysInfo","coordSysDimDefs","coordSysDims","map","dim","dimInfo","name","axisModel","axisMap","axisType","type","getDimensionsInfo","dimensions","slice","useEncodeDefaulter","dimInfoList","coordDimensions","generateCoord","encodeDefaulter","isFunction","curry","firstCategoryDimIndex","hasNameEncode","each","dimIndex","coordDim","categoryAxisModel","categoryAxisMap","ordinalMeta","getOrdinalMeta","createInvertedIndices","otherDims","itemName","stackCalculationInfo","list","setCalculationInfo","dimValueGetter","isNeedCompleteOrdinalData","itemOpt","dimName","dataIndex","defaultDimValueGetter","hasItemOption","initData","sourceFormat","sampleItem","firstDataNotNull","data","isArray","i","length"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/chart/helper/createListFromArray.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport List from '../../data/List';\nimport createDimensions from '../../data/helper/createDimensions';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport { getDataItemValue } from '../../util/model';\nimport CoordinateSystem from '../../core/CoordinateSystem';\nimport { getCoordSysInfoBySeries } from '../../model/referHelper';\nimport { createSourceFromSeriesDataOption, isSourceInstance } from '../../data/Source';\nimport { enableDataStack } from '../../data/helper/dataStackHelper';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper';\nimport { SOURCE_FORMAT_ORIGINAL } from '../../util/types';\n\nfunction createListFromArray(source, seriesModel, opt) {\n  opt = opt || {};\n\n  if (!isSourceInstance(source)) {\n    source = createSourceFromSeriesDataOption(source);\n  }\n\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var registeredCoordSys = CoordinateSystem.get(coordSysName);\n  var coordSysInfo = getCoordSysInfoBySeries(seriesModel);\n  var coordSysDimDefs;\n\n  if (coordSysInfo && coordSysInfo.coordSysDims) {\n    coordSysDimDefs = zrUtil.map(coordSysInfo.coordSysDims, function (dim) {\n      var dimInfo = {\n        name: dim\n      };\n      var axisModel = coordSysInfo.axisMap.get(dim);\n\n      if (axisModel) {\n        var axisType = axisModel.get('type');\n        dimInfo.type = getDimensionTypeByAxis(axisType); // dimInfo.stackable = isStackable(axisType);\n      }\n\n      return dimInfo;\n    });\n  }\n\n  if (!coordSysDimDefs) {\n    // Get dimensions from registered coordinate system\n    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];\n  }\n\n  var useEncodeDefaulter = opt.useEncodeDefaulter;\n  var dimInfoList = createDimensions(source, {\n    coordDimensions: coordSysDimDefs,\n    generateCoord: opt.generateCoord,\n    encodeDefaulter: zrUtil.isFunction(useEncodeDefaulter) ? useEncodeDefaulter : useEncodeDefaulter ? zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordSysDimDefs, seriesModel) : null\n  });\n  var firstCategoryDimIndex;\n  var hasNameEncode;\n  coordSysInfo && zrUtil.each(dimInfoList, function (dimInfo, dimIndex) {\n    var coordDim = dimInfo.coordDim;\n    var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);\n\n    if (categoryAxisModel) {\n      if (firstCategoryDimIndex == null) {\n        firstCategoryDimIndex = dimIndex;\n      }\n\n      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();\n\n      if (opt.createInvertedIndices) {\n        dimInfo.createInvertedIndices = true;\n      }\n    }\n\n    if (dimInfo.otherDims.itemName != null) {\n      hasNameEncode = true;\n    }\n  });\n\n  if (!hasNameEncode && firstCategoryDimIndex != null) {\n    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;\n  }\n\n  var stackCalculationInfo = enableDataStack(seriesModel, dimInfoList);\n  var list = new List(dimInfoList, seriesModel);\n  list.setCalculationInfo(stackCalculationInfo);\n  var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {\n    // Use dataIndex as ordinal value in categoryAxis\n    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);\n  } : null;\n  list.hasItemOption = false;\n  list.initData(source, null, dimValueGetter);\n  return list;\n}\n\nfunction isNeedCompleteOrdinalData(source) {\n  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var sampleItem = firstDataNotNull(source.data || []);\n    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));\n  }\n}\n\nfunction firstDataNotNull(data) {\n  var i = 0;\n\n  while (i < data.length && data[i] == null) {\n    i++;\n  }\n\n  return data[i];\n}\n\nexport default createListFromArray;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
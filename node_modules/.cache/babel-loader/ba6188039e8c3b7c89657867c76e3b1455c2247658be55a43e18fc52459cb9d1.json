{"ast":null,"code":"import * as vec2 from './vector';\nimport BoundingRect from './BoundingRect';\nimport { devicePixelRatio as dpr } from '../config';\nimport { fromLine, fromCubic, fromQuadratic, fromArc } from './bbox';\nimport { cubicAt, cubicLength, cubicSubdivide, quadraticLength, quadraticSubdivide } from './curve';\nvar CMD = {\n  M: 1,\n  L: 2,\n  C: 3,\n  Q: 4,\n  A: 5,\n  Z: 6,\n  R: 7\n};\nvar tmpOutX = [];\nvar tmpOutY = [];\nvar min = [];\nvar max = [];\nvar min2 = [];\nvar max2 = [];\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathCos = Math.cos;\nvar mathSin = Math.sin;\nvar mathSqrt = Math.sqrt;\nvar mathAbs = Math.abs;\nvar PI = Math.PI;\nvar PI2 = PI * 2;\nvar hasTypedArray = typeof Float32Array !== 'undefined';\nvar tmpAngles = [];\nfunction modPI2(radian) {\n  var n = Math.round(radian / PI * 1e8) / 1e8;\n  return n % 2 * PI;\n}\nexport function normalizeArcAngles(angles, anticlockwise) {\n  var newStartAngle = modPI2(angles[0]);\n  if (newStartAngle < 0) {\n    newStartAngle += PI2;\n  }\n  var delta = newStartAngle - angles[0];\n  var newEndAngle = angles[1];\n  newEndAngle += delta;\n  if (!anticlockwise && newEndAngle - newStartAngle >= PI2) {\n    newEndAngle = newStartAngle + PI2;\n  } else if (anticlockwise && newStartAngle - newEndAngle >= PI2) {\n    newEndAngle = newStartAngle - PI2;\n  } else if (!anticlockwise && newStartAngle > newEndAngle) {\n    newEndAngle = newStartAngle + (PI2 - modPI2(newStartAngle - newEndAngle));\n  } else if (anticlockwise && newStartAngle < newEndAngle) {\n    newEndAngle = newStartAngle - (PI2 - modPI2(newEndAngle - newStartAngle));\n  }\n  angles[0] = newStartAngle;\n  angles[1] = newEndAngle;\n}\nvar PathProxy = function () {\n  function PathProxy(notSaveData) {\n    this.dpr = 1;\n    this._xi = 0;\n    this._yi = 0;\n    this._x0 = 0;\n    this._y0 = 0;\n    this._len = 0;\n    if (notSaveData) {\n      this._saveData = false;\n    }\n    if (this._saveData) {\n      this.data = [];\n    }\n  }\n  PathProxy.prototype.increaseVersion = function () {\n    this._version++;\n  };\n  PathProxy.prototype.getVersion = function () {\n    return this._version;\n  };\n  PathProxy.prototype.setScale = function (sx, sy, segmentIgnoreThreshold) {\n    segmentIgnoreThreshold = segmentIgnoreThreshold || 0;\n    if (segmentIgnoreThreshold > 0) {\n      this._ux = mathAbs(segmentIgnoreThreshold / dpr / sx) || 0;\n      this._uy = mathAbs(segmentIgnoreThreshold / dpr / sy) || 0;\n    }\n  };\n  PathProxy.prototype.setDPR = function (dpr) {\n    this.dpr = dpr;\n  };\n  PathProxy.prototype.setContext = function (ctx) {\n    this._ctx = ctx;\n  };\n  PathProxy.prototype.getContext = function () {\n    return this._ctx;\n  };\n  PathProxy.prototype.beginPath = function () {\n    this._ctx && this._ctx.beginPath();\n    this.reset();\n    return this;\n  };\n  PathProxy.prototype.reset = function () {\n    if (this._saveData) {\n      this._len = 0;\n    }\n    if (this._lineDash) {\n      this._lineDash = null;\n      this._dashOffset = 0;\n    }\n    if (this._pathSegLen) {\n      this._pathSegLen = null;\n      this._pathLen = 0;\n    }\n    this._version++;\n  };\n  PathProxy.prototype.moveTo = function (x, y) {\n    this._drawPendingPt();\n    this.addData(CMD.M, x, y);\n    this._ctx && this._ctx.moveTo(x, y);\n    this._x0 = x;\n    this._y0 = y;\n    this._xi = x;\n    this._yi = y;\n    return this;\n  };\n  PathProxy.prototype.lineTo = function (x, y) {\n    var dx = mathAbs(x - this._xi);\n    var dy = mathAbs(y - this._yi);\n    var exceedUnit = dx > this._ux || dy > this._uy;\n    this.addData(CMD.L, x, y);\n    if (this._ctx && exceedUnit) {\n      this._needsDash ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);\n    }\n    if (exceedUnit) {\n      this._xi = x;\n      this._yi = y;\n      this._pendingPtDist = 0;\n    } else {\n      var d2 = dx * dx + dy * dy;\n      if (d2 > this._pendingPtDist) {\n        this._pendingPtX = x;\n        this._pendingPtY = y;\n        this._pendingPtDist = d2;\n      }\n    }\n    return this;\n  };\n  PathProxy.prototype.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {\n    this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n    if (this._ctx) {\n      this._needsDash ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n    }\n    this._xi = x3;\n    this._yi = y3;\n    return this;\n  };\n  PathProxy.prototype.quadraticCurveTo = function (x1, y1, x2, y2) {\n    this.addData(CMD.Q, x1, y1, x2, y2);\n    if (this._ctx) {\n      this._needsDash ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n    }\n    this._xi = x2;\n    this._yi = y2;\n    return this;\n  };\n  PathProxy.prototype.arc = function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n    tmpAngles[0] = startAngle;\n    tmpAngles[1] = endAngle;\n    normalizeArcAngles(tmpAngles, anticlockwise);\n    startAngle = tmpAngles[0];\n    endAngle = tmpAngles[1];\n    var delta = endAngle - startAngle;\n    this.addData(CMD.A, cx, cy, r, r, startAngle, delta, 0, anticlockwise ? 0 : 1);\n    this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n    this._xi = mathCos(endAngle) * r + cx;\n    this._yi = mathSin(endAngle) * r + cy;\n    return this;\n  };\n  PathProxy.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n    if (this._ctx) {\n      this._ctx.arcTo(x1, y1, x2, y2, radius);\n    }\n    return this;\n  };\n  PathProxy.prototype.rect = function (x, y, w, h) {\n    this._ctx && this._ctx.rect(x, y, w, h);\n    this.addData(CMD.R, x, y, w, h);\n    return this;\n  };\n  PathProxy.prototype.closePath = function () {\n    this._drawPendingPt();\n    this.addData(CMD.Z);\n    var ctx = this._ctx;\n    var x0 = this._x0;\n    var y0 = this._y0;\n    if (ctx) {\n      this._needsDash && this._dashedLineTo(x0, y0);\n      ctx.closePath();\n    }\n    this._xi = x0;\n    this._yi = y0;\n    return this;\n  };\n  PathProxy.prototype.fill = function (ctx) {\n    ctx && ctx.fill();\n    this.toStatic();\n  };\n  PathProxy.prototype.stroke = function (ctx) {\n    ctx && ctx.stroke();\n    this.toStatic();\n  };\n  PathProxy.prototype.setLineDash = function (lineDash) {\n    if (lineDash instanceof Array) {\n      this._lineDash = lineDash;\n      this._dashIdx = 0;\n      var lineDashSum = 0;\n      for (var i = 0; i < lineDash.length; i++) {\n        lineDashSum += lineDash[i];\n      }\n      this._dashSum = lineDashSum;\n      this._needsDash = true;\n    } else {\n      this._lineDash = null;\n      this._needsDash = false;\n    }\n    return this;\n  };\n  PathProxy.prototype.setLineDashOffset = function (offset) {\n    this._dashOffset = offset;\n    return this;\n  };\n  PathProxy.prototype.len = function () {\n    return this._len;\n  };\n  PathProxy.prototype.setData = function (data) {\n    var len = data.length;\n    if (!(this.data && this.data.length === len) && hasTypedArray) {\n      this.data = new Float32Array(len);\n    }\n    for (var i = 0; i < len; i++) {\n      this.data[i] = data[i];\n    }\n    this._len = len;\n  };\n  PathProxy.prototype.appendPath = function (path) {\n    if (!(path instanceof Array)) {\n      path = [path];\n    }\n    var len = path.length;\n    var appendSize = 0;\n    var offset = this._len;\n    for (var i = 0; i < len; i++) {\n      appendSize += path[i].len();\n    }\n    if (hasTypedArray && this.data instanceof Float32Array) {\n      this.data = new Float32Array(offset + appendSize);\n    }\n    for (var i = 0; i < len; i++) {\n      var appendPathData = path[i].data;\n      for (var k = 0; k < appendPathData.length; k++) {\n        this.data[offset++] = appendPathData[k];\n      }\n    }\n    this._len = offset;\n  };\n  PathProxy.prototype.addData = function (cmd, a, b, c, d, e, f, g, h) {\n    if (!this._saveData) {\n      return;\n    }\n    var data = this.data;\n    if (this._len + arguments.length > data.length) {\n      this._expandData();\n      data = this.data;\n    }\n    for (var i = 0; i < arguments.length; i++) {\n      data[this._len++] = arguments[i];\n    }\n  };\n  PathProxy.prototype._drawPendingPt = function () {\n    if (this._pendingPtDist > 0) {\n      this._ctx && this._ctx.lineTo(this._pendingPtX, this._pendingPtY);\n      this._pendingPtDist = 0;\n    }\n  };\n  PathProxy.prototype._expandData = function () {\n    if (!(this.data instanceof Array)) {\n      var newData = [];\n      for (var i = 0; i < this._len; i++) {\n        newData[i] = this.data[i];\n      }\n      this.data = newData;\n    }\n  };\n  PathProxy.prototype._dashedLineTo = function (x1, y1) {\n    var dashSum = this._dashSum;\n    var lineDash = this._lineDash;\n    var ctx = this._ctx;\n    var offset = this._dashOffset;\n    var x0 = this._xi;\n    var y0 = this._yi;\n    var dx = x1 - x0;\n    var dy = y1 - y0;\n    var dist = mathSqrt(dx * dx + dy * dy);\n    var x = x0;\n    var y = y0;\n    var nDash = lineDash.length;\n    var dash;\n    var idx;\n    dx /= dist;\n    dy /= dist;\n    if (offset < 0) {\n      offset = dashSum + offset;\n    }\n    offset %= dashSum;\n    x -= offset * dx;\n    y -= offset * dy;\n    while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx === 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {\n      idx = this._dashIdx;\n      dash = lineDash[idx];\n      x += dx * dash;\n      y += dy * dash;\n      this._dashIdx = (idx + 1) % nDash;\n      if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {\n        continue;\n      }\n      ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));\n    }\n    dx = x - x1;\n    dy = y - y1;\n    this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n  };\n  PathProxy.prototype._dashedBezierTo = function (x1, y1, x2, y2, x3, y3) {\n    var ctx = this._ctx;\n    var dashSum = this._dashSum;\n    var offset = this._dashOffset;\n    var lineDash = this._lineDash;\n    var x0 = this._xi;\n    var y0 = this._yi;\n    var bezierLen = 0;\n    var idx = this._dashIdx;\n    var nDash = lineDash.length;\n    var t;\n    var dx;\n    var dy;\n    var x;\n    var y;\n    var tmpLen = 0;\n    if (offset < 0) {\n      offset = dashSum + offset;\n    }\n    offset %= dashSum;\n    for (t = 0; t < 1; t += 0.1) {\n      dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);\n      dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);\n      bezierLen += mathSqrt(dx * dx + dy * dy);\n    }\n    for (; idx < nDash; idx++) {\n      tmpLen += lineDash[idx];\n      if (tmpLen > offset) {\n        break;\n      }\n    }\n    t = (tmpLen - offset) / bezierLen;\n    while (t <= 1) {\n      x = cubicAt(x0, x1, x2, x3, t);\n      y = cubicAt(y0, y1, y2, y3, t);\n      idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);\n      t += lineDash[idx] / bezierLen;\n      idx = (idx + 1) % nDash;\n    }\n    idx % 2 !== 0 && ctx.lineTo(x3, y3);\n    dx = x3 - x;\n    dy = y3 - y;\n    this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n  };\n  PathProxy.prototype._dashedQuadraticTo = function (x1, y1, x2, y2) {\n    var x3 = x2;\n    var y3 = y2;\n    x2 = (x2 + 2 * x1) / 3;\n    y2 = (y2 + 2 * y1) / 3;\n    x1 = (this._xi + 2 * x1) / 3;\n    y1 = (this._yi + 2 * y1) / 3;\n    this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n  };\n  PathProxy.prototype.toStatic = function () {\n    if (!this._saveData) {\n      return;\n    }\n    this._drawPendingPt();\n    var data = this.data;\n    if (data instanceof Array) {\n      data.length = this._len;\n      if (hasTypedArray && this._len > 11) {\n        this.data = new Float32Array(data);\n      }\n    }\n  };\n  PathProxy.prototype.getBoundingRect = function () {\n    min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n    max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n    var data = this.data;\n    var xi = 0;\n    var yi = 0;\n    var x0 = 0;\n    var y0 = 0;\n    var i;\n    for (i = 0; i < this._len;) {\n      var cmd = data[i++];\n      var isFirst = i === 1;\n      if (isFirst) {\n        xi = data[i];\n        yi = data[i + 1];\n        x0 = xi;\n        y0 = yi;\n      }\n      switch (cmd) {\n        case CMD.M:\n          xi = x0 = data[i++];\n          yi = y0 = data[i++];\n          min2[0] = x0;\n          min2[1] = y0;\n          max2[0] = x0;\n          max2[1] = y0;\n          break;\n        case CMD.L:\n          fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n          xi = data[i++];\n          yi = data[i++];\n          break;\n        case CMD.C:\n          fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);\n          xi = data[i++];\n          yi = data[i++];\n          break;\n        case CMD.Q:\n          fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);\n          xi = data[i++];\n          yi = data[i++];\n          break;\n        case CMD.A:\n          var cx = data[i++];\n          var cy = data[i++];\n          var rx = data[i++];\n          var ry = data[i++];\n          var startAngle = data[i++];\n          var endAngle = data[i++] + startAngle;\n          i += 1;\n          var anticlockwise = !data[i++];\n          if (isFirst) {\n            x0 = mathCos(startAngle) * rx + cx;\n            y0 = mathSin(startAngle) * ry + cy;\n          }\n          fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);\n          xi = mathCos(endAngle) * rx + cx;\n          yi = mathSin(endAngle) * ry + cy;\n          break;\n        case CMD.R:\n          x0 = xi = data[i++];\n          y0 = yi = data[i++];\n          var width = data[i++];\n          var height = data[i++];\n          fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n          break;\n        case CMD.Z:\n          xi = x0;\n          yi = y0;\n          break;\n      }\n      vec2.min(min, min, min2);\n      vec2.max(max, max, max2);\n    }\n    if (i === 0) {\n      min[0] = min[1] = max[0] = max[1] = 0;\n    }\n    return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n  };\n  PathProxy.prototype._calculateLength = function () {\n    var data = this.data;\n    var len = this._len;\n    var ux = this._ux;\n    var uy = this._uy;\n    var xi = 0;\n    var yi = 0;\n    var x0 = 0;\n    var y0 = 0;\n    if (!this._pathSegLen) {\n      this._pathSegLen = [];\n    }\n    var pathSegLen = this._pathSegLen;\n    var pathTotalLen = 0;\n    var segCount = 0;\n    for (var i = 0; i < len;) {\n      var cmd = data[i++];\n      var isFirst = i === 1;\n      if (isFirst) {\n        xi = data[i];\n        yi = data[i + 1];\n        x0 = xi;\n        y0 = yi;\n      }\n      var l = -1;\n      switch (cmd) {\n        case CMD.M:\n          xi = x0 = data[i++];\n          yi = y0 = data[i++];\n          break;\n        case CMD.L:\n          {\n            var x2 = data[i++];\n            var y2 = data[i++];\n            var dx = x2 - xi;\n            var dy = y2 - yi;\n            if (mathAbs(dx) > ux || mathAbs(dy) > uy || i === len - 1) {\n              l = Math.sqrt(dx * dx + dy * dy);\n              xi = x2;\n              yi = y2;\n            }\n            break;\n          }\n        case CMD.C:\n          {\n            var x1 = data[i++];\n            var y1 = data[i++];\n            var x2 = data[i++];\n            var y2 = data[i++];\n            var x3 = data[i++];\n            var y3 = data[i++];\n            l = cubicLength(xi, yi, x1, y1, x2, y2, x3, y3, 10);\n            xi = x3;\n            yi = y3;\n            break;\n          }\n        case CMD.Q:\n          {\n            var x1 = data[i++];\n            var y1 = data[i++];\n            var x2 = data[i++];\n            var y2 = data[i++];\n            l = quadraticLength(xi, yi, x1, y1, x2, y2, 10);\n            xi = x2;\n            yi = y2;\n            break;\n          }\n        case CMD.A:\n          var cx = data[i++];\n          var cy = data[i++];\n          var rx = data[i++];\n          var ry = data[i++];\n          var startAngle = data[i++];\n          var delta = data[i++];\n          var endAngle = delta + startAngle;\n          i += 1;\n          var anticlockwise = !data[i++];\n          if (isFirst) {\n            x0 = mathCos(startAngle) * rx + cx;\n            y0 = mathSin(startAngle) * ry + cy;\n          }\n          l = mathMax(rx, ry) * mathMin(PI2, Math.abs(delta));\n          xi = mathCos(endAngle) * rx + cx;\n          yi = mathSin(endAngle) * ry + cy;\n          break;\n        case CMD.R:\n          {\n            x0 = xi = data[i++];\n            y0 = yi = data[i++];\n            var width = data[i++];\n            var height = data[i++];\n            l = width * 2 + height * 2;\n            break;\n          }\n        case CMD.Z:\n          {\n            var dx = x0 - xi;\n            var dy = y0 - yi;\n            l = Math.sqrt(dx * dx + dy * dy);\n            xi = x0;\n            yi = y0;\n            break;\n          }\n      }\n      if (l >= 0) {\n        pathSegLen[segCount++] = l;\n        pathTotalLen += l;\n      }\n    }\n    this._pathLen = pathTotalLen;\n    return pathTotalLen;\n  };\n  PathProxy.prototype.rebuildPath = function (ctx, percent) {\n    var d = this.data;\n    var ux = this._ux;\n    var uy = this._uy;\n    var len = this._len;\n    var x0;\n    var y0;\n    var xi;\n    var yi;\n    var x;\n    var y;\n    var drawPart = percent < 1;\n    var pathSegLen;\n    var pathTotalLen;\n    var accumLength = 0;\n    var segCount = 0;\n    var displayedLength;\n    var pendingPtDist = 0;\n    var pendingPtX;\n    var pendingPtY;\n    if (drawPart) {\n      if (!this._pathSegLen) {\n        this._calculateLength();\n      }\n      pathSegLen = this._pathSegLen;\n      pathTotalLen = this._pathLen;\n      displayedLength = percent * pathTotalLen;\n      if (!displayedLength) {\n        return;\n      }\n    }\n    lo: for (var i = 0; i < len;) {\n      var cmd = d[i++];\n      var isFirst = i === 1;\n      if (isFirst) {\n        xi = d[i];\n        yi = d[i + 1];\n        x0 = xi;\n        y0 = yi;\n      }\n      switch (cmd) {\n        case CMD.M:\n          if (pendingPtDist > 0) {\n            ctx.lineTo(pendingPtX, pendingPtY);\n            pendingPtDist = 0;\n          }\n          x0 = xi = d[i++];\n          y0 = yi = d[i++];\n          ctx.moveTo(xi, yi);\n          break;\n        case CMD.L:\n          {\n            x = d[i++];\n            y = d[i++];\n            var dx = mathAbs(x - xi);\n            var dy = mathAbs(y - yi);\n            if (dx > ux || dy > uy) {\n              if (drawPart) {\n                var l = pathSegLen[segCount++];\n                if (accumLength + l > displayedLength) {\n                  var t = (displayedLength - accumLength) / l;\n                  ctx.lineTo(xi * (1 - t) + x * t, yi * (1 - t) + y * t);\n                  break lo;\n                }\n                accumLength += l;\n              }\n              ctx.lineTo(x, y);\n              xi = x;\n              yi = y;\n              pendingPtDist = 0;\n            } else {\n              var d2 = dx * dx + dy * dy;\n              if (d2 > pendingPtDist) {\n                pendingPtX = x;\n                pendingPtY = y;\n                pendingPtDist = d2;\n              }\n            }\n            break;\n          }\n        case CMD.C:\n          {\n            var x1 = d[i++];\n            var y1 = d[i++];\n            var x2 = d[i++];\n            var y2 = d[i++];\n            var x3 = d[i++];\n            var y3 = d[i++];\n            if (drawPart) {\n              var l = pathSegLen[segCount++];\n              if (accumLength + l > displayedLength) {\n                var t = (displayedLength - accumLength) / l;\n                cubicSubdivide(xi, x1, x2, x3, t, tmpOutX);\n                cubicSubdivide(yi, y1, y2, y3, t, tmpOutY);\n                ctx.bezierCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2], tmpOutX[3], tmpOutY[3]);\n                break lo;\n              }\n              accumLength += l;\n            }\n            ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            xi = x3;\n            yi = y3;\n            break;\n          }\n        case CMD.Q:\n          {\n            var x1 = d[i++];\n            var y1 = d[i++];\n            var x2 = d[i++];\n            var y2 = d[i++];\n            if (drawPart) {\n              var l = pathSegLen[segCount++];\n              if (accumLength + l > displayedLength) {\n                var t = (displayedLength - accumLength) / l;\n                quadraticSubdivide(xi, x1, x2, t, tmpOutX);\n                quadraticSubdivide(yi, y1, y2, t, tmpOutY);\n                ctx.quadraticCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2]);\n                break lo;\n              }\n              accumLength += l;\n            }\n            ctx.quadraticCurveTo(x1, y1, x2, y2);\n            xi = x2;\n            yi = y2;\n            break;\n          }\n        case CMD.A:\n          var cx = d[i++];\n          var cy = d[i++];\n          var rx = d[i++];\n          var ry = d[i++];\n          var startAngle = d[i++];\n          var delta = d[i++];\n          var psi = d[i++];\n          var anticlockwise = !d[i++];\n          var r = rx > ry ? rx : ry;\n          var scaleX = rx > ry ? 1 : rx / ry;\n          var scaleY = rx > ry ? ry / rx : 1;\n          var isEllipse = mathAbs(rx - ry) > 1e-3;\n          var endAngle = startAngle + delta;\n          var breakBuild = false;\n          if (drawPart) {\n            var l = pathSegLen[segCount++];\n            if (accumLength + l > displayedLength) {\n              endAngle = startAngle + delta * (displayedLength - accumLength) / l;\n              breakBuild = true;\n            }\n            accumLength += l;\n          }\n          if (isEllipse && ctx.ellipse) {\n            ctx.ellipse(cx, cy, rx, ry, psi, startAngle, endAngle, anticlockwise);\n          } else {\n            ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n          }\n          if (breakBuild) {\n            break lo;\n          }\n          if (isFirst) {\n            x0 = mathCos(startAngle) * rx + cx;\n            y0 = mathSin(startAngle) * ry + cy;\n          }\n          xi = mathCos(endAngle) * rx + cx;\n          yi = mathSin(endAngle) * ry + cy;\n          break;\n        case CMD.R:\n          x0 = xi = d[i];\n          y0 = yi = d[i + 1];\n          x = d[i++];\n          y = d[i++];\n          var width = d[i++];\n          var height = d[i++];\n          if (drawPart) {\n            var l = pathSegLen[segCount++];\n            if (accumLength + l > displayedLength) {\n              var d_1 = displayedLength - accumLength;\n              ctx.moveTo(x, y);\n              ctx.lineTo(x + mathMin(d_1, width), y);\n              d_1 -= width;\n              if (d_1 > 0) {\n                ctx.lineTo(x + width, y + mathMin(d_1, height));\n              }\n              d_1 -= height;\n              if (d_1 > 0) {\n                ctx.lineTo(x + mathMax(width - d_1, 0), y + height);\n              }\n              d_1 -= width;\n              if (d_1 > 0) {\n                ctx.lineTo(x, y + mathMax(height - d_1, 0));\n              }\n              break lo;\n            }\n            accumLength += l;\n          }\n          ctx.rect(x, y, width, height);\n          break;\n        case CMD.Z:\n          if (pendingPtDist > 0) {\n            ctx.lineTo(pendingPtX, pendingPtY);\n            pendingPtDist = 0;\n          }\n          if (drawPart) {\n            var l = pathSegLen[segCount++];\n            if (accumLength + l > displayedLength) {\n              var t = (displayedLength - accumLength) / l;\n              ctx.lineTo(xi * (1 - t) + x0 * t, yi * (1 - t) + y0 * t);\n              break lo;\n            }\n            accumLength += l;\n          }\n          ctx.closePath();\n          xi = x0;\n          yi = y0;\n      }\n    }\n  };\n  PathProxy.CMD = CMD;\n  PathProxy.initDefaultProps = function () {\n    var proto = PathProxy.prototype;\n    proto._saveData = true;\n    proto._needsDash = false;\n    proto._dashOffset = 0;\n    proto._dashIdx = 0;\n    proto._dashSum = 0;\n    proto._ux = 0;\n    proto._uy = 0;\n    proto._pendingPtDist = 0;\n    proto._version = 0;\n  }();\n  return PathProxy;\n}();\nexport default PathProxy;","map":{"version":3,"names":["vec2","BoundingRect","devicePixelRatio","dpr","fromLine","fromCubic","fromQuadratic","fromArc","cubicAt","cubicLength","cubicSubdivide","quadraticLength","quadraticSubdivide","CMD","M","L","C","Q","A","Z","R","tmpOutX","tmpOutY","min","max","min2","max2","mathMin","Math","mathMax","mathCos","cos","mathSin","sin","mathSqrt","sqrt","mathAbs","abs","PI","PI2","hasTypedArray","Float32Array","tmpAngles","modPI2","radian","n","round","normalizeArcAngles","angles","anticlockwise","newStartAngle","delta","newEndAngle","PathProxy","notSaveData","_xi","_yi","_x0","_y0","_len","_saveData","data","prototype","increaseVersion","_version","getVersion","setScale","sx","sy","segmentIgnoreThreshold","_ux","_uy","setDPR","setContext","ctx","_ctx","getContext","beginPath","reset","_lineDash","_dashOffset","_pathSegLen","_pathLen","moveTo","x","y","_drawPendingPt","addData","lineTo","dx","dy","exceedUnit","_needsDash","_dashedLineTo","_pendingPtDist","d2","_pendingPtX","_pendingPtY","bezierCurveTo","x1","y1","x2","y2","x3","y3","_dashedBezierTo","quadraticCurveTo","_dashedQuadraticTo","arc","cx","cy","r","startAngle","endAngle","arcTo","radius","rect","w","h","closePath","x0","y0","fill","toStatic","stroke","setLineDash","lineDash","Array","_dashIdx","lineDashSum","i","length","_dashSum","setLineDashOffset","offset","len","setData","appendPath","path","appendSize","appendPathData","k","cmd","a","b","c","d","e","f","g","arguments","_expandData","newData","dashSum","dist","nDash","dash","idx","bezierLen","t","tmpLen","getBoundingRect","Number","MAX_VALUE","xi","yi","isFirst","rx","ry","width","height","_calculateLength","ux","uy","pathSegLen","pathTotalLen","segCount","l","rebuildPath","percent","drawPart","accumLength","displayedLength","pendingPtDist","pendingPtX","pendingPtY","lo","psi","scaleX","scaleY","isEllipse","breakBuild","ellipse","d_1","initDefaultProps","proto"],"sources":["/Users/jiong/Downloads/my-app/node_modules/zrender/lib/core/PathProxy.js"],"sourcesContent":["import * as vec2 from './vector';\nimport BoundingRect from './BoundingRect';\nimport { devicePixelRatio as dpr } from '../config';\nimport { fromLine, fromCubic, fromQuadratic, fromArc } from './bbox';\nimport { cubicAt, cubicLength, cubicSubdivide, quadraticLength, quadraticSubdivide } from './curve';\nvar CMD = {\n    M: 1,\n    L: 2,\n    C: 3,\n    Q: 4,\n    A: 5,\n    Z: 6,\n    R: 7\n};\nvar tmpOutX = [];\nvar tmpOutY = [];\nvar min = [];\nvar max = [];\nvar min2 = [];\nvar max2 = [];\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathCos = Math.cos;\nvar mathSin = Math.sin;\nvar mathSqrt = Math.sqrt;\nvar mathAbs = Math.abs;\nvar PI = Math.PI;\nvar PI2 = PI * 2;\nvar hasTypedArray = typeof Float32Array !== 'undefined';\nvar tmpAngles = [];\nfunction modPI2(radian) {\n    var n = Math.round(radian / PI * 1e8) / 1e8;\n    return (n % 2) * PI;\n}\nexport function normalizeArcAngles(angles, anticlockwise) {\n    var newStartAngle = modPI2(angles[0]);\n    if (newStartAngle < 0) {\n        newStartAngle += PI2;\n    }\n    var delta = newStartAngle - angles[0];\n    var newEndAngle = angles[1];\n    newEndAngle += delta;\n    if (!anticlockwise && newEndAngle - newStartAngle >= PI2) {\n        newEndAngle = newStartAngle + PI2;\n    }\n    else if (anticlockwise && newStartAngle - newEndAngle >= PI2) {\n        newEndAngle = newStartAngle - PI2;\n    }\n    else if (!anticlockwise && newStartAngle > newEndAngle) {\n        newEndAngle = newStartAngle + (PI2 - modPI2(newStartAngle - newEndAngle));\n    }\n    else if (anticlockwise && newStartAngle < newEndAngle) {\n        newEndAngle = newStartAngle - (PI2 - modPI2(newEndAngle - newStartAngle));\n    }\n    angles[0] = newStartAngle;\n    angles[1] = newEndAngle;\n}\nvar PathProxy = (function () {\n    function PathProxy(notSaveData) {\n        this.dpr = 1;\n        this._xi = 0;\n        this._yi = 0;\n        this._x0 = 0;\n        this._y0 = 0;\n        this._len = 0;\n        if (notSaveData) {\n            this._saveData = false;\n        }\n        if (this._saveData) {\n            this.data = [];\n        }\n    }\n    PathProxy.prototype.increaseVersion = function () {\n        this._version++;\n    };\n    PathProxy.prototype.getVersion = function () {\n        return this._version;\n    };\n    PathProxy.prototype.setScale = function (sx, sy, segmentIgnoreThreshold) {\n        segmentIgnoreThreshold = segmentIgnoreThreshold || 0;\n        if (segmentIgnoreThreshold > 0) {\n            this._ux = mathAbs(segmentIgnoreThreshold / dpr / sx) || 0;\n            this._uy = mathAbs(segmentIgnoreThreshold / dpr / sy) || 0;\n        }\n    };\n    PathProxy.prototype.setDPR = function (dpr) {\n        this.dpr = dpr;\n    };\n    PathProxy.prototype.setContext = function (ctx) {\n        this._ctx = ctx;\n    };\n    PathProxy.prototype.getContext = function () {\n        return this._ctx;\n    };\n    PathProxy.prototype.beginPath = function () {\n        this._ctx && this._ctx.beginPath();\n        this.reset();\n        return this;\n    };\n    PathProxy.prototype.reset = function () {\n        if (this._saveData) {\n            this._len = 0;\n        }\n        if (this._lineDash) {\n            this._lineDash = null;\n            this._dashOffset = 0;\n        }\n        if (this._pathSegLen) {\n            this._pathSegLen = null;\n            this._pathLen = 0;\n        }\n        this._version++;\n    };\n    PathProxy.prototype.moveTo = function (x, y) {\n        this._drawPendingPt();\n        this.addData(CMD.M, x, y);\n        this._ctx && this._ctx.moveTo(x, y);\n        this._x0 = x;\n        this._y0 = y;\n        this._xi = x;\n        this._yi = y;\n        return this;\n    };\n    PathProxy.prototype.lineTo = function (x, y) {\n        var dx = mathAbs(x - this._xi);\n        var dy = mathAbs(y - this._yi);\n        var exceedUnit = dx > this._ux || dy > this._uy;\n        this.addData(CMD.L, x, y);\n        if (this._ctx && exceedUnit) {\n            this._needsDash ? this._dashedLineTo(x, y)\n                : this._ctx.lineTo(x, y);\n        }\n        if (exceedUnit) {\n            this._xi = x;\n            this._yi = y;\n            this._pendingPtDist = 0;\n        }\n        else {\n            var d2 = dx * dx + dy * dy;\n            if (d2 > this._pendingPtDist) {\n                this._pendingPtX = x;\n                this._pendingPtY = y;\n                this._pendingPtDist = d2;\n            }\n        }\n        return this;\n    };\n    PathProxy.prototype.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {\n        this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n        if (this._ctx) {\n            this._needsDash ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n        }\n        this._xi = x3;\n        this._yi = y3;\n        return this;\n    };\n    PathProxy.prototype.quadraticCurveTo = function (x1, y1, x2, y2) {\n        this.addData(CMD.Q, x1, y1, x2, y2);\n        if (this._ctx) {\n            this._needsDash ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n        }\n        this._xi = x2;\n        this._yi = y2;\n        return this;\n    };\n    PathProxy.prototype.arc = function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n        tmpAngles[0] = startAngle;\n        tmpAngles[1] = endAngle;\n        normalizeArcAngles(tmpAngles, anticlockwise);\n        startAngle = tmpAngles[0];\n        endAngle = tmpAngles[1];\n        var delta = endAngle - startAngle;\n        this.addData(CMD.A, cx, cy, r, r, startAngle, delta, 0, anticlockwise ? 0 : 1);\n        this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n        this._xi = mathCos(endAngle) * r + cx;\n        this._yi = mathSin(endAngle) * r + cy;\n        return this;\n    };\n    PathProxy.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n        if (this._ctx) {\n            this._ctx.arcTo(x1, y1, x2, y2, radius);\n        }\n        return this;\n    };\n    PathProxy.prototype.rect = function (x, y, w, h) {\n        this._ctx && this._ctx.rect(x, y, w, h);\n        this.addData(CMD.R, x, y, w, h);\n        return this;\n    };\n    PathProxy.prototype.closePath = function () {\n        this._drawPendingPt();\n        this.addData(CMD.Z);\n        var ctx = this._ctx;\n        var x0 = this._x0;\n        var y0 = this._y0;\n        if (ctx) {\n            this._needsDash && this._dashedLineTo(x0, y0);\n            ctx.closePath();\n        }\n        this._xi = x0;\n        this._yi = y0;\n        return this;\n    };\n    PathProxy.prototype.fill = function (ctx) {\n        ctx && ctx.fill();\n        this.toStatic();\n    };\n    PathProxy.prototype.stroke = function (ctx) {\n        ctx && ctx.stroke();\n        this.toStatic();\n    };\n    PathProxy.prototype.setLineDash = function (lineDash) {\n        if (lineDash instanceof Array) {\n            this._lineDash = lineDash;\n            this._dashIdx = 0;\n            var lineDashSum = 0;\n            for (var i = 0; i < lineDash.length; i++) {\n                lineDashSum += lineDash[i];\n            }\n            this._dashSum = lineDashSum;\n            this._needsDash = true;\n        }\n        else {\n            this._lineDash = null;\n            this._needsDash = false;\n        }\n        return this;\n    };\n    PathProxy.prototype.setLineDashOffset = function (offset) {\n        this._dashOffset = offset;\n        return this;\n    };\n    PathProxy.prototype.len = function () {\n        return this._len;\n    };\n    PathProxy.prototype.setData = function (data) {\n        var len = data.length;\n        if (!(this.data && this.data.length === len) && hasTypedArray) {\n            this.data = new Float32Array(len);\n        }\n        for (var i = 0; i < len; i++) {\n            this.data[i] = data[i];\n        }\n        this._len = len;\n    };\n    PathProxy.prototype.appendPath = function (path) {\n        if (!(path instanceof Array)) {\n            path = [path];\n        }\n        var len = path.length;\n        var appendSize = 0;\n        var offset = this._len;\n        for (var i = 0; i < len; i++) {\n            appendSize += path[i].len();\n        }\n        if (hasTypedArray && (this.data instanceof Float32Array)) {\n            this.data = new Float32Array(offset + appendSize);\n        }\n        for (var i = 0; i < len; i++) {\n            var appendPathData = path[i].data;\n            for (var k = 0; k < appendPathData.length; k++) {\n                this.data[offset++] = appendPathData[k];\n            }\n        }\n        this._len = offset;\n    };\n    PathProxy.prototype.addData = function (cmd, a, b, c, d, e, f, g, h) {\n        if (!this._saveData) {\n            return;\n        }\n        var data = this.data;\n        if (this._len + arguments.length > data.length) {\n            this._expandData();\n            data = this.data;\n        }\n        for (var i = 0; i < arguments.length; i++) {\n            data[this._len++] = arguments[i];\n        }\n    };\n    PathProxy.prototype._drawPendingPt = function () {\n        if (this._pendingPtDist > 0) {\n            this._ctx && this._ctx.lineTo(this._pendingPtX, this._pendingPtY);\n            this._pendingPtDist = 0;\n        }\n    };\n    PathProxy.prototype._expandData = function () {\n        if (!(this.data instanceof Array)) {\n            var newData = [];\n            for (var i = 0; i < this._len; i++) {\n                newData[i] = this.data[i];\n            }\n            this.data = newData;\n        }\n    };\n    PathProxy.prototype._dashedLineTo = function (x1, y1) {\n        var dashSum = this._dashSum;\n        var lineDash = this._lineDash;\n        var ctx = this._ctx;\n        var offset = this._dashOffset;\n        var x0 = this._xi;\n        var y0 = this._yi;\n        var dx = x1 - x0;\n        var dy = y1 - y0;\n        var dist = mathSqrt(dx * dx + dy * dy);\n        var x = x0;\n        var y = y0;\n        var nDash = lineDash.length;\n        var dash;\n        var idx;\n        dx /= dist;\n        dy /= dist;\n        if (offset < 0) {\n            offset = dashSum + offset;\n        }\n        offset %= dashSum;\n        x -= offset * dx;\n        y -= offset * dy;\n        while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx === 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n            idx = this._dashIdx;\n            dash = lineDash[idx];\n            x += dx * dash;\n            y += dy * dash;\n            this._dashIdx = (idx + 1) % nDash;\n            if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                continue;\n            }\n            ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));\n        }\n        dx = x - x1;\n        dy = y - y1;\n        this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n    };\n    PathProxy.prototype._dashedBezierTo = function (x1, y1, x2, y2, x3, y3) {\n        var ctx = this._ctx;\n        var dashSum = this._dashSum;\n        var offset = this._dashOffset;\n        var lineDash = this._lineDash;\n        var x0 = this._xi;\n        var y0 = this._yi;\n        var bezierLen = 0;\n        var idx = this._dashIdx;\n        var nDash = lineDash.length;\n        var t;\n        var dx;\n        var dy;\n        var x;\n        var y;\n        var tmpLen = 0;\n        if (offset < 0) {\n            offset = dashSum + offset;\n        }\n        offset %= dashSum;\n        for (t = 0; t < 1; t += 0.1) {\n            dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                - cubicAt(x0, x1, x2, x3, t);\n            dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                - cubicAt(y0, y1, y2, y3, t);\n            bezierLen += mathSqrt(dx * dx + dy * dy);\n        }\n        for (; idx < nDash; idx++) {\n            tmpLen += lineDash[idx];\n            if (tmpLen > offset) {\n                break;\n            }\n        }\n        t = (tmpLen - offset) / bezierLen;\n        while (t <= 1) {\n            x = cubicAt(x0, x1, x2, x3, t);\n            y = cubicAt(y0, y1, y2, y3, t);\n            idx % 2 ? ctx.moveTo(x, y)\n                : ctx.lineTo(x, y);\n            t += lineDash[idx] / bezierLen;\n            idx = (idx + 1) % nDash;\n        }\n        (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n        dx = x3 - x;\n        dy = y3 - y;\n        this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n    };\n    PathProxy.prototype._dashedQuadraticTo = function (x1, y1, x2, y2) {\n        var x3 = x2;\n        var y3 = y2;\n        x2 = (x2 + 2 * x1) / 3;\n        y2 = (y2 + 2 * y1) / 3;\n        x1 = (this._xi + 2 * x1) / 3;\n        y1 = (this._yi + 2 * y1) / 3;\n        this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n    };\n    PathProxy.prototype.toStatic = function () {\n        if (!this._saveData) {\n            return;\n        }\n        this._drawPendingPt();\n        var data = this.data;\n        if (data instanceof Array) {\n            data.length = this._len;\n            if (hasTypedArray && this._len > 11) {\n                this.data = new Float32Array(data);\n            }\n        }\n    };\n    PathProxy.prototype.getBoundingRect = function () {\n        min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n        max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n        var data = this.data;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n        var i;\n        for (i = 0; i < this._len;) {\n            var cmd = data[i++];\n            var isFirst = i === 1;\n            if (isFirst) {\n                xi = data[i];\n                yi = data[i + 1];\n                x0 = xi;\n                y0 = yi;\n            }\n            switch (cmd) {\n                case CMD.M:\n                    xi = x0 = data[i++];\n                    yi = y0 = data[i++];\n                    min2[0] = x0;\n                    min2[1] = y0;\n                    max2[0] = x0;\n                    max2[1] = y0;\n                    break;\n                case CMD.L:\n                    fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var startAngle = data[i++];\n                    var endAngle = data[i++] + startAngle;\n                    i += 1;\n                    var anticlockwise = !data[i++];\n                    if (isFirst) {\n                        x0 = mathCos(startAngle) * rx + cx;\n                        y0 = mathSin(startAngle) * ry + cy;\n                    }\n                    fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);\n                    xi = mathCos(endAngle) * rx + cx;\n                    yi = mathSin(endAngle) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                    break;\n                case CMD.Z:\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n            vec2.min(min, min, min2);\n            vec2.max(max, max, max2);\n        }\n        if (i === 0) {\n            min[0] = min[1] = max[0] = max[1] = 0;\n        }\n        return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n    };\n    PathProxy.prototype._calculateLength = function () {\n        var data = this.data;\n        var len = this._len;\n        var ux = this._ux;\n        var uy = this._uy;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n        if (!this._pathSegLen) {\n            this._pathSegLen = [];\n        }\n        var pathSegLen = this._pathSegLen;\n        var pathTotalLen = 0;\n        var segCount = 0;\n        for (var i = 0; i < len;) {\n            var cmd = data[i++];\n            var isFirst = i === 1;\n            if (isFirst) {\n                xi = data[i];\n                yi = data[i + 1];\n                x0 = xi;\n                y0 = yi;\n            }\n            var l = -1;\n            switch (cmd) {\n                case CMD.M:\n                    xi = x0 = data[i++];\n                    yi = y0 = data[i++];\n                    break;\n                case CMD.L: {\n                    var x2 = data[i++];\n                    var y2 = data[i++];\n                    var dx = x2 - xi;\n                    var dy = y2 - yi;\n                    if (mathAbs(dx) > ux || mathAbs(dy) > uy || i === len - 1) {\n                        l = Math.sqrt(dx * dx + dy * dy);\n                        xi = x2;\n                        yi = y2;\n                    }\n                    break;\n                }\n                case CMD.C: {\n                    var x1 = data[i++];\n                    var y1 = data[i++];\n                    var x2 = data[i++];\n                    var y2 = data[i++];\n                    var x3 = data[i++];\n                    var y3 = data[i++];\n                    l = cubicLength(xi, yi, x1, y1, x2, y2, x3, y3, 10);\n                    xi = x3;\n                    yi = y3;\n                    break;\n                }\n                case CMD.Q: {\n                    var x1 = data[i++];\n                    var y1 = data[i++];\n                    var x2 = data[i++];\n                    var y2 = data[i++];\n                    l = quadraticLength(xi, yi, x1, y1, x2, y2, 10);\n                    xi = x2;\n                    yi = y2;\n                    break;\n                }\n                case CMD.A:\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var startAngle = data[i++];\n                    var delta = data[i++];\n                    var endAngle = delta + startAngle;\n                    i += 1;\n                    var anticlockwise = !data[i++];\n                    if (isFirst) {\n                        x0 = mathCos(startAngle) * rx + cx;\n                        y0 = mathSin(startAngle) * ry + cy;\n                    }\n                    l = mathMax(rx, ry) * mathMin(PI2, Math.abs(delta));\n                    xi = mathCos(endAngle) * rx + cx;\n                    yi = mathSin(endAngle) * ry + cy;\n                    break;\n                case CMD.R: {\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    l = width * 2 + height * 2;\n                    break;\n                }\n                case CMD.Z: {\n                    var dx = x0 - xi;\n                    var dy = y0 - yi;\n                    l = Math.sqrt(dx * dx + dy * dy);\n                    xi = x0;\n                    yi = y0;\n                    break;\n                }\n            }\n            if (l >= 0) {\n                pathSegLen[segCount++] = l;\n                pathTotalLen += l;\n            }\n        }\n        this._pathLen = pathTotalLen;\n        return pathTotalLen;\n    };\n    PathProxy.prototype.rebuildPath = function (ctx, percent) {\n        var d = this.data;\n        var ux = this._ux;\n        var uy = this._uy;\n        var len = this._len;\n        var x0;\n        var y0;\n        var xi;\n        var yi;\n        var x;\n        var y;\n        var drawPart = percent < 1;\n        var pathSegLen;\n        var pathTotalLen;\n        var accumLength = 0;\n        var segCount = 0;\n        var displayedLength;\n        var pendingPtDist = 0;\n        var pendingPtX;\n        var pendingPtY;\n        if (drawPart) {\n            if (!this._pathSegLen) {\n                this._calculateLength();\n            }\n            pathSegLen = this._pathSegLen;\n            pathTotalLen = this._pathLen;\n            displayedLength = percent * pathTotalLen;\n            if (!displayedLength) {\n                return;\n            }\n        }\n        lo: for (var i = 0; i < len;) {\n            var cmd = d[i++];\n            var isFirst = i === 1;\n            if (isFirst) {\n                xi = d[i];\n                yi = d[i + 1];\n                x0 = xi;\n                y0 = yi;\n            }\n            switch (cmd) {\n                case CMD.M:\n                    if (pendingPtDist > 0) {\n                        ctx.lineTo(pendingPtX, pendingPtY);\n                        pendingPtDist = 0;\n                    }\n                    x0 = xi = d[i++];\n                    y0 = yi = d[i++];\n                    ctx.moveTo(xi, yi);\n                    break;\n                case CMD.L: {\n                    x = d[i++];\n                    y = d[i++];\n                    var dx = mathAbs(x - xi);\n                    var dy = mathAbs(y - yi);\n                    if (dx > ux || dy > uy) {\n                        if (drawPart) {\n                            var l = pathSegLen[segCount++];\n                            if (accumLength + l > displayedLength) {\n                                var t = (displayedLength - accumLength) / l;\n                                ctx.lineTo(xi * (1 - t) + x * t, yi * (1 - t) + y * t);\n                                break lo;\n                            }\n                            accumLength += l;\n                        }\n                        ctx.lineTo(x, y);\n                        xi = x;\n                        yi = y;\n                        pendingPtDist = 0;\n                    }\n                    else {\n                        var d2 = dx * dx + dy * dy;\n                        if (d2 > pendingPtDist) {\n                            pendingPtX = x;\n                            pendingPtY = y;\n                            pendingPtDist = d2;\n                        }\n                    }\n                    break;\n                }\n                case CMD.C: {\n                    var x1 = d[i++];\n                    var y1 = d[i++];\n                    var x2 = d[i++];\n                    var y2 = d[i++];\n                    var x3 = d[i++];\n                    var y3 = d[i++];\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var t = (displayedLength - accumLength) / l;\n                            cubicSubdivide(xi, x1, x2, x3, t, tmpOutX);\n                            cubicSubdivide(yi, y1, y2, y3, t, tmpOutY);\n                            ctx.bezierCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2], tmpOutX[3], tmpOutY[3]);\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n                    xi = x3;\n                    yi = y3;\n                    break;\n                }\n                case CMD.Q: {\n                    var x1 = d[i++];\n                    var y1 = d[i++];\n                    var x2 = d[i++];\n                    var y2 = d[i++];\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var t = (displayedLength - accumLength) / l;\n                            quadraticSubdivide(xi, x1, x2, t, tmpOutX);\n                            quadraticSubdivide(yi, y1, y2, t, tmpOutY);\n                            ctx.quadraticCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2]);\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.quadraticCurveTo(x1, y1, x2, y2);\n                    xi = x2;\n                    yi = y2;\n                    break;\n                }\n                case CMD.A:\n                    var cx = d[i++];\n                    var cy = d[i++];\n                    var rx = d[i++];\n                    var ry = d[i++];\n                    var startAngle = d[i++];\n                    var delta = d[i++];\n                    var psi = d[i++];\n                    var anticlockwise = !d[i++];\n                    var r = (rx > ry) ? rx : ry;\n                    var scaleX = (rx > ry) ? 1 : rx / ry;\n                    var scaleY = (rx > ry) ? ry / rx : 1;\n                    var isEllipse = mathAbs(rx - ry) > 1e-3;\n                    var endAngle = startAngle + delta;\n                    var breakBuild = false;\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            endAngle = startAngle + delta * (displayedLength - accumLength) / l;\n                            breakBuild = true;\n                        }\n                        accumLength += l;\n                    }\n                    if (isEllipse && ctx.ellipse) {\n                        ctx.ellipse(cx, cy, rx, ry, psi, startAngle, endAngle, anticlockwise);\n                    }\n                    else {\n                        ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n                    }\n                    if (breakBuild) {\n                        break lo;\n                    }\n                    if (isFirst) {\n                        x0 = mathCos(startAngle) * rx + cx;\n                        y0 = mathSin(startAngle) * ry + cy;\n                    }\n                    xi = mathCos(endAngle) * rx + cx;\n                    yi = mathSin(endAngle) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = d[i];\n                    y0 = yi = d[i + 1];\n                    x = d[i++];\n                    y = d[i++];\n                    var width = d[i++];\n                    var height = d[i++];\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var d_1 = displayedLength - accumLength;\n                            ctx.moveTo(x, y);\n                            ctx.lineTo(x + mathMin(d_1, width), y);\n                            d_1 -= width;\n                            if (d_1 > 0) {\n                                ctx.lineTo(x + width, y + mathMin(d_1, height));\n                            }\n                            d_1 -= height;\n                            if (d_1 > 0) {\n                                ctx.lineTo(x + mathMax(width - d_1, 0), y + height);\n                            }\n                            d_1 -= width;\n                            if (d_1 > 0) {\n                                ctx.lineTo(x, y + mathMax(height - d_1, 0));\n                            }\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.rect(x, y, width, height);\n                    break;\n                case CMD.Z:\n                    if (pendingPtDist > 0) {\n                        ctx.lineTo(pendingPtX, pendingPtY);\n                        pendingPtDist = 0;\n                    }\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var t = (displayedLength - accumLength) / l;\n                            ctx.lineTo(xi * (1 - t) + x0 * t, yi * (1 - t) + y0 * t);\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.closePath();\n                    xi = x0;\n                    yi = y0;\n            }\n        }\n    };\n    PathProxy.CMD = CMD;\n    PathProxy.initDefaultProps = (function () {\n        var proto = PathProxy.prototype;\n        proto._saveData = true;\n        proto._needsDash = false;\n        proto._dashOffset = 0;\n        proto._dashIdx = 0;\n        proto._dashSum = 0;\n        proto._ux = 0;\n        proto._uy = 0;\n        proto._pendingPtDist = 0;\n        proto._version = 0;\n    })();\n    return PathProxy;\n}());\nexport default PathProxy;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
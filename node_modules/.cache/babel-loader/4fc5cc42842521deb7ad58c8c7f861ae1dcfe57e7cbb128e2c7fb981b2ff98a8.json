{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport Mock, { mock } from 'mockjs';\n\n// get 请求从config.url获取参数,post从config.body中获取参数\nfunction param2Obj(url) {\n  const search = url.split('?')[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\n}\nlet List = [];\nconst count = 200;\nfor (let i = 0; i < count; i++) {\n  List.push(Mock.mock({\n    id: Mock.Random.guid(),\n    name: Mock.Random.cname(),\n    addr: Mock.mock('@county(true)'),\n    'age|18-60': 1,\n    birth: Mock.Random.date(),\n    sex: Mock.Random.integer(0, 1)\n  }));\n}\nexport default {\n  getUserList: config => {\n    console.log(config, 'config');\n    const {\n      name,\n      page = 1,\n      limit = 20\n    } = param2Obj(config.url);\n    console.log('name:' + name, 'page:' + page, '分页大小limit:' + limit);\n    const mockList = List.filter(user => {\n      if (name && user.name.indexOf(name) === -1 && user.addr.indexOf(name) === -1) return false;\n      return true;\n    });\n    const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page - 1)); //待验证?\n    return {\n      code: 20000,\n      count: mockList.length,\n      list: pageList\n    };\n  },\n  // 添加用户\n  createUser: config => {\n    const {\n      name,\n      addr,\n      age,\n      birth,\n      sex\n    } = JSON.parse(config.body);\n    console.log(JSON.parse(config.body));\n    List.unshift({\n      id: Mock.Random.guid(),\n      name: name,\n      addr: addr,\n      age: age,\n      birth: birth,\n      sex: sex\n    });\n    return {\n      code: 20000,\n      data: {\n        message: '添加成功'\n      }\n    };\n  },\n  // 删除用户\n  deleteUser: config => {\n    const {\n      id\n    } = JSON.parse(config.body);\n    if (!id) {\n      return {\n        code: -999,\n        message: '参数不正确'\n      };\n    } else {\n      List = List.filter(u => u.id !== id);\n      return {\n        code: 20000,\n        message: '删除成功'\n      };\n    }\n  },\n  // 批量删除\n  batchremove: config => {\n    let {\n      ids\n    } = param2Obj(config.url);\n    ids = ids.split(',');\n    List = List.filter(u => !ids.includes(u.id));\n    return {\n      code: 20000,\n      data: {\n        message: '批量删除成功'\n      }\n    };\n  },\n  // 修改用户\n  updateUser: config => {\n    const {\n      id,\n      name,\n      addr,\n      age,\n      birth,\n      sex\n    } = JSON.parse(config.body);\n    const sex_num = parseInt(sex);\n    List.some(u => {\n      if (u.id === id) {\n        u.name = name;\n        u.addr = addr;\n        u.age = age;\n        u.birth = birth;\n        u.sex = sex_num;\n        return true;\n      }\n    });\n    return {\n      code: 20000,\n      data: {\n        message: '编辑成功'\n      }\n    };\n  }\n};","map":{"version":3,"names":["Mock","mock","param2Obj","url","search","split","JSON","parse","decodeURIComponent","replace","List","count","i","push","id","Random","guid","name","cname","addr","birth","date","sex","integer","getUserList","config","console","log","page","limit","mockList","filter","user","indexOf","pageList","item","index","code","length","list","createUser","age","body","unshift","data","message","deleteUser","u","batchremove","ids","includes","updateUser","sex_num","parseInt","some"],"sources":["/Users/jiong/Downloads/my-app/src/api/mockServeData/user.js"],"sourcesContent":["import Mock, { mock } from 'mockjs'\n\n// get 请求从config.url获取参数,post从config.body中获取参数\nfunction param2Obj (url) {\n    const search = url.split('?')[1]\n    if(!search) {\n        return {}\n    }\n    return JSON.parse(\n        '{\"' +\n        decodeURIComponent(search)\n        .replace(/\"/g,'\\\\\"')\n        .replace(/&/g,'\",\"')\n        .replace(/=/g,'\":\"') +\n        '\"}'\n    )\n}\n\nlet List = []\nconst count = 200\n\nfor(let i = 0; i < count; i++) {\n    List.push(\n        Mock.mock({\n            id: Mock.Random.guid(),\n            name: Mock.Random.cname(),\n            addr: Mock.mock('@county(true)'),\n            'age|18-60': 1,\n            birth: Mock.Random.date(),\n            sex: Mock.Random.integer(0, 1)\n        })\n    )\n}\n\nexport default {\n    getUserList: config => {\n        console.log(config, 'config');\n        const { name, page = 1, limit = 20 } = param2Obj(config.url) \n        console.log('name:' + name, 'page:' + page, '分页大小limit:' + limit)\n        const mockList = List.filter(user => {\n            if (name && user.name.indexOf(name) === -1 && user.addr.indexOf(name) === -1) return false\n            return true\n        })\n        const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page-1)) //待验证?\n        return {\n            code: 20000,\n            count: mockList.length,\n            list: pageList\n        }\n    },\n    // 添加用户\n    createUser: config => {\n        const { name, addr, age, birth, sex } = JSON.parse(config.body)\n        console.log(JSON.parse(config.body))\n        List.unshift({\n            id: Mock.Random.guid(),\n            name: name,\n            addr: addr,\n            age: age,\n            birth: birth,\n            sex: sex\n        })\n        return {\n            code: 20000,\n            data: {\n                message: '添加成功'\n            }\n        }\n    },\n    // 删除用户\n    deleteUser: config => {\n        const { id } = JSON.parse(config.body)\n        if (!id) {\n            return {\n                code: -999,\n                message: '参数不正确'\n            }\n        }else {\n            List = List.filter(u => u.id !== id)\n            return {\n                code: 20000,\n                message: '删除成功'\n            }\n        }\n    },\n    // 批量删除\n    batchremove: config => {\n        let { ids } = param2Obj(config.url)\n        ids = ids.split(',')\n        List = List.filter(u => !ids.includes(u.id))\n        return {\n            code: 20000,\n            data: {\n                message: '批量删除成功'\n            }\n        }\n    },\n    // 修改用户\n    updateUser: config => {\n        const { id, name, addr, age, birth, sex} = JSON.parse(config.body)\n        const sex_num = parseInt(sex)\n        List.some(u => {\n            if (u.id === id) {\n                u.name = name\n                u.addr = addr\n                u.age = age\n                u.birth = birth\n                u.sex = sex_num\n                return true\n            }\n        })\n        return {\n            code: 20000,\n            data: {\n                message: '编辑成功'\n            }\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
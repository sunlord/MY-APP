{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction diff(oldArr, newArr, equals) {\n  if (!equals) {\n    equals = function (a, b) {\n      return a === b;\n    };\n  }\n  oldArr = oldArr.slice();\n  newArr = newArr.slice();\n  var newLen = newArr.length;\n  var oldLen = oldArr.length;\n  var editLength = 1;\n  var maxEditLength = newLen + oldLen;\n  var bestPath = [{\n    newPos: -1,\n    components: []\n  }];\n  var oldPos = extractCommon(bestPath[0], newArr, oldArr, 0, equals);\n  if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n    var indices = [];\n    for (var i = 0; i < newArr.length; i++) {\n      indices.push(i);\n    }\n    return [{\n      indices: indices,\n      count: newArr.length,\n      added: false,\n      removed: false\n    }];\n  }\n  function execEditLength() {\n    for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n      var basePath;\n      var addPath = bestPath[diagonalPath - 1];\n      var removePath = bestPath[diagonalPath + 1];\n      var oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n      if (addPath) {\n        bestPath[diagonalPath - 1] = undefined;\n      }\n      var canAdd = addPath && addPath.newPos + 1 < newLen;\n      var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n      if (!canAdd && !canRemove) {\n        bestPath[diagonalPath] = undefined;\n        continue;\n      }\n      if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n        basePath = clonePath(removePath);\n        pushComponent(basePath.components, false, true);\n      } else {\n        basePath = addPath;\n        basePath.newPos++;\n        pushComponent(basePath.components, true, false);\n      }\n      oldPos = extractCommon(basePath, newArr, oldArr, diagonalPath, equals);\n      if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        return buildValues(basePath.components);\n      } else {\n        bestPath[diagonalPath] = basePath;\n      }\n    }\n    editLength++;\n  }\n  while (editLength <= maxEditLength) {\n    var ret = execEditLength();\n    if (ret) {\n      return ret;\n    }\n  }\n}\nfunction extractCommon(basePath, newArr, oldArr, diagonalPath, equals) {\n  var newLen = newArr.length;\n  var oldLen = oldArr.length;\n  var newPos = basePath.newPos;\n  var oldPos = newPos - diagonalPath;\n  var commonCount = 0;\n  while (newPos + 1 < newLen && oldPos + 1 < oldLen && equals(newArr[newPos + 1], oldArr[oldPos + 1])) {\n    newPos++;\n    oldPos++;\n    commonCount++;\n  }\n  if (commonCount) {\n    basePath.components.push({\n      count: commonCount,\n      added: false,\n      removed: false,\n      indices: []\n    });\n  }\n  basePath.newPos = newPos;\n  return oldPos;\n}\nfunction pushComponent(components, added, removed) {\n  var last = components[components.length - 1];\n  if (last && last.added === added && last.removed === removed) {\n    components[components.length - 1] = {\n      count: last.count + 1,\n      added: added,\n      removed: removed,\n      indices: []\n    };\n  } else {\n    components.push({\n      count: 1,\n      added: added,\n      removed: removed,\n      indices: []\n    });\n  }\n}\nfunction buildValues(components) {\n  var componentPos = 0;\n  var componentLen = components.length;\n  var newPos = 0;\n  var oldPos = 0;\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n    if (!component.removed) {\n      var indices = [];\n      for (var i = newPos; i < newPos + component.count; i++) {\n        indices.push(i);\n      }\n      component.indices = indices;\n      newPos += component.count;\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      for (var i = oldPos; i < oldPos + component.count; i++) {\n        component.indices.push(i);\n      }\n      oldPos += component.count;\n    }\n  }\n  return components;\n}\nfunction clonePath(path) {\n  return {\n    newPos: path.newPos,\n    components: path.components.slice(0)\n  };\n}\nexport default function arrayDiff(oldArr, newArr, equal) {\n  return diff(oldArr, newArr, equal);\n}","map":{"version":3,"names":["diff","oldArr","newArr","equals","a","b","slice","newLen","length","oldLen","editLength","maxEditLength","bestPath","newPos","components","oldPos","extractCommon","indices","i","push","count","added","removed","execEditLength","diagonalPath","basePath","addPath","removePath","undefined","canAdd","canRemove","clonePath","pushComponent","buildValues","ret","commonCount","last","componentPos","componentLen","component","path","arrayDiff","equal"],"sources":["/Users/jiong/Downloads/my-app/node_modules/zrender/lib/core/arrayDiff.js"],"sourcesContent":["function diff(oldArr, newArr, equals) {\n    if (!equals) {\n        equals = function (a, b) {\n            return a === b;\n        };\n    }\n    oldArr = oldArr.slice();\n    newArr = newArr.slice();\n    var newLen = newArr.length;\n    var oldLen = oldArr.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n    var bestPath = [{ newPos: -1, components: [] }];\n    var oldPos = extractCommon(bestPath[0], newArr, oldArr, 0, equals);\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        var indices = [];\n        for (var i = 0; i < newArr.length; i++) {\n            indices.push(i);\n        }\n        return [{\n                indices: indices,\n                count: newArr.length,\n                added: false,\n                removed: false\n            }];\n    }\n    function execEditLength() {\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n            var basePath;\n            var addPath = bestPath[diagonalPath - 1];\n            var removePath = bestPath[diagonalPath + 1];\n            var oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n            if (addPath) {\n                bestPath[diagonalPath - 1] = undefined;\n            }\n            var canAdd = addPath && addPath.newPos + 1 < newLen;\n            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n            if (!canAdd && !canRemove) {\n                bestPath[diagonalPath] = undefined;\n                continue;\n            }\n            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n                basePath = clonePath(removePath);\n                pushComponent(basePath.components, false, true);\n            }\n            else {\n                basePath = addPath;\n                basePath.newPos++;\n                pushComponent(basePath.components, true, false);\n            }\n            oldPos = extractCommon(basePath, newArr, oldArr, diagonalPath, equals);\n            if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n                return buildValues(basePath.components);\n            }\n            else {\n                bestPath[diagonalPath] = basePath;\n            }\n        }\n        editLength++;\n    }\n    while (editLength <= maxEditLength) {\n        var ret = execEditLength();\n        if (ret) {\n            return ret;\n        }\n    }\n}\nfunction extractCommon(basePath, newArr, oldArr, diagonalPath, equals) {\n    var newLen = newArr.length;\n    var oldLen = oldArr.length;\n    var newPos = basePath.newPos;\n    var oldPos = newPos - diagonalPath;\n    var commonCount = 0;\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && equals(newArr[newPos + 1], oldArr[oldPos + 1])) {\n        newPos++;\n        oldPos++;\n        commonCount++;\n    }\n    if (commonCount) {\n        basePath.components.push({\n            count: commonCount,\n            added: false,\n            removed: false,\n            indices: []\n        });\n    }\n    basePath.newPos = newPos;\n    return oldPos;\n}\nfunction pushComponent(components, added, removed) {\n    var last = components[components.length - 1];\n    if (last && last.added === added && last.removed === removed) {\n        components[components.length - 1] = {\n            count: last.count + 1,\n            added: added,\n            removed: removed,\n            indices: []\n        };\n    }\n    else {\n        components.push({\n            count: 1,\n            added: added,\n            removed: removed,\n            indices: []\n        });\n    }\n}\nfunction buildValues(components) {\n    var componentPos = 0;\n    var componentLen = components.length;\n    var newPos = 0;\n    var oldPos = 0;\n    for (; componentPos < componentLen; componentPos++) {\n        var component = components[componentPos];\n        if (!component.removed) {\n            var indices = [];\n            for (var i = newPos; i < newPos + component.count; i++) {\n                indices.push(i);\n            }\n            component.indices = indices;\n            newPos += component.count;\n            if (!component.added) {\n                oldPos += component.count;\n            }\n        }\n        else {\n            for (var i = oldPos; i < oldPos + component.count; i++) {\n                component.indices.push(i);\n            }\n            oldPos += component.count;\n        }\n    }\n    return components;\n}\nfunction clonePath(path) {\n    return { newPos: path.newPos, components: path.components.slice(0) };\n}\nexport default function arrayDiff(oldArr, newArr, equal) {\n    return diff(oldArr, newArr, equal);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
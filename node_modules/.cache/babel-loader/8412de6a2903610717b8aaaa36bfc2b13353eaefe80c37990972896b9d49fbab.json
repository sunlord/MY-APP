{"ast":null,"code":"import { DEFAULT_COMMON_STYLE } from '../graphic/Displayable';\nimport PathProxy from '../core/PathProxy';\nimport { createOrUpdateImage, isImageReady } from '../graphic/helper/image';\nimport { getCanvasGradient, isClipPathChanged } from './helper';\nimport Path from '../graphic/Path';\nimport ZRImage from '../graphic/Image';\nimport TSpan from '../graphic/TSpan';\nimport { DEFAULT_FONT } from '../contain/text';\nimport { map } from '../core/util';\nimport { normalizeLineDash } from '../graphic/helper/dashStyle';\nimport IncrementalDisplayable from '../graphic/IncrementalDisplayable';\nimport { REDARAW_BIT, SHAPE_CHANGED_BIT } from '../graphic/constants';\nvar pathProxyForDraw = new PathProxy(true);\nfunction styleHasStroke(style) {\n  var stroke = style.stroke;\n  return !(stroke == null || stroke === 'none' || !(style.lineWidth > 0));\n}\nfunction styleHasFill(style) {\n  var fill = style.fill;\n  return fill != null && fill !== 'none';\n}\nfunction doFillPath(ctx, style) {\n  if (style.fillOpacity != null && style.fillOpacity !== 1) {\n    var originalGlobalAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = style.fillOpacity * style.opacity;\n    ctx.fill();\n    ctx.globalAlpha = originalGlobalAlpha;\n  } else {\n    ctx.fill();\n  }\n}\nfunction doStrokePath(ctx, style) {\n  if (style.strokeOpacity != null && style.strokeOpacity !== 1) {\n    var originalGlobalAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = style.strokeOpacity * style.opacity;\n    ctx.stroke();\n    ctx.globalAlpha = originalGlobalAlpha;\n  } else {\n    ctx.stroke();\n  }\n}\nexport function createCanvasPattern(ctx, pattern, el) {\n  var image = createOrUpdateImage(pattern.image, pattern.__image, el);\n  if (isImageReady(image)) {\n    var canvasPattern = ctx.createPattern(image, pattern.repeat || 'repeat');\n    if (typeof DOMMatrix === 'function' && canvasPattern.setTransform) {\n      var matrix = new DOMMatrix();\n      matrix.rotateSelf(0, 0, (pattern.rotation || 0) / Math.PI * 180);\n      matrix.scaleSelf(pattern.scaleX || 1, pattern.scaleY || 1);\n      matrix.translateSelf(pattern.x || 0, pattern.y || 0);\n      canvasPattern.setTransform(matrix);\n    }\n    return canvasPattern;\n  }\n}\nfunction brushPath(ctx, el, style, inBatch) {\n  var hasStroke = styleHasStroke(style);\n  var hasFill = styleHasFill(style);\n  var strokePercent = style.strokePercent;\n  var strokePart = strokePercent < 1;\n  var firstDraw = !el.path;\n  if ((!el.silent || strokePart) && firstDraw) {\n    el.createPathProxy();\n  }\n  var path = el.path || pathProxyForDraw;\n  if (!inBatch) {\n    var fill = style.fill;\n    var stroke = style.stroke;\n    var hasFillGradient = hasFill && !!fill.colorStops;\n    var hasStrokeGradient = hasStroke && !!stroke.colorStops;\n    var hasFillPattern = hasFill && !!fill.image;\n    var hasStrokePattern = hasStroke && !!stroke.image;\n    var fillGradient = void 0;\n    var strokeGradient = void 0;\n    var fillPattern = void 0;\n    var strokePattern = void 0;\n    var rect = void 0;\n    if (hasFillGradient || hasStrokeGradient) {\n      rect = el.getBoundingRect();\n    }\n    if (hasFillGradient) {\n      fillGradient = el.__dirty ? getCanvasGradient(ctx, fill, rect) : el.__canvasFillGradient;\n      el.__canvasFillGradient = fillGradient;\n    }\n    if (hasStrokeGradient) {\n      strokeGradient = el.__dirty ? getCanvasGradient(ctx, stroke, rect) : el.__canvasStrokeGradient;\n      el.__canvasStrokeGradient = strokeGradient;\n    }\n    if (hasFillPattern) {\n      fillPattern = el.__dirty || !el.__canvasFillPattern ? createCanvasPattern(ctx, fill, el) : el.__canvasFillPattern;\n      el.__canvasFillPattern = fillPattern;\n    }\n    if (hasStrokePattern) {\n      strokePattern = el.__dirty || !el.__canvasStrokePattern ? createCanvasPattern(ctx, stroke, el) : el.__canvasStrokePattern;\n      el.__canvasStrokePattern = fillPattern;\n    }\n    if (hasFillGradient) {\n      ctx.fillStyle = fillGradient;\n    } else if (hasFillPattern) {\n      if (fillPattern) {\n        ctx.fillStyle = fillPattern;\n      } else {\n        hasFill = false;\n      }\n    }\n    if (hasStrokeGradient) {\n      ctx.strokeStyle = strokeGradient;\n    } else if (hasStrokePattern) {\n      if (strokePattern) {\n        ctx.strokeStyle = strokePattern;\n      } else {\n        hasStroke = false;\n      }\n    }\n  }\n  var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n  var lineDashOffset = style.lineDashOffset;\n  var ctxLineDash = !!ctx.setLineDash;\n  var scale = el.getGlobalScale();\n  path.setScale(scale[0], scale[1], el.segmentIgnoreThreshold);\n  if (lineDash) {\n    var lineScale_1 = style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1;\n    if (lineScale_1 && lineScale_1 !== 1) {\n      lineDash = map(lineDash, function (rawVal) {\n        return rawVal / lineScale_1;\n      });\n      lineDashOffset /= lineScale_1;\n    }\n  }\n  var needsRebuild = true;\n  if (firstDraw || el.__dirty & SHAPE_CHANGED_BIT || lineDash && !ctxLineDash && hasStroke) {\n    path.setDPR(ctx.dpr);\n    if (strokePart) {\n      path.setContext(null);\n    } else {\n      path.setContext(ctx);\n      needsRebuild = false;\n    }\n    path.reset();\n    if (lineDash && !ctxLineDash) {\n      path.setLineDash(lineDash);\n      path.setLineDashOffset(lineDashOffset);\n    }\n    el.buildPath(path, el.shape, inBatch);\n    path.toStatic();\n    el.pathUpdated();\n  }\n  if (needsRebuild) {\n    path.rebuildPath(ctx, strokePart ? strokePercent : 1);\n  }\n  if (lineDash && ctxLineDash) {\n    ctx.setLineDash(lineDash);\n    ctx.lineDashOffset = lineDashOffset;\n  }\n  if (!inBatch) {\n    if (style.strokeFirst) {\n      if (hasStroke) {\n        doStrokePath(ctx, style);\n      }\n      if (hasFill) {\n        doFillPath(ctx, style);\n      }\n    } else {\n      if (hasFill) {\n        doFillPath(ctx, style);\n      }\n      if (hasStroke) {\n        doStrokePath(ctx, style);\n      }\n    }\n  }\n  if (lineDash && ctxLineDash) {\n    ctx.setLineDash([]);\n  }\n}\nfunction brushImage(ctx, el, style) {\n  var image = el.__image = createOrUpdateImage(style.image, el.__image, el, el.onload);\n  if (!image || !isImageReady(image)) {\n    return;\n  }\n  var x = style.x || 0;\n  var y = style.y || 0;\n  var width = el.getWidth();\n  var height = el.getHeight();\n  var aspect = image.width / image.height;\n  if (width == null && height != null) {\n    width = height * aspect;\n  } else if (height == null && width != null) {\n    height = width / aspect;\n  } else if (width == null && height == null) {\n    width = image.width;\n    height = image.height;\n  }\n  if (style.sWidth && style.sHeight) {\n    var sx = style.sx || 0;\n    var sy = style.sy || 0;\n    ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);\n  } else if (style.sx && style.sy) {\n    var sx = style.sx;\n    var sy = style.sy;\n    var sWidth = width - sx;\n    var sHeight = height - sy;\n    ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);\n  } else {\n    ctx.drawImage(image, x, y, width, height);\n  }\n}\nfunction brushText(ctx, el, style) {\n  var text = style.text;\n  text != null && (text += '');\n  if (text) {\n    ctx.font = style.font || DEFAULT_FONT;\n    ctx.textAlign = style.textAlign;\n    ctx.textBaseline = style.textBaseline;\n    var hasLineDash = void 0;\n    if (ctx.setLineDash) {\n      var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n      var lineDashOffset = style.lineDashOffset;\n      if (lineDash) {\n        var lineScale_2 = style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1;\n        if (lineScale_2 && lineScale_2 !== 1) {\n          lineDash = map(lineDash, function (rawVal) {\n            return rawVal / lineScale_2;\n          });\n          lineDashOffset /= lineScale_2;\n        }\n        ctx.setLineDash(lineDash);\n        ctx.lineDashOffset = lineDashOffset;\n        hasLineDash = true;\n      }\n    }\n    if (style.strokeFirst) {\n      if (styleHasStroke(style)) {\n        ctx.strokeText(text, style.x, style.y);\n      }\n      if (styleHasFill(style)) {\n        ctx.fillText(text, style.x, style.y);\n      }\n    } else {\n      if (styleHasFill(style)) {\n        ctx.fillText(text, style.x, style.y);\n      }\n      if (styleHasStroke(style)) {\n        ctx.strokeText(text, style.x, style.y);\n      }\n    }\n    if (hasLineDash) {\n      ctx.setLineDash([]);\n    }\n  }\n}\nvar SHADOW_NUMBER_PROPS = ['shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\nvar STROKE_PROPS = [['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]];\nfunction bindCommonProps(ctx, style, prevStyle, forceSetAll, scope) {\n  var styleChanged = false;\n  if (!forceSetAll) {\n    prevStyle = prevStyle || {};\n    if (style === prevStyle) {\n      return false;\n    }\n  }\n  if (forceSetAll || style.opacity !== prevStyle.opacity) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n    var opacity = Math.max(Math.min(style.opacity, 1), 0);\n    ctx.globalAlpha = isNaN(opacity) ? DEFAULT_COMMON_STYLE.opacity : opacity;\n  }\n  if (forceSetAll || style.blend !== prevStyle.blend) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n    ctx.globalCompositeOperation = style.blend || DEFAULT_COMMON_STYLE.blend;\n  }\n  for (var i = 0; i < SHADOW_NUMBER_PROPS.length; i++) {\n    var propName = SHADOW_NUMBER_PROPS[i];\n    if (forceSetAll || style[propName] !== prevStyle[propName]) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n      ctx[propName] = ctx.dpr * (style[propName] || 0);\n    }\n  }\n  if (forceSetAll || style.shadowColor !== prevStyle.shadowColor) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n    ctx.shadowColor = style.shadowColor || DEFAULT_COMMON_STYLE.shadowColor;\n  }\n  return styleChanged;\n}\nfunction bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {\n  var style = getStyle(el, scope.inHover);\n  var prevStyle = forceSetAll ? null : prevEl && getStyle(prevEl, scope.inHover) || {};\n  if (style === prevStyle) {\n    return false;\n  }\n  var styleChanged = bindCommonProps(ctx, style, prevStyle, forceSetAll, scope);\n  if (forceSetAll || style.fill !== prevStyle.fill) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n    ctx.fillStyle = style.fill;\n  }\n  if (forceSetAll || style.stroke !== prevStyle.stroke) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n    ctx.strokeStyle = style.stroke;\n  }\n  if (forceSetAll || style.opacity !== prevStyle.opacity) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n    ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n  }\n  if (el.hasStroke()) {\n    var lineWidth = style.lineWidth;\n    var newLineWidth = lineWidth / (style.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);\n    if (ctx.lineWidth !== newLineWidth) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n      ctx.lineWidth = newLineWidth;\n    }\n  }\n  for (var i = 0; i < STROKE_PROPS.length; i++) {\n    var prop = STROKE_PROPS[i];\n    var propName = prop[0];\n    if (forceSetAll || style[propName] !== prevStyle[propName]) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n      ctx[propName] = style[propName] || prop[1];\n    }\n  }\n  return styleChanged;\n}\nfunction bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {\n  return bindCommonProps(ctx, getStyle(el, scope.inHover), prevEl && getStyle(prevEl, scope.inHover), forceSetAll, scope);\n}\nfunction setContextTransform(ctx, el) {\n  var m = el.transform;\n  var dpr = ctx.dpr || 1;\n  if (m) {\n    ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n  } else {\n    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n  }\n}\nfunction updateClipStatus(clipPaths, ctx, scope) {\n  var allClipped = false;\n  for (var i = 0; i < clipPaths.length; i++) {\n    var clipPath = clipPaths[i];\n    allClipped = allClipped || clipPath.isZeroArea();\n    setContextTransform(ctx, clipPath);\n    ctx.beginPath();\n    clipPath.buildPath(ctx, clipPath.shape);\n    ctx.clip();\n  }\n  scope.allClipped = allClipped;\n}\nfunction isTransformChanged(m0, m1) {\n  if (m0 && m1) {\n    return m0[0] !== m1[0] || m0[1] !== m1[1] || m0[2] !== m1[2] || m0[3] !== m1[3] || m0[4] !== m1[4] || m0[5] !== m1[5];\n  } else if (!m0 && !m1) {\n    return false;\n  }\n  return true;\n}\nvar DRAW_TYPE_PATH = 1;\nvar DRAW_TYPE_IMAGE = 2;\nvar DRAW_TYPE_TEXT = 3;\nvar DRAW_TYPE_INCREMENTAL = 4;\nfunction canPathBatch(style) {\n  var hasFill = styleHasFill(style);\n  var hasStroke = styleHasStroke(style);\n  return !(style.lineDash || !(+hasFill ^ +hasStroke) || hasFill && typeof style.fill !== 'string' || hasStroke && typeof style.stroke !== 'string' || style.strokePercent < 1 || style.strokeOpacity < 1 || style.fillOpacity < 1);\n}\nfunction flushPathDrawn(ctx, scope) {\n  scope.batchFill && ctx.fill();\n  scope.batchStroke && ctx.stroke();\n  scope.batchFill = '';\n  scope.batchStroke = '';\n}\nfunction getStyle(el, inHover) {\n  return inHover ? el.__hoverStyle || el.style : el.style;\n}\nexport function brushSingle(ctx, el) {\n  brush(ctx, el, {\n    inHover: false,\n    viewWidth: 0,\n    viewHeight: 0\n  }, true);\n}\nexport function brush(ctx, el, scope, isLast) {\n  var m = el.transform;\n  if (!el.shouldBePainted(scope.viewWidth, scope.viewHeight, false, false)) {\n    el.__dirty &= ~REDARAW_BIT;\n    el.__isRendered = false;\n    return;\n  }\n  var clipPaths = el.__clipPaths;\n  var prevElClipPaths = scope.prevElClipPaths;\n  var forceSetTransform = false;\n  var forceSetStyle = false;\n  if (!prevElClipPaths || isClipPathChanged(clipPaths, prevElClipPaths)) {\n    if (prevElClipPaths && prevElClipPaths.length) {\n      flushPathDrawn(ctx, scope);\n      ctx.restore();\n      forceSetStyle = forceSetTransform = true;\n      scope.prevElClipPaths = null;\n      scope.allClipped = false;\n      scope.prevEl = null;\n    }\n    if (clipPaths && clipPaths.length) {\n      flushPathDrawn(ctx, scope);\n      ctx.save();\n      updateClipStatus(clipPaths, ctx, scope);\n      forceSetTransform = true;\n    }\n    scope.prevElClipPaths = clipPaths;\n  }\n  if (scope.allClipped) {\n    el.__isRendered = false;\n    return;\n  }\n  el.beforeBrush && el.beforeBrush();\n  el.innerBeforeBrush();\n  var prevEl = scope.prevEl;\n  if (!prevEl) {\n    forceSetStyle = forceSetTransform = true;\n  }\n  var canBatchPath = el instanceof Path && el.autoBatch && canPathBatch(el.style);\n  if (forceSetTransform || isTransformChanged(m, prevEl.transform)) {\n    flushPathDrawn(ctx, scope);\n    setContextTransform(ctx, el);\n  } else if (!canBatchPath) {\n    flushPathDrawn(ctx, scope);\n  }\n  var style = getStyle(el, scope.inHover);\n  if (el instanceof Path) {\n    if (scope.lastDrawType !== DRAW_TYPE_PATH) {\n      forceSetStyle = true;\n      scope.lastDrawType = DRAW_TYPE_PATH;\n    }\n    bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n    if (!canBatchPath || !scope.batchFill && !scope.batchStroke) {\n      ctx.beginPath();\n    }\n    brushPath(ctx, el, style, canBatchPath);\n    if (canBatchPath) {\n      scope.batchFill = style.fill || '';\n      scope.batchStroke = style.stroke || '';\n    }\n  } else {\n    if (el instanceof TSpan) {\n      if (scope.lastDrawType !== DRAW_TYPE_TEXT) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_TEXT;\n      }\n      bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n      brushText(ctx, el, style);\n    } else if (el instanceof ZRImage) {\n      if (scope.lastDrawType !== DRAW_TYPE_IMAGE) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_IMAGE;\n      }\n      bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);\n      brushImage(ctx, el, style);\n    } else if (el instanceof IncrementalDisplayable) {\n      if (scope.lastDrawType !== DRAW_TYPE_INCREMENTAL) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_INCREMENTAL;\n      }\n      brushIncremental(ctx, el, scope);\n    }\n  }\n  if (canBatchPath && isLast) {\n    flushPathDrawn(ctx, scope);\n  }\n  el.innerAfterBrush();\n  el.afterBrush && el.afterBrush();\n  scope.prevEl = el;\n  el.__dirty = 0;\n  el.__isRendered = true;\n}\nfunction brushIncremental(ctx, el, scope) {\n  var displayables = el.getDisplayables();\n  var temporalDisplayables = el.getTemporalDisplayables();\n  ctx.save();\n  var innerScope = {\n    prevElClipPaths: null,\n    prevEl: null,\n    allClipped: false,\n    viewWidth: scope.viewWidth,\n    viewHeight: scope.viewHeight,\n    inHover: scope.inHover\n  };\n  var i;\n  var len;\n  for (i = el.getCursor(), len = displayables.length; i < len; i++) {\n    var displayable = displayables[i];\n    displayable.beforeBrush && displayable.beforeBrush();\n    displayable.innerBeforeBrush();\n    brush(ctx, displayable, innerScope, i === len - 1);\n    displayable.innerAfterBrush();\n    displayable.afterBrush && displayable.afterBrush();\n    innerScope.prevEl = displayable;\n  }\n  for (var i_1 = 0, len_1 = temporalDisplayables.length; i_1 < len_1; i_1++) {\n    var displayable = temporalDisplayables[i_1];\n    displayable.beforeBrush && displayable.beforeBrush();\n    displayable.innerBeforeBrush();\n    brush(ctx, displayable, innerScope, i_1 === len_1 - 1);\n    displayable.innerAfterBrush();\n    displayable.afterBrush && displayable.afterBrush();\n    innerScope.prevEl = displayable;\n  }\n  el.clearTemporalDisplayables();\n  el.notClear = true;\n  ctx.restore();\n}","map":{"version":3,"names":["DEFAULT_COMMON_STYLE","PathProxy","createOrUpdateImage","isImageReady","getCanvasGradient","isClipPathChanged","Path","ZRImage","TSpan","DEFAULT_FONT","map","normalizeLineDash","IncrementalDisplayable","REDARAW_BIT","SHAPE_CHANGED_BIT","pathProxyForDraw","styleHasStroke","style","stroke","lineWidth","styleHasFill","fill","doFillPath","ctx","fillOpacity","originalGlobalAlpha","globalAlpha","opacity","doStrokePath","strokeOpacity","createCanvasPattern","pattern","el","image","__image","canvasPattern","createPattern","repeat","DOMMatrix","setTransform","matrix","rotateSelf","rotation","Math","PI","scaleSelf","scaleX","scaleY","translateSelf","x","y","brushPath","inBatch","hasStroke","hasFill","strokePercent","strokePart","firstDraw","path","silent","createPathProxy","hasFillGradient","colorStops","hasStrokeGradient","hasFillPattern","hasStrokePattern","fillGradient","strokeGradient","fillPattern","strokePattern","rect","getBoundingRect","__dirty","__canvasFillGradient","__canvasStrokeGradient","__canvasFillPattern","__canvasStrokePattern","fillStyle","strokeStyle","lineDash","lineDashOffset","ctxLineDash","setLineDash","scale","getGlobalScale","setScale","segmentIgnoreThreshold","lineScale_1","strokeNoScale","getLineScale","rawVal","needsRebuild","setDPR","dpr","setContext","reset","setLineDashOffset","buildPath","shape","toStatic","pathUpdated","rebuildPath","strokeFirst","brushImage","onload","width","getWidth","height","getHeight","aspect","sWidth","sHeight","sx","sy","drawImage","brushText","text","font","textAlign","textBaseline","hasLineDash","lineScale_2","strokeText","fillText","SHADOW_NUMBER_PROPS","STROKE_PROPS","bindCommonProps","prevStyle","forceSetAll","scope","styleChanged","flushPathDrawn","max","min","isNaN","blend","globalCompositeOperation","i","length","propName","shadowColor","bindPathAndTextCommonStyle","prevEl","getStyle","inHover","newLineWidth","prop","bindImageStyle","setContextTransform","m","transform","updateClipStatus","clipPaths","allClipped","clipPath","isZeroArea","beginPath","clip","isTransformChanged","m0","m1","DRAW_TYPE_PATH","DRAW_TYPE_IMAGE","DRAW_TYPE_TEXT","DRAW_TYPE_INCREMENTAL","canPathBatch","batchFill","batchStroke","__hoverStyle","brushSingle","brush","viewWidth","viewHeight","isLast","shouldBePainted","__isRendered","__clipPaths","prevElClipPaths","forceSetTransform","forceSetStyle","restore","save","beforeBrush","innerBeforeBrush","canBatchPath","autoBatch","lastDrawType","brushIncremental","innerAfterBrush","afterBrush","displayables","getDisplayables","temporalDisplayables","getTemporalDisplayables","innerScope","len","getCursor","displayable","i_1","len_1","clearTemporalDisplayables","notClear"],"sources":["/Users/jiong/Downloads/my-app/node_modules/zrender/lib/canvas/graphic.js"],"sourcesContent":["import { DEFAULT_COMMON_STYLE } from '../graphic/Displayable';\nimport PathProxy from '../core/PathProxy';\nimport { createOrUpdateImage, isImageReady } from '../graphic/helper/image';\nimport { getCanvasGradient, isClipPathChanged } from './helper';\nimport Path from '../graphic/Path';\nimport ZRImage from '../graphic/Image';\nimport TSpan from '../graphic/TSpan';\nimport { DEFAULT_FONT } from '../contain/text';\nimport { map } from '../core/util';\nimport { normalizeLineDash } from '../graphic/helper/dashStyle';\nimport IncrementalDisplayable from '../graphic/IncrementalDisplayable';\nimport { REDARAW_BIT, SHAPE_CHANGED_BIT } from '../graphic/constants';\nvar pathProxyForDraw = new PathProxy(true);\nfunction styleHasStroke(style) {\n    var stroke = style.stroke;\n    return !(stroke == null || stroke === 'none' || !(style.lineWidth > 0));\n}\nfunction styleHasFill(style) {\n    var fill = style.fill;\n    return fill != null && fill !== 'none';\n}\nfunction doFillPath(ctx, style) {\n    if (style.fillOpacity != null && style.fillOpacity !== 1) {\n        var originalGlobalAlpha = ctx.globalAlpha;\n        ctx.globalAlpha = style.fillOpacity * style.opacity;\n        ctx.fill();\n        ctx.globalAlpha = originalGlobalAlpha;\n    }\n    else {\n        ctx.fill();\n    }\n}\nfunction doStrokePath(ctx, style) {\n    if (style.strokeOpacity != null && style.strokeOpacity !== 1) {\n        var originalGlobalAlpha = ctx.globalAlpha;\n        ctx.globalAlpha = style.strokeOpacity * style.opacity;\n        ctx.stroke();\n        ctx.globalAlpha = originalGlobalAlpha;\n    }\n    else {\n        ctx.stroke();\n    }\n}\nexport function createCanvasPattern(ctx, pattern, el) {\n    var image = createOrUpdateImage(pattern.image, pattern.__image, el);\n    if (isImageReady(image)) {\n        var canvasPattern = ctx.createPattern(image, pattern.repeat || 'repeat');\n        if (typeof DOMMatrix === 'function'\n            && canvasPattern.setTransform) {\n            var matrix = new DOMMatrix();\n            matrix.rotateSelf(0, 0, (pattern.rotation || 0) / Math.PI * 180);\n            matrix.scaleSelf((pattern.scaleX || 1), (pattern.scaleY || 1));\n            matrix.translateSelf((pattern.x || 0), (pattern.y || 0));\n            canvasPattern.setTransform(matrix);\n        }\n        return canvasPattern;\n    }\n}\nfunction brushPath(ctx, el, style, inBatch) {\n    var hasStroke = styleHasStroke(style);\n    var hasFill = styleHasFill(style);\n    var strokePercent = style.strokePercent;\n    var strokePart = strokePercent < 1;\n    var firstDraw = !el.path;\n    if ((!el.silent || strokePart) && firstDraw) {\n        el.createPathProxy();\n    }\n    var path = el.path || pathProxyForDraw;\n    if (!inBatch) {\n        var fill = style.fill;\n        var stroke = style.stroke;\n        var hasFillGradient = hasFill && !!fill.colorStops;\n        var hasStrokeGradient = hasStroke && !!stroke.colorStops;\n        var hasFillPattern = hasFill && !!fill.image;\n        var hasStrokePattern = hasStroke && !!stroke.image;\n        var fillGradient = void 0;\n        var strokeGradient = void 0;\n        var fillPattern = void 0;\n        var strokePattern = void 0;\n        var rect = void 0;\n        if (hasFillGradient || hasStrokeGradient) {\n            rect = el.getBoundingRect();\n        }\n        if (hasFillGradient) {\n            fillGradient = el.__dirty\n                ? getCanvasGradient(ctx, fill, rect)\n                : el.__canvasFillGradient;\n            el.__canvasFillGradient = fillGradient;\n        }\n        if (hasStrokeGradient) {\n            strokeGradient = el.__dirty\n                ? getCanvasGradient(ctx, stroke, rect)\n                : el.__canvasStrokeGradient;\n            el.__canvasStrokeGradient = strokeGradient;\n        }\n        if (hasFillPattern) {\n            fillPattern = (el.__dirty || !el.__canvasFillPattern)\n                ? createCanvasPattern(ctx, fill, el)\n                : el.__canvasFillPattern;\n            el.__canvasFillPattern = fillPattern;\n        }\n        if (hasStrokePattern) {\n            strokePattern = (el.__dirty || !el.__canvasStrokePattern)\n                ? createCanvasPattern(ctx, stroke, el)\n                : el.__canvasStrokePattern;\n            el.__canvasStrokePattern = fillPattern;\n        }\n        if (hasFillGradient) {\n            ctx.fillStyle = fillGradient;\n        }\n        else if (hasFillPattern) {\n            if (fillPattern) {\n                ctx.fillStyle = fillPattern;\n            }\n            else {\n                hasFill = false;\n            }\n        }\n        if (hasStrokeGradient) {\n            ctx.strokeStyle = strokeGradient;\n        }\n        else if (hasStrokePattern) {\n            if (strokePattern) {\n                ctx.strokeStyle = strokePattern;\n            }\n            else {\n                hasStroke = false;\n            }\n        }\n    }\n    var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n    var lineDashOffset = style.lineDashOffset;\n    var ctxLineDash = !!ctx.setLineDash;\n    var scale = el.getGlobalScale();\n    path.setScale(scale[0], scale[1], el.segmentIgnoreThreshold);\n    if (lineDash) {\n        var lineScale_1 = (style.strokeNoScale && el.getLineScale) ? el.getLineScale() : 1;\n        if (lineScale_1 && lineScale_1 !== 1) {\n            lineDash = map(lineDash, function (rawVal) {\n                return rawVal / lineScale_1;\n            });\n            lineDashOffset /= lineScale_1;\n        }\n    }\n    var needsRebuild = true;\n    if (firstDraw || (el.__dirty & SHAPE_CHANGED_BIT)\n        || (lineDash && !ctxLineDash && hasStroke)) {\n        path.setDPR(ctx.dpr);\n        if (strokePart) {\n            path.setContext(null);\n        }\n        else {\n            path.setContext(ctx);\n            needsRebuild = false;\n        }\n        path.reset();\n        if (lineDash && !ctxLineDash) {\n            path.setLineDash(lineDash);\n            path.setLineDashOffset(lineDashOffset);\n        }\n        el.buildPath(path, el.shape, inBatch);\n        path.toStatic();\n        el.pathUpdated();\n    }\n    if (needsRebuild) {\n        path.rebuildPath(ctx, strokePart ? strokePercent : 1);\n    }\n    if (lineDash && ctxLineDash) {\n        ctx.setLineDash(lineDash);\n        ctx.lineDashOffset = lineDashOffset;\n    }\n    if (!inBatch) {\n        if (style.strokeFirst) {\n            if (hasStroke) {\n                doStrokePath(ctx, style);\n            }\n            if (hasFill) {\n                doFillPath(ctx, style);\n            }\n        }\n        else {\n            if (hasFill) {\n                doFillPath(ctx, style);\n            }\n            if (hasStroke) {\n                doStrokePath(ctx, style);\n            }\n        }\n    }\n    if (lineDash && ctxLineDash) {\n        ctx.setLineDash([]);\n    }\n}\nfunction brushImage(ctx, el, style) {\n    var image = el.__image = createOrUpdateImage(style.image, el.__image, el, el.onload);\n    if (!image || !isImageReady(image)) {\n        return;\n    }\n    var x = style.x || 0;\n    var y = style.y || 0;\n    var width = el.getWidth();\n    var height = el.getHeight();\n    var aspect = image.width / image.height;\n    if (width == null && height != null) {\n        width = height * aspect;\n    }\n    else if (height == null && width != null) {\n        height = width / aspect;\n    }\n    else if (width == null && height == null) {\n        width = image.width;\n        height = image.height;\n    }\n    if (style.sWidth && style.sHeight) {\n        var sx = style.sx || 0;\n        var sy = style.sy || 0;\n        ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);\n    }\n    else if (style.sx && style.sy) {\n        var sx = style.sx;\n        var sy = style.sy;\n        var sWidth = width - sx;\n        var sHeight = height - sy;\n        ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);\n    }\n    else {\n        ctx.drawImage(image, x, y, width, height);\n    }\n}\nfunction brushText(ctx, el, style) {\n    var text = style.text;\n    text != null && (text += '');\n    if (text) {\n        ctx.font = style.font || DEFAULT_FONT;\n        ctx.textAlign = style.textAlign;\n        ctx.textBaseline = style.textBaseline;\n        var hasLineDash = void 0;\n        if (ctx.setLineDash) {\n            var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n            var lineDashOffset = style.lineDashOffset;\n            if (lineDash) {\n                var lineScale_2 = (style.strokeNoScale && el.getLineScale) ? el.getLineScale() : 1;\n                if (lineScale_2 && lineScale_2 !== 1) {\n                    lineDash = map(lineDash, function (rawVal) {\n                        return rawVal / lineScale_2;\n                    });\n                    lineDashOffset /= lineScale_2;\n                }\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n                hasLineDash = true;\n            }\n        }\n        if (style.strokeFirst) {\n            if (styleHasStroke(style)) {\n                ctx.strokeText(text, style.x, style.y);\n            }\n            if (styleHasFill(style)) {\n                ctx.fillText(text, style.x, style.y);\n            }\n        }\n        else {\n            if (styleHasFill(style)) {\n                ctx.fillText(text, style.x, style.y);\n            }\n            if (styleHasStroke(style)) {\n                ctx.strokeText(text, style.x, style.y);\n            }\n        }\n        if (hasLineDash) {\n            ctx.setLineDash([]);\n        }\n    }\n}\nvar SHADOW_NUMBER_PROPS = ['shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\nvar STROKE_PROPS = [\n    ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n];\nfunction bindCommonProps(ctx, style, prevStyle, forceSetAll, scope) {\n    var styleChanged = false;\n    if (!forceSetAll) {\n        prevStyle = prevStyle || {};\n        if (style === prevStyle) {\n            return false;\n        }\n    }\n    if (forceSetAll || style.opacity !== prevStyle.opacity) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        var opacity = Math.max(Math.min(style.opacity, 1), 0);\n        ctx.globalAlpha = isNaN(opacity) ? DEFAULT_COMMON_STYLE.opacity : opacity;\n    }\n    if (forceSetAll || style.blend !== prevStyle.blend) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalCompositeOperation = style.blend || DEFAULT_COMMON_STYLE.blend;\n    }\n    for (var i = 0; i < SHADOW_NUMBER_PROPS.length; i++) {\n        var propName = SHADOW_NUMBER_PROPS[i];\n        if (forceSetAll || style[propName] !== prevStyle[propName]) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx[propName] = ctx.dpr * (style[propName] || 0);\n        }\n    }\n    if (forceSetAll || style.shadowColor !== prevStyle.shadowColor) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.shadowColor = style.shadowColor || DEFAULT_COMMON_STYLE.shadowColor;\n    }\n    return styleChanged;\n}\nfunction bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {\n    var style = getStyle(el, scope.inHover);\n    var prevStyle = forceSetAll\n        ? null\n        : (prevEl && getStyle(prevEl, scope.inHover) || {});\n    if (style === prevStyle) {\n        return false;\n    }\n    var styleChanged = bindCommonProps(ctx, style, prevStyle, forceSetAll, scope);\n    if (forceSetAll || style.fill !== prevStyle.fill) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.fillStyle = style.fill;\n    }\n    if (forceSetAll || style.stroke !== prevStyle.stroke) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.strokeStyle = style.stroke;\n    }\n    if (forceSetAll || style.opacity !== prevStyle.opacity) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n    }\n    if (el.hasStroke()) {\n        var lineWidth = style.lineWidth;\n        var newLineWidth = lineWidth / ((style.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1);\n        if (ctx.lineWidth !== newLineWidth) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx.lineWidth = newLineWidth;\n        }\n    }\n    for (var i = 0; i < STROKE_PROPS.length; i++) {\n        var prop = STROKE_PROPS[i];\n        var propName = prop[0];\n        if (forceSetAll || style[propName] !== prevStyle[propName]) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx[propName] = style[propName] || prop[1];\n        }\n    }\n    return styleChanged;\n}\nfunction bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {\n    return bindCommonProps(ctx, getStyle(el, scope.inHover), prevEl && getStyle(prevEl, scope.inHover), forceSetAll, scope);\n}\nfunction setContextTransform(ctx, el) {\n    var m = el.transform;\n    var dpr = ctx.dpr || 1;\n    if (m) {\n        ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n    }\n    else {\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    }\n}\nfunction updateClipStatus(clipPaths, ctx, scope) {\n    var allClipped = false;\n    for (var i = 0; i < clipPaths.length; i++) {\n        var clipPath = clipPaths[i];\n        allClipped = allClipped || clipPath.isZeroArea();\n        setContextTransform(ctx, clipPath);\n        ctx.beginPath();\n        clipPath.buildPath(ctx, clipPath.shape);\n        ctx.clip();\n    }\n    scope.allClipped = allClipped;\n}\nfunction isTransformChanged(m0, m1) {\n    if (m0 && m1) {\n        return m0[0] !== m1[0]\n            || m0[1] !== m1[1]\n            || m0[2] !== m1[2]\n            || m0[3] !== m1[3]\n            || m0[4] !== m1[4]\n            || m0[5] !== m1[5];\n    }\n    else if (!m0 && !m1) {\n        return false;\n    }\n    return true;\n}\nvar DRAW_TYPE_PATH = 1;\nvar DRAW_TYPE_IMAGE = 2;\nvar DRAW_TYPE_TEXT = 3;\nvar DRAW_TYPE_INCREMENTAL = 4;\nfunction canPathBatch(style) {\n    var hasFill = styleHasFill(style);\n    var hasStroke = styleHasStroke(style);\n    return !(style.lineDash\n        || !(+hasFill ^ +hasStroke)\n        || (hasFill && typeof style.fill !== 'string')\n        || (hasStroke && typeof style.stroke !== 'string')\n        || style.strokePercent < 1\n        || style.strokeOpacity < 1\n        || style.fillOpacity < 1);\n}\nfunction flushPathDrawn(ctx, scope) {\n    scope.batchFill && ctx.fill();\n    scope.batchStroke && ctx.stroke();\n    scope.batchFill = '';\n    scope.batchStroke = '';\n}\nfunction getStyle(el, inHover) {\n    return inHover ? (el.__hoverStyle || el.style) : el.style;\n}\nexport function brushSingle(ctx, el) {\n    brush(ctx, el, { inHover: false, viewWidth: 0, viewHeight: 0 }, true);\n}\nexport function brush(ctx, el, scope, isLast) {\n    var m = el.transform;\n    if (!el.shouldBePainted(scope.viewWidth, scope.viewHeight, false, false)) {\n        el.__dirty &= ~REDARAW_BIT;\n        el.__isRendered = false;\n        return;\n    }\n    var clipPaths = el.__clipPaths;\n    var prevElClipPaths = scope.prevElClipPaths;\n    var forceSetTransform = false;\n    var forceSetStyle = false;\n    if (!prevElClipPaths || isClipPathChanged(clipPaths, prevElClipPaths)) {\n        if (prevElClipPaths && prevElClipPaths.length) {\n            flushPathDrawn(ctx, scope);\n            ctx.restore();\n            forceSetStyle = forceSetTransform = true;\n            scope.prevElClipPaths = null;\n            scope.allClipped = false;\n            scope.prevEl = null;\n        }\n        if (clipPaths && clipPaths.length) {\n            flushPathDrawn(ctx, scope);\n            ctx.save();\n            updateClipStatus(clipPaths, ctx, scope);\n            forceSetTransform = true;\n        }\n        scope.prevElClipPaths = clipPaths;\n    }\n    if (scope.allClipped) {\n        el.__isRendered = false;\n        return;\n    }\n    el.beforeBrush && el.beforeBrush();\n    el.innerBeforeBrush();\n    var prevEl = scope.prevEl;\n    if (!prevEl) {\n        forceSetStyle = forceSetTransform = true;\n    }\n    var canBatchPath = el instanceof Path\n        && el.autoBatch\n        && canPathBatch(el.style);\n    if (forceSetTransform || isTransformChanged(m, prevEl.transform)) {\n        flushPathDrawn(ctx, scope);\n        setContextTransform(ctx, el);\n    }\n    else if (!canBatchPath) {\n        flushPathDrawn(ctx, scope);\n    }\n    var style = getStyle(el, scope.inHover);\n    if (el instanceof Path) {\n        if (scope.lastDrawType !== DRAW_TYPE_PATH) {\n            forceSetStyle = true;\n            scope.lastDrawType = DRAW_TYPE_PATH;\n        }\n        bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n        if (!canBatchPath || (!scope.batchFill && !scope.batchStroke)) {\n            ctx.beginPath();\n        }\n        brushPath(ctx, el, style, canBatchPath);\n        if (canBatchPath) {\n            scope.batchFill = style.fill || '';\n            scope.batchStroke = style.stroke || '';\n        }\n    }\n    else {\n        if (el instanceof TSpan) {\n            if (scope.lastDrawType !== DRAW_TYPE_TEXT) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_TEXT;\n            }\n            bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n            brushText(ctx, el, style);\n        }\n        else if (el instanceof ZRImage) {\n            if (scope.lastDrawType !== DRAW_TYPE_IMAGE) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_IMAGE;\n            }\n            bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);\n            brushImage(ctx, el, style);\n        }\n        else if (el instanceof IncrementalDisplayable) {\n            if (scope.lastDrawType !== DRAW_TYPE_INCREMENTAL) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_INCREMENTAL;\n            }\n            brushIncremental(ctx, el, scope);\n        }\n    }\n    if (canBatchPath && isLast) {\n        flushPathDrawn(ctx, scope);\n    }\n    el.innerAfterBrush();\n    el.afterBrush && el.afterBrush();\n    scope.prevEl = el;\n    el.__dirty = 0;\n    el.__isRendered = true;\n}\nfunction brushIncremental(ctx, el, scope) {\n    var displayables = el.getDisplayables();\n    var temporalDisplayables = el.getTemporalDisplayables();\n    ctx.save();\n    var innerScope = {\n        prevElClipPaths: null,\n        prevEl: null,\n        allClipped: false,\n        viewWidth: scope.viewWidth,\n        viewHeight: scope.viewHeight,\n        inHover: scope.inHover\n    };\n    var i;\n    var len;\n    for (i = el.getCursor(), len = displayables.length; i < len; i++) {\n        var displayable = displayables[i];\n        displayable.beforeBrush && displayable.beforeBrush();\n        displayable.innerBeforeBrush();\n        brush(ctx, displayable, innerScope, i === len - 1);\n        displayable.innerAfterBrush();\n        displayable.afterBrush && displayable.afterBrush();\n        innerScope.prevEl = displayable;\n    }\n    for (var i_1 = 0, len_1 = temporalDisplayables.length; i_1 < len_1; i_1++) {\n        var displayable = temporalDisplayables[i_1];\n        displayable.beforeBrush && displayable.beforeBrush();\n        displayable.innerBeforeBrush();\n        brush(ctx, displayable, innerScope, i_1 === len_1 - 1);\n        displayable.innerAfterBrush();\n        displayable.afterBrush && displayable.afterBrush();\n        innerScope.prevEl = displayable;\n    }\n    el.clearTemporalDisplayables();\n    el.notClear = true;\n    ctx.restore();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/* global Float64Array, Int32Array, Uint32Array, Uint16Array */\n\n/**\n * List for data storage\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport Model from '../model/Model';\nimport DataDiffer from './DataDiffer';\nimport { DefaultDataProvider } from './helper/dataProvider';\nimport { summarizeDimensions } from './helper/dimensionHelper';\nimport DataDimensionInfo from './DataDimensionInfo';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../util/types';\nimport { isDataItemOption, convertOptionIdName } from '../util/model';\nimport { getECData } from '../util/innerStore';\nimport { parseDataValue } from './helper/dataValueHelper';\nimport { isSourceInstance } from './Source';\nvar mathFloor = Math.floor;\nvar isObject = zrUtil.isObject;\nvar map = zrUtil.map;\nvar UNDEFINED = 'undefined';\nvar INDEX_NOT_FOUND = -1; // Use prefix to avoid index to be the same as otherIdList[idx],\n// which will cause weird udpate animation.\n\nvar ID_PREFIX = 'e\\0\\0';\nvar dataCtors = {\n  'float': typeof Float64Array === UNDEFINED ? Array : Float64Array,\n  'int': typeof Int32Array === UNDEFINED ? Array : Int32Array,\n  // Ordinal data type can be string or int\n  'ordinal': Array,\n  'number': Array,\n  'time': Array\n}; // Caution: MUST not use `new CtorUint32Array(arr, 0, len)`, because the Ctor of array is\n// different from the Ctor of typed array.\n\nvar CtorUint32Array = typeof Uint32Array === UNDEFINED ? Array : Uint32Array;\nvar CtorInt32Array = typeof Int32Array === UNDEFINED ? Array : Int32Array;\nvar CtorUint16Array = typeof Uint16Array === UNDEFINED ? Array : Uint16Array;\nvar TRANSFERABLE_PROPERTIES = ['hasItemOption', '_nameList', '_idList', '_invertedIndicesMap', '_rawData', '_dimValueGetter', '_count', '_rawCount', '_nameDimIdx', '_idDimIdx', '_nameRepeatCount'];\nvar CLONE_PROPERTIES = ['_extent', '_approximateExtent', '_rawExtent']; // -----------------------------\n// Internal method declarations:\n// -----------------------------\n\nvar defaultDimValueGetters;\nvar prepareInvertedIndex;\nvar getIndicesCtor;\nvar prepareStorage;\nvar getRawIndexWithoutIndices;\nvar getRawIndexWithIndices;\nvar getId;\nvar getIdNameFromStore;\nvar makeIdFromName;\nvar normalizeDimensions;\nvar validateDimensions;\nvar cloneListForMapAndSample;\nvar getInitialExtent;\nvar setItemDataAndSeriesIndex;\nvar transferProperties;\nvar List = /** @class */\nfunction () {\n  /**\n   * @param dimensions\n   *        For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].\n   *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n   */\n  function List(dimensions, hostModel) {\n    this.type = 'list';\n    this._count = 0;\n    this._rawCount = 0;\n    this._storage = {}; // We have an extra array store here. It's faster to be acessed than KV structured `_storage`.\n    // We profile the code `storage[dim]` and it seems to be KeyedLoadIC_Megamorphic instead of fast property access.\n    // Not sure why this happens. But using an extra array seems leads to faster `initData`\n    // See https://github.com/apache/incubator-echarts/pull/13314 for more explanation.\n\n    this._storageArr = [];\n    this._nameList = [];\n    this._idList = []; // Models of data option is stored sparse for optimizing memory cost\n    // Never used yet (not used yet).\n    // private _optionModels: Model[] = [];\n    // Global visual properties after visual coding\n\n    this._visual = {}; // Globel layout properties.\n\n    this._layout = {}; // Item visual properties after visual coding\n\n    this._itemVisuals = []; // Item layout properties after layout\n\n    this._itemLayouts = []; // Graphic elemnents\n\n    this._graphicEls = []; // Raw extent will not be cloned, but only transfered.\n    // It will not be calculated util needed.\n\n    this._rawExtent = {};\n    this._extent = {}; // key: dim, value: extent\n\n    this._approximateExtent = {};\n    this._calculationInfo = {}; // Having detected that there is data item is non primitive type\n    // (in type `OptionDataItemObject`).\n    // Like `data: [ { value: xx, itemStyle: {...} }, ...]`\n    // At present it only happen in `SOURCE_FORMAT_ORIGINAL`.\n\n    this.hasItemOption = true; // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n\n    this.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'lttbDownSample', 'map']; // Methods that change indices of this list should be listed here.\n\n    this.CHANGABLE_METHODS = ['filterSelf', 'selectRange'];\n    this.DOWNSAMPLE_METHODS = ['downSample', 'lttbDownSample'];\n    /**\n     * Get raw data index.\n     * Do not initialize.\n     * Default `getRawIndex`. And it can be changed.\n     */\n\n    this.getRawIndex = getRawIndexWithoutIndices;\n    dimensions = dimensions || ['x', 'y'];\n    var dimensionInfos = {};\n    var dimensionNames = [];\n    var invertedIndicesMap = {};\n    for (var i = 0; i < dimensions.length; i++) {\n      // Use the original dimensions[i], where other flag props may exists.\n      var dimInfoInput = dimensions[i];\n      var dimensionInfo = zrUtil.isString(dimInfoInput) ? new DataDimensionInfo({\n        name: dimInfoInput\n      }) : !(dimInfoInput instanceof DataDimensionInfo) ? new DataDimensionInfo(dimInfoInput) : dimInfoInput;\n      var dimensionName = dimensionInfo.name;\n      dimensionInfo.type = dimensionInfo.type || 'float';\n      if (!dimensionInfo.coordDim) {\n        dimensionInfo.coordDim = dimensionName;\n        dimensionInfo.coordDimIndex = 0;\n      }\n      var otherDims = dimensionInfo.otherDims = dimensionInfo.otherDims || {};\n      dimensionNames.push(dimensionName);\n      dimensionInfos[dimensionName] = dimensionInfo;\n      dimensionInfo.index = i;\n      if (dimensionInfo.createInvertedIndices) {\n        invertedIndicesMap[dimensionName] = [];\n      }\n      if (otherDims.itemName === 0) {\n        this._nameDimIdx = i;\n        this._nameOrdinalMeta = dimensionInfo.ordinalMeta;\n      }\n      if (otherDims.itemId === 0) {\n        this._idDimIdx = i;\n        this._idOrdinalMeta = dimensionInfo.ordinalMeta;\n      }\n    }\n    this.dimensions = dimensionNames;\n    this._dimensionInfos = dimensionInfos;\n    this.hostModel = hostModel; // Cache summary info for fast visit. See \"dimensionHelper\".\n\n    this._dimensionsSummary = summarizeDimensions(this);\n    this._invertedIndicesMap = invertedIndicesMap;\n    this.userOutput = this._dimensionsSummary.userOutput;\n  }\n  /**\n   * The meanings of the input parameter `dim`:\n   *\n   * + If dim is a number (e.g., `1`), it means the index of the dimension.\n   *   For example, `getDimension(0)` will return 'x' or 'lng' or 'radius'.\n   * + If dim is a number-like string (e.g., `\"1\"`):\n   *     + If there is the same concrete dim name defined in `this.dimensions`, it means that concrete name.\n   *     + If not, it will be converted to a number, which means the index of the dimension.\n   *        (why? because of the backward compatbility. We have been tolerating number-like string in\n   *        dimension setting, although now it seems that it is not a good idea.)\n   *     For example, `visualMap[i].dimension: \"1\"` is the same meaning as `visualMap[i].dimension: 1`,\n   *     if no dimension name is defined as `\"1\"`.\n   * + If dim is a not-number-like string, it means the concrete dim name.\n   *   For example, it can be be default name `\"x\"`, `\"y\"`, `\"z\"`, `\"lng\"`, `\"lat\"`, `\"angle\"`, `\"radius\"`,\n   *   or customized in `dimensions` property of option like `\"age\"`.\n   *\n   * Get dimension name\n   * @param dim See above.\n   * @return Concrete dim name.\n   */\n\n  List.prototype.getDimension = function (dim) {\n    if (typeof dim === 'number' // If being a number-like string but not being defined a dimension name.\n    || !isNaN(dim) && !this._dimensionInfos.hasOwnProperty(dim)) {\n      dim = this.dimensions[dim];\n    }\n    return dim;\n  };\n  /**\n   * Get type and calculation info of particular dimension\n   * @param dim\n   *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n   *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n   */\n\n  List.prototype.getDimensionInfo = function (dim) {\n    // Do not clone, because there may be categories in dimInfo.\n    return this._dimensionInfos[this.getDimension(dim)];\n  };\n  /**\n   * concrete dimension name list on coord.\n   */\n\n  List.prototype.getDimensionsOnCoord = function () {\n    return this._dimensionsSummary.dataDimsOnCoord.slice();\n  };\n  List.prototype.mapDimension = function (coordDim, idx) {\n    var dimensionsSummary = this._dimensionsSummary;\n    if (idx == null) {\n      return dimensionsSummary.encodeFirstDimNotExtra[coordDim];\n    }\n    var dims = dimensionsSummary.encode[coordDim];\n    return dims ? dims[idx] : null;\n  };\n  List.prototype.mapDimensionsAll = function (coordDim) {\n    var dimensionsSummary = this._dimensionsSummary;\n    var dims = dimensionsSummary.encode[coordDim];\n    return (dims || []).slice();\n  };\n  /**\n   * Initialize from data\n   * @param data source or data or data provider.\n   * @param nameList The name of a datum is used on data diff and\n   *        default label/tooltip.\n   *        A name can be specified in encode.itemName,\n   *        or dataItem.name (only for series option data),\n   *        or provided in nameList from outside.\n   */\n\n  List.prototype.initData = function (data, nameList, dimValueGetter) {\n    var notProvider = isSourceInstance(data) || zrUtil.isArrayLike(data);\n    var provider = notProvider ? new DefaultDataProvider(data, this.dimensions.length) : data;\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(notProvider || zrUtil.isFunction(provider.getItem) && zrUtil.isFunction(provider.count), 'Inavlid data provider.');\n    }\n    this._rawData = provider;\n    var sourceFormat = provider.getSource().sourceFormat; // Clear\n\n    this._storage = {};\n    this._indices = null;\n    this._dontMakeIdFromName = this._idDimIdx != null || sourceFormat === SOURCE_FORMAT_TYPED_ARRAY // Cosndier performance.\n    || !!provider.fillStorage;\n    this._nameList = (nameList || []).slice();\n    this._idList = [];\n    this._nameRepeatCount = {};\n    if (!dimValueGetter) {\n      this.hasItemOption = false;\n    }\n    this.defaultDimValueGetter = defaultDimValueGetters[sourceFormat]; // Default dim value getter\n\n    this._dimValueGetter = dimValueGetter = dimValueGetter || this.defaultDimValueGetter;\n    this._dimValueGetterArrayRows = defaultDimValueGetters.arrayRows; // Reset raw extent.\n\n    this._rawExtent = {};\n    this._initDataFromProvider(0, provider.count()); // If data has no item option.\n\n    if (provider.pure) {\n      this.hasItemOption = false;\n    }\n  };\n  List.prototype.getProvider = function () {\n    return this._rawData;\n  };\n  /**\n   * Caution: Can be only called on raw data (before `this._indices` created).\n   */\n\n  List.prototype.appendData = function (data) {\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(!this._indices, 'appendData can only be called on raw data.');\n    }\n    var rawData = this._rawData;\n    var start = this.count();\n    rawData.appendData(data);\n    var end = rawData.count();\n    if (!rawData.persistent) {\n      end += start;\n    }\n    this._initDataFromProvider(start, end, true);\n  };\n  /**\n   * Caution: Can be only called on raw data (before `this._indices` created).\n   * This method does not modify `rawData` (`dataProvider`), but only\n   * add values to storage.\n   *\n   * The final count will be increased by `Math.max(values.length, names.length)`.\n   *\n   * @param values That is the SourceType: 'arrayRows', like\n   *        [\n   *            [12, 33, 44],\n   *            [NaN, 43, 1],\n   *            ['-', 'asdf', 0]\n   *        ]\n   *        Each item is exaclty cooresponding to a dimension.\n   */\n\n  List.prototype.appendValues = function (values, names) {\n    var storage = this._storage;\n    var dimensions = this.dimensions;\n    var dimLen = dimensions.length;\n    var rawExtent = this._rawExtent;\n    var start = this.count();\n    var end = start + Math.max(values.length, names ? names.length : 0);\n    for (var i = 0; i < dimLen; i++) {\n      var dim = dimensions[i];\n      if (!rawExtent[dim]) {\n        rawExtent[dim] = getInitialExtent();\n      }\n      prepareStorage(storage, this._dimensionInfos[dim], end, true);\n    }\n    var rawExtentArr = map(dimensions, function (dim) {\n      return rawExtent[dim];\n    });\n    var storageArr = this._storageArr = map(dimensions, function (dim) {\n      return storage[dim];\n    });\n    var emptyDataItem = [];\n    for (var idx = start; idx < end; idx++) {\n      var sourceIdx = idx - start; // Store the data by dimensions\n\n      for (var dimIdx = 0; dimIdx < dimLen; dimIdx++) {\n        var dim = dimensions[dimIdx];\n        var val = this._dimValueGetterArrayRows(values[sourceIdx] || emptyDataItem, dim, sourceIdx, dimIdx);\n        storageArr[dimIdx][idx] = val;\n        var dimRawExtent = rawExtentArr[dimIdx];\n        val < dimRawExtent[0] && (dimRawExtent[0] = val);\n        val > dimRawExtent[1] && (dimRawExtent[1] = val);\n      }\n      if (names) {\n        this._nameList[idx] = names[sourceIdx];\n        if (!this._dontMakeIdFromName) {\n          makeIdFromName(this, idx);\n        }\n      }\n    }\n    this._rawCount = this._count = end; // Reset data extent\n\n    this._extent = {};\n    prepareInvertedIndex(this);\n  };\n  List.prototype._initDataFromProvider = function (start, end, append) {\n    if (start >= end) {\n      return;\n    }\n    var rawData = this._rawData;\n    var storage = this._storage;\n    var dimensions = this.dimensions;\n    var dimLen = dimensions.length;\n    var dimensionInfoMap = this._dimensionInfos;\n    var nameList = this._nameList;\n    var idList = this._idList;\n    var rawExtent = this._rawExtent;\n    var sourceFormat = rawData.getSource().sourceFormat;\n    var isFormatOriginal = sourceFormat === SOURCE_FORMAT_ORIGINAL;\n    for (var i = 0; i < dimLen; i++) {\n      var dim = dimensions[i];\n      if (!rawExtent[dim]) {\n        rawExtent[dim] = getInitialExtent();\n      }\n      prepareStorage(storage, dimensionInfoMap[dim], end, append);\n    }\n    var storageArr = this._storageArr = map(dimensions, function (dim) {\n      return storage[dim];\n    });\n    var rawExtentArr = map(dimensions, function (dim) {\n      return rawExtent[dim];\n    });\n    if (rawData.fillStorage) {\n      rawData.fillStorage(start, end, storageArr, rawExtentArr);\n    } else {\n      var dataItem = [];\n      for (var idx = start; idx < end; idx++) {\n        // NOTICE: Try not to write things into dataItem\n        dataItem = rawData.getItem(idx, dataItem); // Each data item is value\n        // [1, 2]\n        // 2\n        // Bar chart, line chart which uses category axis\n        // only gives the 'y' value. 'x' value is the indices of category\n        // Use a tempValue to normalize the value to be a (x, y) value\n        // Store the data by dimensions\n\n        for (var dimIdx = 0; dimIdx < dimLen; dimIdx++) {\n          var dim = dimensions[dimIdx];\n          var dimStorage = storageArr[dimIdx]; // PENDING NULL is empty or zero\n\n          var val = this._dimValueGetter(dataItem, dim, idx, dimIdx);\n          dimStorage[idx] = val;\n          var dimRawExtent = rawExtentArr[dimIdx];\n          val < dimRawExtent[0] && (dimRawExtent[0] = val);\n          val > dimRawExtent[1] && (dimRawExtent[1] = val);\n        } // If dataItem is {name: ...} or {id: ...}, it has highest priority.\n        // This kind of ids and names are always stored `_nameList` and `_idList`.\n\n        if (isFormatOriginal && !rawData.pure && dataItem) {\n          var itemName = dataItem.name;\n          if (nameList[idx] == null && itemName != null) {\n            nameList[idx] = convertOptionIdName(itemName, null);\n          }\n          var itemId = dataItem.id;\n          if (idList[idx] == null && itemId != null) {\n            idList[idx] = convertOptionIdName(itemId, null);\n          }\n        }\n        if (!this._dontMakeIdFromName) {\n          makeIdFromName(this, idx);\n        }\n      }\n    }\n    if (!rawData.persistent && rawData.clean) {\n      // Clean unused data if data source is typed array.\n      rawData.clean();\n    }\n    this._rawCount = this._count = end; // Reset data extent\n\n    this._extent = {};\n    prepareInvertedIndex(this);\n  };\n  List.prototype.count = function () {\n    return this._count;\n  };\n  List.prototype.getIndices = function () {\n    var newIndices;\n    var indices = this._indices;\n    if (indices) {\n      var Ctor = indices.constructor;\n      var thisCount = this._count; // `new Array(a, b, c)` is different from `new Uint32Array(a, b, c)`.\n\n      if (Ctor === Array) {\n        newIndices = new Ctor(thisCount);\n        for (var i = 0; i < thisCount; i++) {\n          newIndices[i] = indices[i];\n        }\n      } else {\n        newIndices = new Ctor(indices.buffer, 0, thisCount);\n      }\n    } else {\n      var Ctor = getIndicesCtor(this);\n      newIndices = new Ctor(this.count());\n      for (var i = 0; i < newIndices.length; i++) {\n        newIndices[i] = i;\n      }\n    }\n    return newIndices;\n  }; // Get data by index of dimension.\n  // Because in v8 access array by number variable is faster than access object by string variable\n  // Not sure why but the optimization just works.\n\n  List.prototype.getByDimIdx = function (dimIdx, idx) {\n    if (!(idx >= 0 && idx < this._count)) {\n      return NaN;\n    }\n    var dimStore = this._storageArr[dimIdx];\n    return dimStore ? dimStore[this.getRawIndex(idx)] : NaN;\n  };\n  /**\n   * Get value. Return NaN if idx is out of range.\n   * @param dim Dim must be concrete name.\n   */\n\n  List.prototype.get = function (dim, idx) {\n    if (!(idx >= 0 && idx < this._count)) {\n      return NaN;\n    }\n    var dimStore = this._storage[dim];\n    return dimStore ? dimStore[this.getRawIndex(idx)] : NaN;\n  };\n  /**\n   * @param dim concrete dim\n   */\n\n  List.prototype.getByRawIndex = function (dim, rawIdx) {\n    if (!(rawIdx >= 0 && rawIdx < this._rawCount)) {\n      return NaN;\n    }\n    var dimStore = this._storage[dim];\n    return dimStore ? dimStore[rawIdx] : NaN;\n  };\n  List.prototype.getValues = function (dimensions, idx) {\n    var values = [];\n    if (!zrUtil.isArray(dimensions)) {\n      // stack = idx;\n      idx = dimensions;\n      dimensions = this.dimensions;\n    }\n    for (var i = 0, len = dimensions.length; i < len; i++) {\n      values.push(this.get(dimensions[i], idx\n      /*, stack */));\n    }\n\n    return values;\n  };\n  /**\n   * If value is NaN. Inlcuding '-'\n   * Only check the coord dimensions.\n   */\n\n  List.prototype.hasValue = function (idx) {\n    var dataDimsOnCoord = this._dimensionsSummary.dataDimsOnCoord;\n    for (var i = 0, len = dataDimsOnCoord.length; i < len; i++) {\n      // Ordinal type originally can be string or number.\n      // But when an ordinal type is used on coord, it can\n      // not be string but only number. So we can also use isNaN.\n      if (isNaN(this.get(dataDimsOnCoord[i], idx))) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\n   * Get extent of data in one dimension\n   */\n\n  List.prototype.getDataExtent = function (dim) {\n    // Make sure use concrete dim as cache name.\n    dim = this.getDimension(dim);\n    var dimData = this._storage[dim];\n    var initialExtent = getInitialExtent(); // stack = !!((stack || false) && this.getCalculationInfo(dim));\n\n    if (!dimData) {\n      return initialExtent;\n    } // Make more strict checkings to ensure hitting cache.\n\n    var currEnd = this.count(); // let cacheName = [dim, !!stack].join('_');\n    // let cacheName = dim;\n    // Consider the most cases when using data zoom, `getDataExtent`\n    // happened before filtering. We cache raw extent, which is not\n    // necessary to be cleared and recalculated when restore data.\n\n    var useRaw = !this._indices; // && !stack;\n\n    var dimExtent;\n    if (useRaw) {\n      return this._rawExtent[dim].slice();\n    }\n    dimExtent = this._extent[dim];\n    if (dimExtent) {\n      return dimExtent.slice();\n    }\n    dimExtent = initialExtent;\n    var min = dimExtent[0];\n    var max = dimExtent[1];\n    for (var i = 0; i < currEnd; i++) {\n      var rawIdx = this.getRawIndex(i);\n      var value = dimData[rawIdx];\n      value < min && (min = value);\n      value > max && (max = value);\n    }\n    dimExtent = [min, max];\n    this._extent[dim] = dimExtent;\n    return dimExtent;\n  };\n  /**\n   * PENDING: In fact currently this function is only used to short-circuit\n   * the calling of `scale.unionExtentFromData` when data have been filtered by modules\n   * like \"dataZoom\". `scale.unionExtentFromData` is used to calculate data extent for series on\n   * an axis, but if a \"axis related data filter module\" is used, the extent of the axis have\n   * been fixed and no need to calling `scale.unionExtentFromData` actually.\n   * But if we add \"custom data filter\" in future, which is not \"axis related\", this method may\n   * be still needed.\n   *\n   * Optimize for the scenario that data is filtered by a given extent.\n   * Consider that if data amount is more than hundreds of thousand,\n   * extent calculation will cost more than 10ms and the cache will\n   * be erased because of the filtering.\n   */\n\n  List.prototype.getApproximateExtent = function (dim) {\n    dim = this.getDimension(dim);\n    return this._approximateExtent[dim] || this.getDataExtent(dim);\n  };\n  /**\n   * Calculate extent on a filtered data might be time consuming.\n   * Approximate extent is only used for: calculte extent of filtered data outside.\n   */\n\n  List.prototype.setApproximateExtent = function (extent, dim) {\n    dim = this.getDimension(dim);\n    this._approximateExtent[dim] = extent.slice();\n  };\n  List.prototype.getCalculationInfo = function (key) {\n    return this._calculationInfo[key];\n  };\n  List.prototype.setCalculationInfo = function (key, value) {\n    isObject(key) ? zrUtil.extend(this._calculationInfo, key) : this._calculationInfo[key] = value;\n  };\n  /**\n   * Get sum of data in one dimension\n   */\n\n  List.prototype.getSum = function (dim) {\n    var dimData = this._storage[dim];\n    var sum = 0;\n    if (dimData) {\n      for (var i = 0, len = this.count(); i < len; i++) {\n        var value = this.get(dim, i);\n        if (!isNaN(value)) {\n          sum += value;\n        }\n      }\n    }\n    return sum;\n  };\n  /**\n   * Get median of data in one dimension\n   */\n\n  List.prototype.getMedian = function (dim) {\n    var dimDataArray = []; // map all data of one dimension\n\n    this.each(dim, function (val) {\n      if (!isNaN(val)) {\n        dimDataArray.push(val);\n      }\n    }); // TODO\n    // Use quick select?\n\n    var sortedDimDataArray = dimDataArray.sort(function (a, b) {\n      return a - b;\n    });\n    var len = this.count(); // calculate median\n\n    return len === 0 ? 0 : len % 2 === 1 ? sortedDimDataArray[(len - 1) / 2] : (sortedDimDataArray[len / 2] + sortedDimDataArray[len / 2 - 1]) / 2;\n  }; // /**\n  //  * Retreive the index with given value\n  //  * @param {string} dim Concrete dimension.\n  //  * @param {number} value\n  //  * @return {number}\n  //  */\n  // Currently incorrect: should return dataIndex but not rawIndex.\n  // Do not fix it until this method is to be used somewhere.\n  // FIXME Precision of float value\n  // indexOf(dim, value) {\n  //     let storage = this._storage;\n  //     let dimData = storage[dim];\n  //     let chunkSize = this._chunkSize;\n  //     if (dimData) {\n  //         for (let i = 0, len = this.count(); i < len; i++) {\n  //             let chunkIndex = mathFloor(i / chunkSize);\n  //             let chunkOffset = i % chunkSize;\n  //             if (dimData[chunkIndex][chunkOffset] === value) {\n  //                 return i;\n  //             }\n  //         }\n  //     }\n  //     return -1;\n  // }\n\n  /**\n   * Only support the dimension which inverted index created.\n   * Do not support other cases until required.\n   * @param dim concrete dim\n   * @param value ordinal index\n   * @return rawIndex\n   */\n\n  List.prototype.rawIndexOf = function (dim, value) {\n    var invertedIndices = dim && this._invertedIndicesMap[dim];\n    if (process.env.NODE_ENV !== 'production') {\n      if (!invertedIndices) {\n        throw new Error('Do not supported yet');\n      }\n    }\n    var rawIndex = invertedIndices[value];\n    if (rawIndex == null || isNaN(rawIndex)) {\n      return INDEX_NOT_FOUND;\n    }\n    return rawIndex;\n  };\n  /**\n   * Retreive the index with given name\n   */\n\n  List.prototype.indexOfName = function (name) {\n    for (var i = 0, len = this.count(); i < len; i++) {\n      if (this.getName(i) === name) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  /**\n   * Retreive the index with given raw data index\n   */\n\n  List.prototype.indexOfRawIndex = function (rawIndex) {\n    if (rawIndex >= this._rawCount || rawIndex < 0) {\n      return -1;\n    }\n    if (!this._indices) {\n      return rawIndex;\n    } // Indices are ascending\n\n    var indices = this._indices; // If rawIndex === dataIndex\n\n    var rawDataIndex = indices[rawIndex];\n    if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) {\n      return rawIndex;\n    }\n    var left = 0;\n    var right = this._count - 1;\n    while (left <= right) {\n      var mid = (left + right) / 2 | 0;\n      if (indices[mid] < rawIndex) {\n        left = mid + 1;\n      } else if (indices[mid] > rawIndex) {\n        right = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -1;\n  };\n  /**\n   * Retreive the index of nearest value\n   * @param dim\n   * @param value\n   * @param [maxDistance=Infinity]\n   * @return If and only if multiple indices has\n   *         the same value, they are put to the result.\n   */\n\n  List.prototype.indicesOfNearest = function (dim, value, maxDistance) {\n    var storage = this._storage;\n    var dimData = storage[dim];\n    var nearestIndices = [];\n    if (!dimData) {\n      return nearestIndices;\n    }\n    if (maxDistance == null) {\n      maxDistance = Infinity;\n    }\n    var minDist = Infinity;\n    var minDiff = -1;\n    var nearestIndicesLen = 0; // Check the test case of `test/ut/spec/data/List.js`.\n\n    for (var i = 0, len = this.count(); i < len; i++) {\n      var dataIndex = this.getRawIndex(i);\n      var diff = value - dimData[dataIndex];\n      var dist = Math.abs(diff);\n      if (dist <= maxDistance) {\n        // When the `value` is at the middle of `this.get(dim, i)` and `this.get(dim, i+1)`,\n        // we'd better not push both of them to `nearestIndices`, otherwise it is easy to\n        // get more than one item in `nearestIndices` (more specifically, in `tooltip`).\n        // So we chose the one that `diff >= 0` in this csae.\n        // But if `this.get(dim, i)` and `this.get(dim, j)` get the same value, both of them\n        // should be push to `nearestIndices`.\n        if (dist < minDist || dist === minDist && diff >= 0 && minDiff < 0) {\n          minDist = dist;\n          minDiff = diff;\n          nearestIndicesLen = 0;\n        }\n        if (diff === minDiff) {\n          nearestIndices[nearestIndicesLen++] = i;\n        }\n      }\n    }\n    nearestIndices.length = nearestIndicesLen;\n    return nearestIndices;\n  };\n  /**\n   * Get raw data item\n   */\n\n  List.prototype.getRawDataItem = function (idx) {\n    if (!this._rawData.persistent) {\n      var val = [];\n      for (var i = 0; i < this.dimensions.length; i++) {\n        var dim = this.dimensions[i];\n        val.push(this.get(dim, idx));\n      }\n      return val;\n    } else {\n      return this._rawData.getItem(this.getRawIndex(idx));\n    }\n  };\n  /**\n   * @return Never be null/undefined. `number` will be converted to string. Becuase:\n   * In most cases, name is used in display, where returning a string is more convenient.\n   * In other cases, name is used in query (see `indexOfName`), where we can keep the\n   * rule that name `2` equals to name `'2'`.\n   */\n\n  List.prototype.getName = function (idx) {\n    var rawIndex = this.getRawIndex(idx);\n    var name = this._nameList[rawIndex];\n    if (name == null && this._nameDimIdx != null) {\n      name = getIdNameFromStore(this, this._nameDimIdx, this._nameOrdinalMeta, rawIndex);\n    }\n    if (name == null) {\n      name = '';\n    }\n    return name;\n  };\n  /**\n   * @return Never null/undefined. `number` will be converted to string. Becuase:\n   * In all cases having encountered at present, id is used in making diff comparison, which\n   * are usually based on hash map. We can keep the rule that the internal id are always string\n   * (treat `2` is the same as `'2'`) to make the related logic simple.\n   */\n\n  List.prototype.getId = function (idx) {\n    return getId(this, this.getRawIndex(idx));\n  };\n  List.prototype.each = function (dims, cb, ctx, ctxCompat) {\n    'use strict';\n\n    var _this = this;\n    if (!this._count) {\n      return;\n    }\n    if (typeof dims === 'function') {\n      ctxCompat = ctx;\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n    var fCtx = ctx || ctxCompat || this;\n    var dimNames = map(normalizeDimensions(dims), this.getDimension, this);\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimNames);\n    }\n    var dimSize = dimNames.length;\n    var dimIndices = map(dimNames, function (dimName) {\n      return _this._dimensionInfos[dimName].index;\n    });\n    var storageArr = this._storageArr;\n    for (var i = 0, len = this.count(); i < len; i++) {\n      var rawIdx = this.getRawIndex(i); // Simple optimization\n\n      switch (dimSize) {\n        case 0:\n          cb.call(fCtx, i);\n          break;\n        case 1:\n          cb.call(fCtx, storageArr[dimIndices[0]][rawIdx], i);\n          break;\n        case 2:\n          cb.call(fCtx, storageArr[dimIndices[0]][rawIdx], storageArr[dimIndices[1]][rawIdx], i);\n          break;\n        default:\n          var k = 0;\n          var value = [];\n          for (; k < dimSize; k++) {\n            value[k] = storageArr[dimIndices[k]][rawIdx];\n          } // Index\n\n          value[k] = i;\n          cb.apply(fCtx, value);\n      }\n    }\n  };\n  List.prototype.filterSelf = function (dims, cb, ctx, ctxCompat) {\n    'use strict';\n\n    var _this = this;\n    if (!this._count) {\n      return;\n    }\n    if (typeof dims === 'function') {\n      ctxCompat = ctx;\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n    var fCtx = ctx || ctxCompat || this;\n    var dimNames = map(normalizeDimensions(dims), this.getDimension, this);\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimNames);\n    }\n    var count = this.count();\n    var Ctor = getIndicesCtor(this);\n    var newIndices = new Ctor(count);\n    var value = [];\n    var dimSize = dimNames.length;\n    var offset = 0;\n    var dimIndices = map(dimNames, function (dimName) {\n      return _this._dimensionInfos[dimName].index;\n    });\n    var dim0 = dimIndices[0];\n    var storageArr = this._storageArr;\n    for (var i = 0; i < count; i++) {\n      var keep = void 0;\n      var rawIdx = this.getRawIndex(i); // Simple optimization\n\n      if (dimSize === 0) {\n        keep = cb.call(fCtx, i);\n      } else if (dimSize === 1) {\n        var val = storageArr[dim0][rawIdx];\n        keep = cb.call(fCtx, val, i);\n      } else {\n        var k = 0;\n        for (; k < dimSize; k++) {\n          value[k] = storageArr[dimIndices[k]][rawIdx];\n        }\n        value[k] = i;\n        keep = cb.apply(fCtx, value);\n      }\n      if (keep) {\n        newIndices[offset++] = rawIdx;\n      }\n    } // Set indices after filtered.\n\n    if (offset < count) {\n      this._indices = newIndices;\n    }\n    this._count = offset; // Reset data extent\n\n    this._extent = {};\n    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    return this;\n  };\n  /**\n   * Select data in range. (For optimization of filter)\n   * (Manually inline code, support 5 million data filtering in data zoom.)\n   */\n\n  List.prototype.selectRange = function (range) {\n    'use strict';\n\n    var _this = this;\n    var len = this._count;\n    if (!len) {\n      return;\n    }\n    var dimensions = [];\n    for (var dim in range) {\n      if (range.hasOwnProperty(dim)) {\n        dimensions.push(dim);\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimensions);\n    }\n    var dimSize = dimensions.length;\n    if (!dimSize) {\n      return;\n    }\n    var originalCount = this.count();\n    var Ctor = getIndicesCtor(this);\n    var newIndices = new Ctor(originalCount);\n    var offset = 0;\n    var dim0 = dimensions[0];\n    var dimIndices = map(dimensions, function (dimName) {\n      return _this._dimensionInfos[dimName].index;\n    });\n    var min = range[dim0][0];\n    var max = range[dim0][1];\n    var storageArr = this._storageArr;\n    var quickFinished = false;\n    if (!this._indices) {\n      // Extreme optimization for common case. About 2x faster in chrome.\n      var idx = 0;\n      if (dimSize === 1) {\n        var dimStorage = storageArr[dimIndices[0]];\n        for (var i = 0; i < len; i++) {\n          var val = dimStorage[i]; // NaN will not be filtered. Consider the case, in line chart, empty\n          // value indicates the line should be broken. But for the case like\n          // scatter plot, a data item with empty value will not be rendered,\n          // but the axis extent may be effected if some other dim of the data\n          // item has value. Fortunately it is not a significant negative effect.\n\n          if (val >= min && val <= max || isNaN(val)) {\n            newIndices[offset++] = idx;\n          }\n          idx++;\n        }\n        quickFinished = true;\n      } else if (dimSize === 2) {\n        var dimStorage = storageArr[dimIndices[0]];\n        var dimStorage2 = storageArr[dimIndices[1]];\n        var min2 = range[dimensions[1]][0];\n        var max2 = range[dimensions[1]][1];\n        for (var i = 0; i < len; i++) {\n          var val = dimStorage[i];\n          var val2 = dimStorage2[i]; // Do not filter NaN, see comment above.\n\n          if ((val >= min && val <= max || isNaN(val)) && (val2 >= min2 && val2 <= max2 || isNaN(val2))) {\n            newIndices[offset++] = idx;\n          }\n          idx++;\n        }\n        quickFinished = true;\n      }\n    }\n    if (!quickFinished) {\n      if (dimSize === 1) {\n        for (var i = 0; i < originalCount; i++) {\n          var rawIndex = this.getRawIndex(i);\n          var val = storageArr[dimIndices[0]][rawIndex]; // Do not filter NaN, see comment above.\n\n          if (val >= min && val <= max || isNaN(val)) {\n            newIndices[offset++] = rawIndex;\n          }\n        }\n      } else {\n        for (var i = 0; i < originalCount; i++) {\n          var keep = true;\n          var rawIndex = this.getRawIndex(i);\n          for (var k = 0; k < dimSize; k++) {\n            var dimk = dimensions[k];\n            var val = storageArr[dimIndices[k]][rawIndex]; // Do not filter NaN, see comment above.\n\n            if (val < range[dimk][0] || val > range[dimk][1]) {\n              keep = false;\n            }\n          }\n          if (keep) {\n            newIndices[offset++] = this.getRawIndex(i);\n          }\n        }\n      }\n    } // Set indices after filtered.\n\n    if (offset < originalCount) {\n      this._indices = newIndices;\n    }\n    this._count = offset; // Reset data extent\n\n    this._extent = {};\n    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    return this;\n  };\n  /* eslint-enable */\n\n  List.prototype.mapArray = function (dims, cb, ctx, ctxCompat) {\n    'use strict';\n\n    if (typeof dims === 'function') {\n      ctxCompat = ctx;\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n    ctx = ctx || ctxCompat || this;\n    var result = [];\n    this.each(dims, function () {\n      result.push(cb && cb.apply(this, arguments));\n    }, ctx);\n    return result;\n  };\n  List.prototype.map = function (dims, cb, ctx, ctxCompat) {\n    'use strict';\n\n    // ctxCompat just for compat echarts3\n    var fCtx = ctx || ctxCompat || this;\n    var dimNames = map(normalizeDimensions(dims), this.getDimension, this);\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimNames);\n    }\n    var list = cloneListForMapAndSample(this, dimNames);\n    var storage = list._storage; // Following properties are all immutable.\n    // So we can reference to the same value\n\n    list._indices = this._indices;\n    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    var tmpRetValue = [];\n    var dimSize = dimNames.length;\n    var dataCount = this.count();\n    var values = [];\n    var rawExtent = list._rawExtent;\n    for (var dataIndex = 0; dataIndex < dataCount; dataIndex++) {\n      for (var dimIndex = 0; dimIndex < dimSize; dimIndex++) {\n        values[dimIndex] = this.get(dimNames[dimIndex], dataIndex);\n      }\n      values[dimSize] = dataIndex;\n      var retValue = cb && cb.apply(fCtx, values);\n      if (retValue != null) {\n        // a number or string (in oridinal dimension)?\n        if (typeof retValue !== 'object') {\n          tmpRetValue[0] = retValue;\n          retValue = tmpRetValue;\n        }\n        var rawIndex = this.getRawIndex(dataIndex);\n        for (var i = 0; i < retValue.length; i++) {\n          var dim = dimNames[i];\n          var val = retValue[i];\n          var rawExtentOnDim = rawExtent[dim];\n          var dimStore = storage[dim];\n          if (dimStore) {\n            dimStore[rawIndex] = val;\n          }\n          if (val < rawExtentOnDim[0]) {\n            rawExtentOnDim[0] = val;\n          }\n          if (val > rawExtentOnDim[1]) {\n            rawExtentOnDim[1] = val;\n          }\n        }\n      }\n    }\n    return list;\n  };\n  /**\n   * Large data down sampling on given dimension\n   * @param sampleIndex Sample index for name and id\n   */\n\n  List.prototype.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n    var list = cloneListForMapAndSample(this, [dimension]);\n    var targetStorage = list._storage;\n    var frameValues = [];\n    var frameSize = mathFloor(1 / rate);\n    var dimStore = targetStorage[dimension];\n    var len = this.count();\n    var rawExtentOnDim = list._rawExtent[dimension];\n    var newIndices = new (getIndicesCtor(this))(len);\n    var offset = 0;\n    for (var i = 0; i < len; i += frameSize) {\n      // Last frame\n      if (frameSize > len - i) {\n        frameSize = len - i;\n        frameValues.length = frameSize;\n      }\n      for (var k = 0; k < frameSize; k++) {\n        var dataIdx = this.getRawIndex(i + k);\n        frameValues[k] = dimStore[dataIdx];\n      }\n      var value = sampleValue(frameValues);\n      var sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len - 1)); // Only write value on the filtered data\n\n      dimStore[sampleFrameIdx] = value;\n      if (value < rawExtentOnDim[0]) {\n        rawExtentOnDim[0] = value;\n      }\n      if (value > rawExtentOnDim[1]) {\n        rawExtentOnDim[1] = value;\n      }\n      newIndices[offset++] = sampleFrameIdx;\n    }\n    list._count = offset;\n    list._indices = newIndices;\n    list.getRawIndex = getRawIndexWithIndices;\n    return list;\n  };\n  /**\n   * Large data down sampling using largest-triangle-three-buckets\n   * @param {string} valueDimension\n   * @param {number} targetCount\n   */\n\n  List.prototype.lttbDownSample = function (valueDimension, rate) {\n    var list = cloneListForMapAndSample(this, []);\n    var targetStorage = list._storage;\n    var dimStore = targetStorage[valueDimension];\n    var len = this.count();\n    var newIndices = new (getIndicesCtor(this))(len);\n    var sampledIndex = 0;\n    var frameSize = mathFloor(1 / rate);\n    var currentRawIndex = this.getRawIndex(0);\n    var maxArea;\n    var area;\n    var nextRawIndex; // First frame use the first data.\n\n    newIndices[sampledIndex++] = currentRawIndex;\n    for (var i = 1; i < len - 1; i += frameSize) {\n      var nextFrameStart = Math.min(i + frameSize, len - 1);\n      var nextFrameEnd = Math.min(i + frameSize * 2, len);\n      var avgX = (nextFrameEnd + nextFrameStart) / 2;\n      var avgY = 0;\n      for (var idx = nextFrameStart; idx < nextFrameEnd; idx++) {\n        var rawIndex = this.getRawIndex(idx);\n        var y = dimStore[rawIndex];\n        if (isNaN(y)) {\n          continue;\n        }\n        avgY += y;\n      }\n      avgY /= nextFrameEnd - nextFrameStart;\n      var frameStart = i;\n      var frameEnd = Math.min(i + frameSize, len);\n      var pointAX = i - 1;\n      var pointAY = dimStore[currentRawIndex];\n      maxArea = -1;\n      nextRawIndex = frameStart; // Find a point from current frame that construct a triangel with largest area with previous selected point\n      // And the average of next frame.\n\n      for (var idx = frameStart; idx < frameEnd; idx++) {\n        var rawIndex = this.getRawIndex(idx);\n        var y = dimStore[rawIndex];\n        if (isNaN(y)) {\n          continue;\n        } // Calculate triangle area over three buckets\n\n        area = Math.abs((pointAX - avgX) * (y - pointAY) - (pointAX - idx) * (avgY - pointAY));\n        if (area > maxArea) {\n          maxArea = area;\n          nextRawIndex = rawIndex; // Next a is this b\n        }\n      }\n\n      newIndices[sampledIndex++] = nextRawIndex;\n      currentRawIndex = nextRawIndex; // This a is the next a (chosen b)\n    } // First frame use the last data.\n\n    newIndices[sampledIndex++] = this.getRawIndex(len - 1);\n    list._count = sampledIndex;\n    list._indices = newIndices;\n    list.getRawIndex = getRawIndexWithIndices;\n    return list;\n  };\n  /**\n   * Get model of one data item.\n   */\n  // TODO: Type of data item\n\n  List.prototype.getItemModel = function (idx) {\n    var hostModel = this.hostModel;\n    var dataItem = this.getRawDataItem(idx);\n    return new Model(dataItem, hostModel, hostModel && hostModel.ecModel);\n  };\n  /**\n   * Create a data differ\n   */\n\n  List.prototype.diff = function (otherList) {\n    var thisList = this;\n    return new DataDiffer(otherList ? otherList.getIndices() : [], this.getIndices(), function (idx) {\n      return getId(otherList, idx);\n    }, function (idx) {\n      return getId(thisList, idx);\n    });\n  };\n  /**\n   * Get visual property.\n   */\n\n  List.prototype.getVisual = function (key) {\n    var visual = this._visual;\n    return visual && visual[key];\n  };\n  List.prototype.setVisual = function (kvObj, val) {\n    this._visual = this._visual || {};\n    if (isObject(kvObj)) {\n      zrUtil.extend(this._visual, kvObj);\n    } else {\n      this._visual[kvObj] = val;\n    }\n  };\n  /**\n   * Get visual property of single data item\n   */\n  // eslint-disable-next-line\n\n  List.prototype.getItemVisual = function (idx, key) {\n    var itemVisual = this._itemVisuals[idx];\n    var val = itemVisual && itemVisual[key];\n    if (val == null) {\n      // Use global visual property\n      return this.getVisual(key);\n    }\n    return val;\n  };\n  /**\n   * If exists visual property of single data item\n   */\n\n  List.prototype.hasItemVisual = function () {\n    return this._itemVisuals.length > 0;\n  };\n  /**\n   * Make sure itemVisual property is unique\n   */\n  // TODO: use key to save visual to reduce memory.\n\n  List.prototype.ensureUniqueItemVisual = function (idx, key) {\n    var itemVisuals = this._itemVisuals;\n    var itemVisual = itemVisuals[idx];\n    if (!itemVisual) {\n      itemVisual = itemVisuals[idx] = {};\n    }\n    var val = itemVisual[key];\n    if (val == null) {\n      val = this.getVisual(key); // TODO Performance?\n\n      if (zrUtil.isArray(val)) {\n        val = val.slice();\n      } else if (isObject(val)) {\n        val = zrUtil.extend({}, val);\n      }\n      itemVisual[key] = val;\n    }\n    return val;\n  }; // eslint-disable-next-line\n\n  List.prototype.setItemVisual = function (idx, key, value) {\n    var itemVisual = this._itemVisuals[idx] || {};\n    this._itemVisuals[idx] = itemVisual;\n    if (isObject(key)) {\n      zrUtil.extend(itemVisual, key);\n    } else {\n      itemVisual[key] = value;\n    }\n  };\n  /**\n   * Clear itemVisuals and list visual.\n   */\n\n  List.prototype.clearAllVisual = function () {\n    this._visual = {};\n    this._itemVisuals = [];\n  };\n  List.prototype.setLayout = function (key, val) {\n    if (isObject(key)) {\n      for (var name_1 in key) {\n        if (key.hasOwnProperty(name_1)) {\n          this.setLayout(name_1, key[name_1]);\n        }\n      }\n      return;\n    }\n    this._layout[key] = val;\n  };\n  /**\n   * Get layout property.\n   */\n\n  List.prototype.getLayout = function (key) {\n    return this._layout[key];\n  };\n  /**\n   * Get layout of single data item\n   */\n\n  List.prototype.getItemLayout = function (idx) {\n    return this._itemLayouts[idx];\n  };\n  /**\n   * Set layout of single data item\n   */\n\n  List.prototype.setItemLayout = function (idx, layout, merge) {\n    this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;\n  };\n  /**\n   * Clear all layout of single data item\n   */\n\n  List.prototype.clearItemLayouts = function () {\n    this._itemLayouts.length = 0;\n  };\n  /**\n   * Set graphic element relative to data. It can be set as null\n   */\n\n  List.prototype.setItemGraphicEl = function (idx, el) {\n    var hostModel = this.hostModel;\n    if (el) {\n      var ecData = getECData(el); // Add data index and series index for indexing the data by element\n      // Useful in tooltip\n\n      ecData.dataIndex = idx;\n      ecData.dataType = this.dataType;\n      ecData.seriesIndex = hostModel && hostModel.seriesIndex; // TODO: not store dataIndex on children.\n\n      if (el.type === 'group') {\n        el.traverse(setItemDataAndSeriesIndex, el);\n      }\n    }\n    this._graphicEls[idx] = el;\n  };\n  List.prototype.getItemGraphicEl = function (idx) {\n    return this._graphicEls[idx];\n  };\n  List.prototype.eachItemGraphicEl = function (cb, context) {\n    zrUtil.each(this._graphicEls, function (el, idx) {\n      if (el) {\n        cb && cb.call(context, el, idx);\n      }\n    });\n  };\n  /**\n   * Shallow clone a new list except visual and layout properties, and graph elements.\n   * New list only change the indices.\n   */\n\n  List.prototype.cloneShallow = function (list) {\n    if (!list) {\n      var dimensionInfoList = map(this.dimensions, this.getDimensionInfo, this);\n      list = new List(dimensionInfoList, this.hostModel);\n    } // FIXME\n\n    list._storage = this._storage;\n    list._storageArr = this._storageArr;\n    transferProperties(list, this); // Clone will not change the data extent and indices\n\n    if (this._indices) {\n      var Ctor = this._indices.constructor;\n      if (Ctor === Array) {\n        var thisCount = this._indices.length;\n        list._indices = new Ctor(thisCount);\n        for (var i = 0; i < thisCount; i++) {\n          list._indices[i] = this._indices[i];\n        }\n      } else {\n        list._indices = new Ctor(this._indices);\n      }\n    } else {\n      list._indices = null;\n    }\n    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    return list;\n  };\n  /**\n   * Wrap some method to add more feature\n   */\n\n  List.prototype.wrapMethod = function (methodName, injectFunction) {\n    var originalMethod = this[methodName];\n    if (typeof originalMethod !== 'function') {\n      return;\n    }\n    this.__wrappedMethods = this.__wrappedMethods || [];\n    this.__wrappedMethods.push(methodName);\n    this[methodName] = function () {\n      var res = originalMethod.apply(this, arguments);\n      return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n    };\n  }; // ----------------------------------------------------------\n  // A work around for internal method visiting private member.\n  // ----------------------------------------------------------\n\n  List.internalField = function () {\n    defaultDimValueGetters = {\n      arrayRows: getDimValueSimply,\n      objectRows: function (dataItem, dimName, dataIndex, dimIndex) {\n        return parseDataValue(dataItem[dimName], this._dimensionInfos[dimName]);\n      },\n      keyedColumns: getDimValueSimply,\n      original: function (dataItem, dimName, dataIndex, dimIndex) {\n        // Performance sensitive, do not use modelUtil.getDataItemValue.\n        // If dataItem is an plain object with no value field, the let `value`\n        // will be assigned with the object, but it will be tread correctly\n        // in the `convertValue`.\n        var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }\n\n        if (!this._rawData.pure && isDataItemOption(dataItem)) {\n          this.hasItemOption = true;\n        }\n        return parseDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.\n        : value, this._dimensionInfos[dimName]);\n      },\n      typedArray: function (dataItem, dimName, dataIndex, dimIndex) {\n        return dataItem[dimIndex];\n      }\n    };\n    function getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {\n      return parseDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);\n    }\n    prepareInvertedIndex = function (list) {\n      var invertedIndicesMap = list._invertedIndicesMap;\n      zrUtil.each(invertedIndicesMap, function (invertedIndices, dim) {\n        var dimInfo = list._dimensionInfos[dim]; // Currently, only dimensions that has ordinalMeta can create inverted indices.\n\n        var ordinalMeta = dimInfo.ordinalMeta;\n        if (ordinalMeta) {\n          invertedIndices = invertedIndicesMap[dim] = new CtorInt32Array(ordinalMeta.categories.length); // The default value of TypedArray is 0. To avoid miss\n          // mapping to 0, we should set it as INDEX_NOT_FOUND.\n\n          for (var i = 0; i < invertedIndices.length; i++) {\n            invertedIndices[i] = INDEX_NOT_FOUND;\n          }\n          for (var i = 0; i < list._count; i++) {\n            // Only support the case that all values are distinct.\n            invertedIndices[list.get(dim, i)] = i;\n          }\n        }\n      });\n    };\n    getIdNameFromStore = function (list, dimIdx, ordinalMeta, rawIndex) {\n      var val;\n      var chunk = list._storageArr[dimIdx];\n      if (chunk) {\n        val = chunk[rawIndex];\n        if (ordinalMeta && ordinalMeta.categories.length) {\n          val = ordinalMeta.categories[val];\n        }\n      }\n      return convertOptionIdName(val, null);\n    };\n    getIndicesCtor = function (list) {\n      // The possible max value in this._indicies is always this._rawCount despite of filtering.\n      return list._rawCount > 65535 ? CtorUint32Array : CtorUint16Array;\n    };\n    prepareStorage = function (storage, dimInfo, end, append) {\n      var DataCtor = dataCtors[dimInfo.type];\n      var dim = dimInfo.name;\n      if (append) {\n        var oldStore = storage[dim];\n        var oldLen = oldStore && oldStore.length;\n        if (!(oldLen === end)) {\n          var newStore = new DataCtor(end); // The cost of the copy is probably inconsiderable\n          // within the initial chunkSize.\n\n          for (var j = 0; j < oldLen; j++) {\n            newStore[j] = oldStore[j];\n          }\n          storage[dim] = newStore;\n        }\n      } else {\n        storage[dim] = new DataCtor(end);\n      }\n    };\n    getRawIndexWithoutIndices = function (idx) {\n      return idx;\n    };\n    getRawIndexWithIndices = function (idx) {\n      if (idx < this._count && idx >= 0) {\n        return this._indices[idx];\n      }\n      return -1;\n    };\n    /**\n     * @see the comment of `List['getId']`.\n     */\n\n    getId = function (list, rawIndex) {\n      var id = list._idList[rawIndex];\n      if (id == null && list._idDimIdx != null) {\n        id = getIdNameFromStore(list, list._idDimIdx, list._idOrdinalMeta, rawIndex);\n      }\n      if (id == null) {\n        id = ID_PREFIX + rawIndex;\n      }\n      return id;\n    };\n    normalizeDimensions = function (dimensions) {\n      if (!zrUtil.isArray(dimensions)) {\n        dimensions = dimensions != null ? [dimensions] : [];\n      }\n      return dimensions;\n    };\n    validateDimensions = function (list, dims) {\n      for (var i = 0; i < dims.length; i++) {\n        // stroage may be empty when no data, so use\n        // dimensionInfos to check.\n        if (!list._dimensionInfos[dims[i]]) {\n          console.error('Unkown dimension ' + dims[i]);\n        }\n      }\n    }; // Data in excludeDimensions is copied, otherwise transfered.\n\n    cloneListForMapAndSample = function (original, excludeDimensions) {\n      var allDimensions = original.dimensions;\n      var list = new List(map(allDimensions, original.getDimensionInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked\n\n      transferProperties(list, original);\n      var storage = list._storage = {};\n      var originalStorage = original._storage;\n      var storageArr = list._storageArr = []; // Init storage\n\n      for (var i = 0; i < allDimensions.length; i++) {\n        var dim = allDimensions[i];\n        if (originalStorage[dim]) {\n          // Notice that we do not reset invertedIndicesMap here, becuase\n          // there is no scenario of mapping or sampling ordinal dimension.\n          if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n            storage[dim] = cloneChunk(originalStorage[dim]);\n            list._rawExtent[dim] = getInitialExtent();\n            list._extent[dim] = null;\n          } else {\n            // Direct reference for other dimensions\n            storage[dim] = originalStorage[dim];\n          }\n          storageArr.push(storage[dim]);\n        }\n      }\n      return list;\n    };\n    function cloneChunk(originalChunk) {\n      var Ctor = originalChunk.constructor; // Only shallow clone is enough when Array.\n\n      return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);\n    }\n    getInitialExtent = function () {\n      return [Infinity, -Infinity];\n    };\n    setItemDataAndSeriesIndex = function (child) {\n      var childECData = getECData(child);\n      var thisECData = getECData(this);\n      childECData.seriesIndex = thisECData.seriesIndex;\n      childECData.dataIndex = thisECData.dataIndex;\n      childECData.dataType = thisECData.dataType;\n    };\n    transferProperties = function (target, source) {\n      zrUtil.each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function (propName) {\n        if (source.hasOwnProperty(propName)) {\n          target[propName] = source[propName];\n        }\n      });\n      target.__wrappedMethods = source.__wrappedMethods;\n      zrUtil.each(CLONE_PROPERTIES, function (propName) {\n        target[propName] = zrUtil.clone(source[propName]);\n      });\n      target._calculationInfo = zrUtil.extend({}, source._calculationInfo);\n    };\n    makeIdFromName = function (list, idx) {\n      var nameList = list._nameList;\n      var idList = list._idList;\n      var nameDimIdx = list._nameDimIdx;\n      var idDimIdx = list._idDimIdx;\n      var name = nameList[idx];\n      var id = idList[idx];\n      if (name == null && nameDimIdx != null) {\n        nameList[idx] = name = getIdNameFromStore(list, nameDimIdx, list._nameOrdinalMeta, idx);\n      }\n      if (id == null && idDimIdx != null) {\n        idList[idx] = id = getIdNameFromStore(list, idDimIdx, list._idOrdinalMeta, idx);\n      }\n      if (id == null && name != null) {\n        var nameRepeatCount = list._nameRepeatCount;\n        var nmCnt = nameRepeatCount[name] = (nameRepeatCount[name] || 0) + 1;\n        id = name;\n        if (nmCnt > 1) {\n          id += '__ec__' + nmCnt;\n        }\n        idList[idx] = id;\n      }\n    };\n  }();\n  return List;\n}();\nexport default List;","map":{"version":3,"names":["zrUtil","Model","DataDiffer","DefaultDataProvider","summarizeDimensions","DataDimensionInfo","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ORIGINAL","isDataItemOption","convertOptionIdName","getECData","parseDataValue","isSourceInstance","mathFloor","Math","floor","isObject","map","UNDEFINED","INDEX_NOT_FOUND","ID_PREFIX","dataCtors","Float64Array","Array","Int32Array","CtorUint32Array","Uint32Array","CtorInt32Array","CtorUint16Array","Uint16Array","TRANSFERABLE_PROPERTIES","CLONE_PROPERTIES","defaultDimValueGetters","prepareInvertedIndex","getIndicesCtor","prepareStorage","getRawIndexWithoutIndices","getRawIndexWithIndices","getId","getIdNameFromStore","makeIdFromName","normalizeDimensions","validateDimensions","cloneListForMapAndSample","getInitialExtent","setItemDataAndSeriesIndex","transferProperties","List","dimensions","hostModel","type","_count","_rawCount","_storage","_storageArr","_nameList","_idList","_visual","_layout","_itemVisuals","_itemLayouts","_graphicEls","_rawExtent","_extent","_approximateExtent","_calculationInfo","hasItemOption","TRANSFERABLE_METHODS","CHANGABLE_METHODS","DOWNSAMPLE_METHODS","getRawIndex","dimensionInfos","dimensionNames","invertedIndicesMap","i","length","dimInfoInput","dimensionInfo","isString","name","dimensionName","coordDim","coordDimIndex","otherDims","push","index","createInvertedIndices","itemName","_nameDimIdx","_nameOrdinalMeta","ordinalMeta","itemId","_idDimIdx","_idOrdinalMeta","_dimensionInfos","_dimensionsSummary","_invertedIndicesMap","userOutput","prototype","getDimension","dim","isNaN","hasOwnProperty","getDimensionInfo","getDimensionsOnCoord","dataDimsOnCoord","slice","mapDimension","idx","dimensionsSummary","encodeFirstDimNotExtra","dims","encode","mapDimensionsAll","initData","data","nameList","dimValueGetter","notProvider","isArrayLike","provider","process","env","NODE_ENV","assert","isFunction","getItem","count","_rawData","sourceFormat","getSource","_indices","_dontMakeIdFromName","fillStorage","_nameRepeatCount","defaultDimValueGetter","_dimValueGetter","_dimValueGetterArrayRows","arrayRows","_initDataFromProvider","pure","getProvider","appendData","rawData","start","end","persistent","appendValues","values","names","storage","dimLen","rawExtent","max","rawExtentArr","storageArr","emptyDataItem","sourceIdx","dimIdx","val","dimRawExtent","append","dimensionInfoMap","idList","isFormatOriginal","dataItem","dimStorage","id","clean","getIndices","newIndices","indices","Ctor","constructor","thisCount","buffer","getByDimIdx","NaN","dimStore","get","getByRawIndex","rawIdx","getValues","isArray","len","hasValue","getDataExtent","dimData","initialExtent","currEnd","useRaw","dimExtent","min","value","getApproximateExtent","setApproximateExtent","extent","getCalculationInfo","key","setCalculationInfo","extend","getSum","sum","getMedian","dimDataArray","each","sortedDimDataArray","sort","a","b","rawIndexOf","invertedIndices","Error","rawIndex","indexOfName","getName","indexOfRawIndex","rawDataIndex","left","right","mid","indicesOfNearest","maxDistance","nearestIndices","Infinity","minDist","minDiff","nearestIndicesLen","dataIndex","diff","dist","abs","getRawDataItem","cb","ctx","ctxCompat","_this","fCtx","dimNames","dimSize","dimIndices","dimName","call","k","apply","filterSelf","offset","dim0","keep","selectRange","range","originalCount","quickFinished","dimStorage2","min2","max2","val2","dimk","mapArray","result","arguments","list","tmpRetValue","dataCount","dimIndex","retValue","rawExtentOnDim","downSample","dimension","rate","sampleValue","sampleIndex","targetStorage","frameValues","frameSize","dataIdx","sampleFrameIdx","lttbDownSample","valueDimension","sampledIndex","currentRawIndex","maxArea","area","nextRawIndex","nextFrameStart","nextFrameEnd","avgX","avgY","y","frameStart","frameEnd","pointAX","pointAY","getItemModel","ecModel","otherList","thisList","getVisual","visual","setVisual","kvObj","getItemVisual","itemVisual","hasItemVisual","ensureUniqueItemVisual","itemVisuals","setItemVisual","clearAllVisual","setLayout","name_1","getLayout","getItemLayout","setItemLayout","layout","merge","clearItemLayouts","setItemGraphicEl","el","ecData","dataType","seriesIndex","traverse","getItemGraphicEl","eachItemGraphicEl","context","cloneShallow","dimensionInfoList","wrapMethod","methodName","injectFunction","originalMethod","__wrappedMethods","res","concat","internalField","getDimValueSimply","objectRows","keyedColumns","original","typedArray","dimInfo","categories","chunk","DataCtor","oldStore","oldLen","newStore","j","console","error","excludeDimensions","allDimensions","originalStorage","indexOf","cloneChunk","originalChunk","child","childECData","thisECData","target","source","propName","clone","nameDimIdx","idDimIdx","nameRepeatCount","nmCnt"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/data/List.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/* global Float64Array, Int32Array, Uint32Array, Uint16Array */\n\n/**\n * List for data storage\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport Model from '../model/Model';\nimport DataDiffer from './DataDiffer';\nimport { DefaultDataProvider } from './helper/dataProvider';\nimport { summarizeDimensions } from './helper/dimensionHelper';\nimport DataDimensionInfo from './DataDimensionInfo';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../util/types';\nimport { isDataItemOption, convertOptionIdName } from '../util/model';\nimport { getECData } from '../util/innerStore';\nimport { parseDataValue } from './helper/dataValueHelper';\nimport { isSourceInstance } from './Source';\nvar mathFloor = Math.floor;\nvar isObject = zrUtil.isObject;\nvar map = zrUtil.map;\nvar UNDEFINED = 'undefined';\nvar INDEX_NOT_FOUND = -1; // Use prefix to avoid index to be the same as otherIdList[idx],\n// which will cause weird udpate animation.\n\nvar ID_PREFIX = 'e\\0\\0';\nvar dataCtors = {\n  'float': typeof Float64Array === UNDEFINED ? Array : Float64Array,\n  'int': typeof Int32Array === UNDEFINED ? Array : Int32Array,\n  // Ordinal data type can be string or int\n  'ordinal': Array,\n  'number': Array,\n  'time': Array\n}; // Caution: MUST not use `new CtorUint32Array(arr, 0, len)`, because the Ctor of array is\n// different from the Ctor of typed array.\n\nvar CtorUint32Array = typeof Uint32Array === UNDEFINED ? Array : Uint32Array;\nvar CtorInt32Array = typeof Int32Array === UNDEFINED ? Array : Int32Array;\nvar CtorUint16Array = typeof Uint16Array === UNDEFINED ? Array : Uint16Array;\nvar TRANSFERABLE_PROPERTIES = ['hasItemOption', '_nameList', '_idList', '_invertedIndicesMap', '_rawData', '_dimValueGetter', '_count', '_rawCount', '_nameDimIdx', '_idDimIdx', '_nameRepeatCount'];\nvar CLONE_PROPERTIES = ['_extent', '_approximateExtent', '_rawExtent']; // -----------------------------\n// Internal method declarations:\n// -----------------------------\n\nvar defaultDimValueGetters;\nvar prepareInvertedIndex;\nvar getIndicesCtor;\nvar prepareStorage;\nvar getRawIndexWithoutIndices;\nvar getRawIndexWithIndices;\nvar getId;\nvar getIdNameFromStore;\nvar makeIdFromName;\nvar normalizeDimensions;\nvar validateDimensions;\nvar cloneListForMapAndSample;\nvar getInitialExtent;\nvar setItemDataAndSeriesIndex;\nvar transferProperties;\n\nvar List =\n/** @class */\nfunction () {\n  /**\n   * @param dimensions\n   *        For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].\n   *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n   */\n  function List(dimensions, hostModel) {\n    this.type = 'list';\n    this._count = 0;\n    this._rawCount = 0;\n    this._storage = {}; // We have an extra array store here. It's faster to be acessed than KV structured `_storage`.\n    // We profile the code `storage[dim]` and it seems to be KeyedLoadIC_Megamorphic instead of fast property access.\n    // Not sure why this happens. But using an extra array seems leads to faster `initData`\n    // See https://github.com/apache/incubator-echarts/pull/13314 for more explanation.\n\n    this._storageArr = [];\n    this._nameList = [];\n    this._idList = []; // Models of data option is stored sparse for optimizing memory cost\n    // Never used yet (not used yet).\n    // private _optionModels: Model[] = [];\n    // Global visual properties after visual coding\n\n    this._visual = {}; // Globel layout properties.\n\n    this._layout = {}; // Item visual properties after visual coding\n\n    this._itemVisuals = []; // Item layout properties after layout\n\n    this._itemLayouts = []; // Graphic elemnents\n\n    this._graphicEls = []; // Raw extent will not be cloned, but only transfered.\n    // It will not be calculated util needed.\n\n    this._rawExtent = {};\n    this._extent = {}; // key: dim, value: extent\n\n    this._approximateExtent = {};\n    this._calculationInfo = {}; // Having detected that there is data item is non primitive type\n    // (in type `OptionDataItemObject`).\n    // Like `data: [ { value: xx, itemStyle: {...} }, ...]`\n    // At present it only happen in `SOURCE_FORMAT_ORIGINAL`.\n\n    this.hasItemOption = true; // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n\n    this.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'lttbDownSample', 'map']; // Methods that change indices of this list should be listed here.\n\n    this.CHANGABLE_METHODS = ['filterSelf', 'selectRange'];\n    this.DOWNSAMPLE_METHODS = ['downSample', 'lttbDownSample'];\n    /**\n     * Get raw data index.\n     * Do not initialize.\n     * Default `getRawIndex`. And it can be changed.\n     */\n\n    this.getRawIndex = getRawIndexWithoutIndices;\n    dimensions = dimensions || ['x', 'y'];\n    var dimensionInfos = {};\n    var dimensionNames = [];\n    var invertedIndicesMap = {};\n\n    for (var i = 0; i < dimensions.length; i++) {\n      // Use the original dimensions[i], where other flag props may exists.\n      var dimInfoInput = dimensions[i];\n      var dimensionInfo = zrUtil.isString(dimInfoInput) ? new DataDimensionInfo({\n        name: dimInfoInput\n      }) : !(dimInfoInput instanceof DataDimensionInfo) ? new DataDimensionInfo(dimInfoInput) : dimInfoInput;\n      var dimensionName = dimensionInfo.name;\n      dimensionInfo.type = dimensionInfo.type || 'float';\n\n      if (!dimensionInfo.coordDim) {\n        dimensionInfo.coordDim = dimensionName;\n        dimensionInfo.coordDimIndex = 0;\n      }\n\n      var otherDims = dimensionInfo.otherDims = dimensionInfo.otherDims || {};\n      dimensionNames.push(dimensionName);\n      dimensionInfos[dimensionName] = dimensionInfo;\n      dimensionInfo.index = i;\n\n      if (dimensionInfo.createInvertedIndices) {\n        invertedIndicesMap[dimensionName] = [];\n      }\n\n      if (otherDims.itemName === 0) {\n        this._nameDimIdx = i;\n        this._nameOrdinalMeta = dimensionInfo.ordinalMeta;\n      }\n\n      if (otherDims.itemId === 0) {\n        this._idDimIdx = i;\n        this._idOrdinalMeta = dimensionInfo.ordinalMeta;\n      }\n    }\n\n    this.dimensions = dimensionNames;\n    this._dimensionInfos = dimensionInfos;\n    this.hostModel = hostModel; // Cache summary info for fast visit. See \"dimensionHelper\".\n\n    this._dimensionsSummary = summarizeDimensions(this);\n    this._invertedIndicesMap = invertedIndicesMap;\n    this.userOutput = this._dimensionsSummary.userOutput;\n  }\n  /**\n   * The meanings of the input parameter `dim`:\n   *\n   * + If dim is a number (e.g., `1`), it means the index of the dimension.\n   *   For example, `getDimension(0)` will return 'x' or 'lng' or 'radius'.\n   * + If dim is a number-like string (e.g., `\"1\"`):\n   *     + If there is the same concrete dim name defined in `this.dimensions`, it means that concrete name.\n   *     + If not, it will be converted to a number, which means the index of the dimension.\n   *        (why? because of the backward compatbility. We have been tolerating number-like string in\n   *        dimension setting, although now it seems that it is not a good idea.)\n   *     For example, `visualMap[i].dimension: \"1\"` is the same meaning as `visualMap[i].dimension: 1`,\n   *     if no dimension name is defined as `\"1\"`.\n   * + If dim is a not-number-like string, it means the concrete dim name.\n   *   For example, it can be be default name `\"x\"`, `\"y\"`, `\"z\"`, `\"lng\"`, `\"lat\"`, `\"angle\"`, `\"radius\"`,\n   *   or customized in `dimensions` property of option like `\"age\"`.\n   *\n   * Get dimension name\n   * @param dim See above.\n   * @return Concrete dim name.\n   */\n\n\n  List.prototype.getDimension = function (dim) {\n    if (typeof dim === 'number' // If being a number-like string but not being defined a dimension name.\n    || !isNaN(dim) && !this._dimensionInfos.hasOwnProperty(dim)) {\n      dim = this.dimensions[dim];\n    }\n\n    return dim;\n  };\n  /**\n   * Get type and calculation info of particular dimension\n   * @param dim\n   *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n   *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n   */\n\n\n  List.prototype.getDimensionInfo = function (dim) {\n    // Do not clone, because there may be categories in dimInfo.\n    return this._dimensionInfos[this.getDimension(dim)];\n  };\n  /**\n   * concrete dimension name list on coord.\n   */\n\n\n  List.prototype.getDimensionsOnCoord = function () {\n    return this._dimensionsSummary.dataDimsOnCoord.slice();\n  };\n\n  List.prototype.mapDimension = function (coordDim, idx) {\n    var dimensionsSummary = this._dimensionsSummary;\n\n    if (idx == null) {\n      return dimensionsSummary.encodeFirstDimNotExtra[coordDim];\n    }\n\n    var dims = dimensionsSummary.encode[coordDim];\n    return dims ? dims[idx] : null;\n  };\n\n  List.prototype.mapDimensionsAll = function (coordDim) {\n    var dimensionsSummary = this._dimensionsSummary;\n    var dims = dimensionsSummary.encode[coordDim];\n    return (dims || []).slice();\n  };\n  /**\n   * Initialize from data\n   * @param data source or data or data provider.\n   * @param nameList The name of a datum is used on data diff and\n   *        default label/tooltip.\n   *        A name can be specified in encode.itemName,\n   *        or dataItem.name (only for series option data),\n   *        or provided in nameList from outside.\n   */\n\n\n  List.prototype.initData = function (data, nameList, dimValueGetter) {\n    var notProvider = isSourceInstance(data) || zrUtil.isArrayLike(data);\n    var provider = notProvider ? new DefaultDataProvider(data, this.dimensions.length) : data;\n\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(notProvider || zrUtil.isFunction(provider.getItem) && zrUtil.isFunction(provider.count), 'Inavlid data provider.');\n    }\n\n    this._rawData = provider;\n    var sourceFormat = provider.getSource().sourceFormat; // Clear\n\n    this._storage = {};\n    this._indices = null;\n    this._dontMakeIdFromName = this._idDimIdx != null || sourceFormat === SOURCE_FORMAT_TYPED_ARRAY // Cosndier performance.\n    || !!provider.fillStorage;\n    this._nameList = (nameList || []).slice();\n    this._idList = [];\n    this._nameRepeatCount = {};\n\n    if (!dimValueGetter) {\n      this.hasItemOption = false;\n    }\n\n    this.defaultDimValueGetter = defaultDimValueGetters[sourceFormat]; // Default dim value getter\n\n    this._dimValueGetter = dimValueGetter = dimValueGetter || this.defaultDimValueGetter;\n    this._dimValueGetterArrayRows = defaultDimValueGetters.arrayRows; // Reset raw extent.\n\n    this._rawExtent = {};\n\n    this._initDataFromProvider(0, provider.count()); // If data has no item option.\n\n\n    if (provider.pure) {\n      this.hasItemOption = false;\n    }\n  };\n\n  List.prototype.getProvider = function () {\n    return this._rawData;\n  };\n  /**\n   * Caution: Can be only called on raw data (before `this._indices` created).\n   */\n\n\n  List.prototype.appendData = function (data) {\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(!this._indices, 'appendData can only be called on raw data.');\n    }\n\n    var rawData = this._rawData;\n    var start = this.count();\n    rawData.appendData(data);\n    var end = rawData.count();\n\n    if (!rawData.persistent) {\n      end += start;\n    }\n\n    this._initDataFromProvider(start, end, true);\n  };\n  /**\n   * Caution: Can be only called on raw data (before `this._indices` created).\n   * This method does not modify `rawData` (`dataProvider`), but only\n   * add values to storage.\n   *\n   * The final count will be increased by `Math.max(values.length, names.length)`.\n   *\n   * @param values That is the SourceType: 'arrayRows', like\n   *        [\n   *            [12, 33, 44],\n   *            [NaN, 43, 1],\n   *            ['-', 'asdf', 0]\n   *        ]\n   *        Each item is exaclty cooresponding to a dimension.\n   */\n\n\n  List.prototype.appendValues = function (values, names) {\n    var storage = this._storage;\n    var dimensions = this.dimensions;\n    var dimLen = dimensions.length;\n    var rawExtent = this._rawExtent;\n    var start = this.count();\n    var end = start + Math.max(values.length, names ? names.length : 0);\n\n    for (var i = 0; i < dimLen; i++) {\n      var dim = dimensions[i];\n\n      if (!rawExtent[dim]) {\n        rawExtent[dim] = getInitialExtent();\n      }\n\n      prepareStorage(storage, this._dimensionInfos[dim], end, true);\n    }\n\n    var rawExtentArr = map(dimensions, function (dim) {\n      return rawExtent[dim];\n    });\n    var storageArr = this._storageArr = map(dimensions, function (dim) {\n      return storage[dim];\n    });\n    var emptyDataItem = [];\n\n    for (var idx = start; idx < end; idx++) {\n      var sourceIdx = idx - start; // Store the data by dimensions\n\n      for (var dimIdx = 0; dimIdx < dimLen; dimIdx++) {\n        var dim = dimensions[dimIdx];\n\n        var val = this._dimValueGetterArrayRows(values[sourceIdx] || emptyDataItem, dim, sourceIdx, dimIdx);\n\n        storageArr[dimIdx][idx] = val;\n        var dimRawExtent = rawExtentArr[dimIdx];\n        val < dimRawExtent[0] && (dimRawExtent[0] = val);\n        val > dimRawExtent[1] && (dimRawExtent[1] = val);\n      }\n\n      if (names) {\n        this._nameList[idx] = names[sourceIdx];\n\n        if (!this._dontMakeIdFromName) {\n          makeIdFromName(this, idx);\n        }\n      }\n    }\n\n    this._rawCount = this._count = end; // Reset data extent\n\n    this._extent = {};\n    prepareInvertedIndex(this);\n  };\n\n  List.prototype._initDataFromProvider = function (start, end, append) {\n    if (start >= end) {\n      return;\n    }\n\n    var rawData = this._rawData;\n    var storage = this._storage;\n    var dimensions = this.dimensions;\n    var dimLen = dimensions.length;\n    var dimensionInfoMap = this._dimensionInfos;\n    var nameList = this._nameList;\n    var idList = this._idList;\n    var rawExtent = this._rawExtent;\n    var sourceFormat = rawData.getSource().sourceFormat;\n    var isFormatOriginal = sourceFormat === SOURCE_FORMAT_ORIGINAL;\n\n    for (var i = 0; i < dimLen; i++) {\n      var dim = dimensions[i];\n\n      if (!rawExtent[dim]) {\n        rawExtent[dim] = getInitialExtent();\n      }\n\n      prepareStorage(storage, dimensionInfoMap[dim], end, append);\n    }\n\n    var storageArr = this._storageArr = map(dimensions, function (dim) {\n      return storage[dim];\n    });\n    var rawExtentArr = map(dimensions, function (dim) {\n      return rawExtent[dim];\n    });\n\n    if (rawData.fillStorage) {\n      rawData.fillStorage(start, end, storageArr, rawExtentArr);\n    } else {\n      var dataItem = [];\n\n      for (var idx = start; idx < end; idx++) {\n        // NOTICE: Try not to write things into dataItem\n        dataItem = rawData.getItem(idx, dataItem); // Each data item is value\n        // [1, 2]\n        // 2\n        // Bar chart, line chart which uses category axis\n        // only gives the 'y' value. 'x' value is the indices of category\n        // Use a tempValue to normalize the value to be a (x, y) value\n        // Store the data by dimensions\n\n        for (var dimIdx = 0; dimIdx < dimLen; dimIdx++) {\n          var dim = dimensions[dimIdx];\n          var dimStorage = storageArr[dimIdx]; // PENDING NULL is empty or zero\n\n          var val = this._dimValueGetter(dataItem, dim, idx, dimIdx);\n\n          dimStorage[idx] = val;\n          var dimRawExtent = rawExtentArr[dimIdx];\n          val < dimRawExtent[0] && (dimRawExtent[0] = val);\n          val > dimRawExtent[1] && (dimRawExtent[1] = val);\n        } // If dataItem is {name: ...} or {id: ...}, it has highest priority.\n        // This kind of ids and names are always stored `_nameList` and `_idList`.\n\n\n        if (isFormatOriginal && !rawData.pure && dataItem) {\n          var itemName = dataItem.name;\n\n          if (nameList[idx] == null && itemName != null) {\n            nameList[idx] = convertOptionIdName(itemName, null);\n          }\n\n          var itemId = dataItem.id;\n\n          if (idList[idx] == null && itemId != null) {\n            idList[idx] = convertOptionIdName(itemId, null);\n          }\n        }\n\n        if (!this._dontMakeIdFromName) {\n          makeIdFromName(this, idx);\n        }\n      }\n    }\n\n    if (!rawData.persistent && rawData.clean) {\n      // Clean unused data if data source is typed array.\n      rawData.clean();\n    }\n\n    this._rawCount = this._count = end; // Reset data extent\n\n    this._extent = {};\n    prepareInvertedIndex(this);\n  };\n\n  List.prototype.count = function () {\n    return this._count;\n  };\n\n  List.prototype.getIndices = function () {\n    var newIndices;\n    var indices = this._indices;\n\n    if (indices) {\n      var Ctor = indices.constructor;\n      var thisCount = this._count; // `new Array(a, b, c)` is different from `new Uint32Array(a, b, c)`.\n\n      if (Ctor === Array) {\n        newIndices = new Ctor(thisCount);\n\n        for (var i = 0; i < thisCount; i++) {\n          newIndices[i] = indices[i];\n        }\n      } else {\n        newIndices = new Ctor(indices.buffer, 0, thisCount);\n      }\n    } else {\n      var Ctor = getIndicesCtor(this);\n      newIndices = new Ctor(this.count());\n\n      for (var i = 0; i < newIndices.length; i++) {\n        newIndices[i] = i;\n      }\n    }\n\n    return newIndices;\n  }; // Get data by index of dimension.\n  // Because in v8 access array by number variable is faster than access object by string variable\n  // Not sure why but the optimization just works.\n\n\n  List.prototype.getByDimIdx = function (dimIdx, idx) {\n    if (!(idx >= 0 && idx < this._count)) {\n      return NaN;\n    }\n\n    var dimStore = this._storageArr[dimIdx];\n    return dimStore ? dimStore[this.getRawIndex(idx)] : NaN;\n  };\n  /**\n   * Get value. Return NaN if idx is out of range.\n   * @param dim Dim must be concrete name.\n   */\n\n\n  List.prototype.get = function (dim, idx) {\n    if (!(idx >= 0 && idx < this._count)) {\n      return NaN;\n    }\n\n    var dimStore = this._storage[dim];\n    return dimStore ? dimStore[this.getRawIndex(idx)] : NaN;\n  };\n  /**\n   * @param dim concrete dim\n   */\n\n\n  List.prototype.getByRawIndex = function (dim, rawIdx) {\n    if (!(rawIdx >= 0 && rawIdx < this._rawCount)) {\n      return NaN;\n    }\n\n    var dimStore = this._storage[dim];\n    return dimStore ? dimStore[rawIdx] : NaN;\n  };\n\n  List.prototype.getValues = function (dimensions, idx) {\n    var values = [];\n\n    if (!zrUtil.isArray(dimensions)) {\n      // stack = idx;\n      idx = dimensions;\n      dimensions = this.dimensions;\n    }\n\n    for (var i = 0, len = dimensions.length; i < len; i++) {\n      values.push(this.get(dimensions[i], idx\n      /*, stack */\n      ));\n    }\n\n    return values;\n  };\n  /**\n   * If value is NaN. Inlcuding '-'\n   * Only check the coord dimensions.\n   */\n\n\n  List.prototype.hasValue = function (idx) {\n    var dataDimsOnCoord = this._dimensionsSummary.dataDimsOnCoord;\n\n    for (var i = 0, len = dataDimsOnCoord.length; i < len; i++) {\n      // Ordinal type originally can be string or number.\n      // But when an ordinal type is used on coord, it can\n      // not be string but only number. So we can also use isNaN.\n      if (isNaN(this.get(dataDimsOnCoord[i], idx))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Get extent of data in one dimension\n   */\n\n\n  List.prototype.getDataExtent = function (dim) {\n    // Make sure use concrete dim as cache name.\n    dim = this.getDimension(dim);\n    var dimData = this._storage[dim];\n    var initialExtent = getInitialExtent(); // stack = !!((stack || false) && this.getCalculationInfo(dim));\n\n    if (!dimData) {\n      return initialExtent;\n    } // Make more strict checkings to ensure hitting cache.\n\n\n    var currEnd = this.count(); // let cacheName = [dim, !!stack].join('_');\n    // let cacheName = dim;\n    // Consider the most cases when using data zoom, `getDataExtent`\n    // happened before filtering. We cache raw extent, which is not\n    // necessary to be cleared and recalculated when restore data.\n\n    var useRaw = !this._indices; // && !stack;\n\n    var dimExtent;\n\n    if (useRaw) {\n      return this._rawExtent[dim].slice();\n    }\n\n    dimExtent = this._extent[dim];\n\n    if (dimExtent) {\n      return dimExtent.slice();\n    }\n\n    dimExtent = initialExtent;\n    var min = dimExtent[0];\n    var max = dimExtent[1];\n\n    for (var i = 0; i < currEnd; i++) {\n      var rawIdx = this.getRawIndex(i);\n      var value = dimData[rawIdx];\n      value < min && (min = value);\n      value > max && (max = value);\n    }\n\n    dimExtent = [min, max];\n    this._extent[dim] = dimExtent;\n    return dimExtent;\n  };\n  /**\n   * PENDING: In fact currently this function is only used to short-circuit\n   * the calling of `scale.unionExtentFromData` when data have been filtered by modules\n   * like \"dataZoom\". `scale.unionExtentFromData` is used to calculate data extent for series on\n   * an axis, but if a \"axis related data filter module\" is used, the extent of the axis have\n   * been fixed and no need to calling `scale.unionExtentFromData` actually.\n   * But if we add \"custom data filter\" in future, which is not \"axis related\", this method may\n   * be still needed.\n   *\n   * Optimize for the scenario that data is filtered by a given extent.\n   * Consider that if data amount is more than hundreds of thousand,\n   * extent calculation will cost more than 10ms and the cache will\n   * be erased because of the filtering.\n   */\n\n\n  List.prototype.getApproximateExtent = function (dim) {\n    dim = this.getDimension(dim);\n    return this._approximateExtent[dim] || this.getDataExtent(dim);\n  };\n  /**\n   * Calculate extent on a filtered data might be time consuming.\n   * Approximate extent is only used for: calculte extent of filtered data outside.\n   */\n\n\n  List.prototype.setApproximateExtent = function (extent, dim) {\n    dim = this.getDimension(dim);\n    this._approximateExtent[dim] = extent.slice();\n  };\n\n  List.prototype.getCalculationInfo = function (key) {\n    return this._calculationInfo[key];\n  };\n\n  List.prototype.setCalculationInfo = function (key, value) {\n    isObject(key) ? zrUtil.extend(this._calculationInfo, key) : this._calculationInfo[key] = value;\n  };\n  /**\n   * Get sum of data in one dimension\n   */\n\n\n  List.prototype.getSum = function (dim) {\n    var dimData = this._storage[dim];\n    var sum = 0;\n\n    if (dimData) {\n      for (var i = 0, len = this.count(); i < len; i++) {\n        var value = this.get(dim, i);\n\n        if (!isNaN(value)) {\n          sum += value;\n        }\n      }\n    }\n\n    return sum;\n  };\n  /**\n   * Get median of data in one dimension\n   */\n\n\n  List.prototype.getMedian = function (dim) {\n    var dimDataArray = []; // map all data of one dimension\n\n    this.each(dim, function (val) {\n      if (!isNaN(val)) {\n        dimDataArray.push(val);\n      }\n    }); // TODO\n    // Use quick select?\n\n    var sortedDimDataArray = dimDataArray.sort(function (a, b) {\n      return a - b;\n    });\n    var len = this.count(); // calculate median\n\n    return len === 0 ? 0 : len % 2 === 1 ? sortedDimDataArray[(len - 1) / 2] : (sortedDimDataArray[len / 2] + sortedDimDataArray[len / 2 - 1]) / 2;\n  }; // /**\n  //  * Retreive the index with given value\n  //  * @param {string} dim Concrete dimension.\n  //  * @param {number} value\n  //  * @return {number}\n  //  */\n  // Currently incorrect: should return dataIndex but not rawIndex.\n  // Do not fix it until this method is to be used somewhere.\n  // FIXME Precision of float value\n  // indexOf(dim, value) {\n  //     let storage = this._storage;\n  //     let dimData = storage[dim];\n  //     let chunkSize = this._chunkSize;\n  //     if (dimData) {\n  //         for (let i = 0, len = this.count(); i < len; i++) {\n  //             let chunkIndex = mathFloor(i / chunkSize);\n  //             let chunkOffset = i % chunkSize;\n  //             if (dimData[chunkIndex][chunkOffset] === value) {\n  //                 return i;\n  //             }\n  //         }\n  //     }\n  //     return -1;\n  // }\n\n  /**\n   * Only support the dimension which inverted index created.\n   * Do not support other cases until required.\n   * @param dim concrete dim\n   * @param value ordinal index\n   * @return rawIndex\n   */\n\n\n  List.prototype.rawIndexOf = function (dim, value) {\n    var invertedIndices = dim && this._invertedIndicesMap[dim];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!invertedIndices) {\n        throw new Error('Do not supported yet');\n      }\n    }\n\n    var rawIndex = invertedIndices[value];\n\n    if (rawIndex == null || isNaN(rawIndex)) {\n      return INDEX_NOT_FOUND;\n    }\n\n    return rawIndex;\n  };\n  /**\n   * Retreive the index with given name\n   */\n\n\n  List.prototype.indexOfName = function (name) {\n    for (var i = 0, len = this.count(); i < len; i++) {\n      if (this.getName(i) === name) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * Retreive the index with given raw data index\n   */\n\n\n  List.prototype.indexOfRawIndex = function (rawIndex) {\n    if (rawIndex >= this._rawCount || rawIndex < 0) {\n      return -1;\n    }\n\n    if (!this._indices) {\n      return rawIndex;\n    } // Indices are ascending\n\n\n    var indices = this._indices; // If rawIndex === dataIndex\n\n    var rawDataIndex = indices[rawIndex];\n\n    if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) {\n      return rawIndex;\n    }\n\n    var left = 0;\n    var right = this._count - 1;\n\n    while (left <= right) {\n      var mid = (left + right) / 2 | 0;\n\n      if (indices[mid] < rawIndex) {\n        left = mid + 1;\n      } else if (indices[mid] > rawIndex) {\n        right = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * Retreive the index of nearest value\n   * @param dim\n   * @param value\n   * @param [maxDistance=Infinity]\n   * @return If and only if multiple indices has\n   *         the same value, they are put to the result.\n   */\n\n\n  List.prototype.indicesOfNearest = function (dim, value, maxDistance) {\n    var storage = this._storage;\n    var dimData = storage[dim];\n    var nearestIndices = [];\n\n    if (!dimData) {\n      return nearestIndices;\n    }\n\n    if (maxDistance == null) {\n      maxDistance = Infinity;\n    }\n\n    var minDist = Infinity;\n    var minDiff = -1;\n    var nearestIndicesLen = 0; // Check the test case of `test/ut/spec/data/List.js`.\n\n    for (var i = 0, len = this.count(); i < len; i++) {\n      var dataIndex = this.getRawIndex(i);\n      var diff = value - dimData[dataIndex];\n      var dist = Math.abs(diff);\n\n      if (dist <= maxDistance) {\n        // When the `value` is at the middle of `this.get(dim, i)` and `this.get(dim, i+1)`,\n        // we'd better not push both of them to `nearestIndices`, otherwise it is easy to\n        // get more than one item in `nearestIndices` (more specifically, in `tooltip`).\n        // So we chose the one that `diff >= 0` in this csae.\n        // But if `this.get(dim, i)` and `this.get(dim, j)` get the same value, both of them\n        // should be push to `nearestIndices`.\n        if (dist < minDist || dist === minDist && diff >= 0 && minDiff < 0) {\n          minDist = dist;\n          minDiff = diff;\n          nearestIndicesLen = 0;\n        }\n\n        if (diff === minDiff) {\n          nearestIndices[nearestIndicesLen++] = i;\n        }\n      }\n    }\n\n    nearestIndices.length = nearestIndicesLen;\n    return nearestIndices;\n  };\n  /**\n   * Get raw data item\n   */\n\n\n  List.prototype.getRawDataItem = function (idx) {\n    if (!this._rawData.persistent) {\n      var val = [];\n\n      for (var i = 0; i < this.dimensions.length; i++) {\n        var dim = this.dimensions[i];\n        val.push(this.get(dim, idx));\n      }\n\n      return val;\n    } else {\n      return this._rawData.getItem(this.getRawIndex(idx));\n    }\n  };\n  /**\n   * @return Never be null/undefined. `number` will be converted to string. Becuase:\n   * In most cases, name is used in display, where returning a string is more convenient.\n   * In other cases, name is used in query (see `indexOfName`), where we can keep the\n   * rule that name `2` equals to name `'2'`.\n   */\n\n\n  List.prototype.getName = function (idx) {\n    var rawIndex = this.getRawIndex(idx);\n    var name = this._nameList[rawIndex];\n\n    if (name == null && this._nameDimIdx != null) {\n      name = getIdNameFromStore(this, this._nameDimIdx, this._nameOrdinalMeta, rawIndex);\n    }\n\n    if (name == null) {\n      name = '';\n    }\n\n    return name;\n  };\n  /**\n   * @return Never null/undefined. `number` will be converted to string. Becuase:\n   * In all cases having encountered at present, id is used in making diff comparison, which\n   * are usually based on hash map. We can keep the rule that the internal id are always string\n   * (treat `2` is the same as `'2'`) to make the related logic simple.\n   */\n\n\n  List.prototype.getId = function (idx) {\n    return getId(this, this.getRawIndex(idx));\n  };\n\n  List.prototype.each = function (dims, cb, ctx, ctxCompat) {\n    'use strict';\n\n    var _this = this;\n\n    if (!this._count) {\n      return;\n    }\n\n    if (typeof dims === 'function') {\n      ctxCompat = ctx;\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n\n    var fCtx = ctx || ctxCompat || this;\n    var dimNames = map(normalizeDimensions(dims), this.getDimension, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimNames);\n    }\n\n    var dimSize = dimNames.length;\n    var dimIndices = map(dimNames, function (dimName) {\n      return _this._dimensionInfos[dimName].index;\n    });\n    var storageArr = this._storageArr;\n\n    for (var i = 0, len = this.count(); i < len; i++) {\n      var rawIdx = this.getRawIndex(i); // Simple optimization\n\n      switch (dimSize) {\n        case 0:\n          cb.call(fCtx, i);\n          break;\n\n        case 1:\n          cb.call(fCtx, storageArr[dimIndices[0]][rawIdx], i);\n          break;\n\n        case 2:\n          cb.call(fCtx, storageArr[dimIndices[0]][rawIdx], storageArr[dimIndices[1]][rawIdx], i);\n          break;\n\n        default:\n          var k = 0;\n          var value = [];\n\n          for (; k < dimSize; k++) {\n            value[k] = storageArr[dimIndices[k]][rawIdx];\n          } // Index\n\n\n          value[k] = i;\n          cb.apply(fCtx, value);\n      }\n    }\n  };\n\n  List.prototype.filterSelf = function (dims, cb, ctx, ctxCompat) {\n    'use strict';\n\n    var _this = this;\n\n    if (!this._count) {\n      return;\n    }\n\n    if (typeof dims === 'function') {\n      ctxCompat = ctx;\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n\n    var fCtx = ctx || ctxCompat || this;\n    var dimNames = map(normalizeDimensions(dims), this.getDimension, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimNames);\n    }\n\n    var count = this.count();\n    var Ctor = getIndicesCtor(this);\n    var newIndices = new Ctor(count);\n    var value = [];\n    var dimSize = dimNames.length;\n    var offset = 0;\n    var dimIndices = map(dimNames, function (dimName) {\n      return _this._dimensionInfos[dimName].index;\n    });\n    var dim0 = dimIndices[0];\n    var storageArr = this._storageArr;\n\n    for (var i = 0; i < count; i++) {\n      var keep = void 0;\n      var rawIdx = this.getRawIndex(i); // Simple optimization\n\n      if (dimSize === 0) {\n        keep = cb.call(fCtx, i);\n      } else if (dimSize === 1) {\n        var val = storageArr[dim0][rawIdx];\n        keep = cb.call(fCtx, val, i);\n      } else {\n        var k = 0;\n\n        for (; k < dimSize; k++) {\n          value[k] = storageArr[dimIndices[k]][rawIdx];\n        }\n\n        value[k] = i;\n        keep = cb.apply(fCtx, value);\n      }\n\n      if (keep) {\n        newIndices[offset++] = rawIdx;\n      }\n    } // Set indices after filtered.\n\n\n    if (offset < count) {\n      this._indices = newIndices;\n    }\n\n    this._count = offset; // Reset data extent\n\n    this._extent = {};\n    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    return this;\n  };\n  /**\n   * Select data in range. (For optimization of filter)\n   * (Manually inline code, support 5 million data filtering in data zoom.)\n   */\n\n\n  List.prototype.selectRange = function (range) {\n    'use strict';\n\n    var _this = this;\n\n    var len = this._count;\n\n    if (!len) {\n      return;\n    }\n\n    var dimensions = [];\n\n    for (var dim in range) {\n      if (range.hasOwnProperty(dim)) {\n        dimensions.push(dim);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimensions);\n    }\n\n    var dimSize = dimensions.length;\n\n    if (!dimSize) {\n      return;\n    }\n\n    var originalCount = this.count();\n    var Ctor = getIndicesCtor(this);\n    var newIndices = new Ctor(originalCount);\n    var offset = 0;\n    var dim0 = dimensions[0];\n    var dimIndices = map(dimensions, function (dimName) {\n      return _this._dimensionInfos[dimName].index;\n    });\n    var min = range[dim0][0];\n    var max = range[dim0][1];\n    var storageArr = this._storageArr;\n    var quickFinished = false;\n\n    if (!this._indices) {\n      // Extreme optimization for common case. About 2x faster in chrome.\n      var idx = 0;\n\n      if (dimSize === 1) {\n        var dimStorage = storageArr[dimIndices[0]];\n\n        for (var i = 0; i < len; i++) {\n          var val = dimStorage[i]; // NaN will not be filtered. Consider the case, in line chart, empty\n          // value indicates the line should be broken. But for the case like\n          // scatter plot, a data item with empty value will not be rendered,\n          // but the axis extent may be effected if some other dim of the data\n          // item has value. Fortunately it is not a significant negative effect.\n\n          if (val >= min && val <= max || isNaN(val)) {\n            newIndices[offset++] = idx;\n          }\n\n          idx++;\n        }\n\n        quickFinished = true;\n      } else if (dimSize === 2) {\n        var dimStorage = storageArr[dimIndices[0]];\n        var dimStorage2 = storageArr[dimIndices[1]];\n        var min2 = range[dimensions[1]][0];\n        var max2 = range[dimensions[1]][1];\n\n        for (var i = 0; i < len; i++) {\n          var val = dimStorage[i];\n          var val2 = dimStorage2[i]; // Do not filter NaN, see comment above.\n\n          if ((val >= min && val <= max || isNaN(val)) && (val2 >= min2 && val2 <= max2 || isNaN(val2))) {\n            newIndices[offset++] = idx;\n          }\n\n          idx++;\n        }\n\n        quickFinished = true;\n      }\n    }\n\n    if (!quickFinished) {\n      if (dimSize === 1) {\n        for (var i = 0; i < originalCount; i++) {\n          var rawIndex = this.getRawIndex(i);\n          var val = storageArr[dimIndices[0]][rawIndex]; // Do not filter NaN, see comment above.\n\n          if (val >= min && val <= max || isNaN(val)) {\n            newIndices[offset++] = rawIndex;\n          }\n        }\n      } else {\n        for (var i = 0; i < originalCount; i++) {\n          var keep = true;\n          var rawIndex = this.getRawIndex(i);\n\n          for (var k = 0; k < dimSize; k++) {\n            var dimk = dimensions[k];\n            var val = storageArr[dimIndices[k]][rawIndex]; // Do not filter NaN, see comment above.\n\n            if (val < range[dimk][0] || val > range[dimk][1]) {\n              keep = false;\n            }\n          }\n\n          if (keep) {\n            newIndices[offset++] = this.getRawIndex(i);\n          }\n        }\n      }\n    } // Set indices after filtered.\n\n\n    if (offset < originalCount) {\n      this._indices = newIndices;\n    }\n\n    this._count = offset; // Reset data extent\n\n    this._extent = {};\n    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    return this;\n  };\n  /* eslint-enable */\n\n\n  List.prototype.mapArray = function (dims, cb, ctx, ctxCompat) {\n    'use strict';\n\n    if (typeof dims === 'function') {\n      ctxCompat = ctx;\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n\n    ctx = ctx || ctxCompat || this;\n    var result = [];\n    this.each(dims, function () {\n      result.push(cb && cb.apply(this, arguments));\n    }, ctx);\n    return result;\n  };\n\n  List.prototype.map = function (dims, cb, ctx, ctxCompat) {\n    'use strict'; // ctxCompat just for compat echarts3\n\n    var fCtx = ctx || ctxCompat || this;\n    var dimNames = map(normalizeDimensions(dims), this.getDimension, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateDimensions(this, dimNames);\n    }\n\n    var list = cloneListForMapAndSample(this, dimNames);\n    var storage = list._storage; // Following properties are all immutable.\n    // So we can reference to the same value\n\n    list._indices = this._indices;\n    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    var tmpRetValue = [];\n    var dimSize = dimNames.length;\n    var dataCount = this.count();\n    var values = [];\n    var rawExtent = list._rawExtent;\n\n    for (var dataIndex = 0; dataIndex < dataCount; dataIndex++) {\n      for (var dimIndex = 0; dimIndex < dimSize; dimIndex++) {\n        values[dimIndex] = this.get(dimNames[dimIndex], dataIndex);\n      }\n\n      values[dimSize] = dataIndex;\n      var retValue = cb && cb.apply(fCtx, values);\n\n      if (retValue != null) {\n        // a number or string (in oridinal dimension)?\n        if (typeof retValue !== 'object') {\n          tmpRetValue[0] = retValue;\n          retValue = tmpRetValue;\n        }\n\n        var rawIndex = this.getRawIndex(dataIndex);\n\n        for (var i = 0; i < retValue.length; i++) {\n          var dim = dimNames[i];\n          var val = retValue[i];\n          var rawExtentOnDim = rawExtent[dim];\n          var dimStore = storage[dim];\n\n          if (dimStore) {\n            dimStore[rawIndex] = val;\n          }\n\n          if (val < rawExtentOnDim[0]) {\n            rawExtentOnDim[0] = val;\n          }\n\n          if (val > rawExtentOnDim[1]) {\n            rawExtentOnDim[1] = val;\n          }\n        }\n      }\n    }\n\n    return list;\n  };\n  /**\n   * Large data down sampling on given dimension\n   * @param sampleIndex Sample index for name and id\n   */\n\n\n  List.prototype.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n    var list = cloneListForMapAndSample(this, [dimension]);\n    var targetStorage = list._storage;\n    var frameValues = [];\n    var frameSize = mathFloor(1 / rate);\n    var dimStore = targetStorage[dimension];\n    var len = this.count();\n    var rawExtentOnDim = list._rawExtent[dimension];\n    var newIndices = new (getIndicesCtor(this))(len);\n    var offset = 0;\n\n    for (var i = 0; i < len; i += frameSize) {\n      // Last frame\n      if (frameSize > len - i) {\n        frameSize = len - i;\n        frameValues.length = frameSize;\n      }\n\n      for (var k = 0; k < frameSize; k++) {\n        var dataIdx = this.getRawIndex(i + k);\n        frameValues[k] = dimStore[dataIdx];\n      }\n\n      var value = sampleValue(frameValues);\n      var sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len - 1)); // Only write value on the filtered data\n\n      dimStore[sampleFrameIdx] = value;\n\n      if (value < rawExtentOnDim[0]) {\n        rawExtentOnDim[0] = value;\n      }\n\n      if (value > rawExtentOnDim[1]) {\n        rawExtentOnDim[1] = value;\n      }\n\n      newIndices[offset++] = sampleFrameIdx;\n    }\n\n    list._count = offset;\n    list._indices = newIndices;\n    list.getRawIndex = getRawIndexWithIndices;\n    return list;\n  };\n  /**\n   * Large data down sampling using largest-triangle-three-buckets\n   * @param {string} valueDimension\n   * @param {number} targetCount\n   */\n\n\n  List.prototype.lttbDownSample = function (valueDimension, rate) {\n    var list = cloneListForMapAndSample(this, []);\n    var targetStorage = list._storage;\n    var dimStore = targetStorage[valueDimension];\n    var len = this.count();\n    var newIndices = new (getIndicesCtor(this))(len);\n    var sampledIndex = 0;\n    var frameSize = mathFloor(1 / rate);\n    var currentRawIndex = this.getRawIndex(0);\n    var maxArea;\n    var area;\n    var nextRawIndex; // First frame use the first data.\n\n    newIndices[sampledIndex++] = currentRawIndex;\n\n    for (var i = 1; i < len - 1; i += frameSize) {\n      var nextFrameStart = Math.min(i + frameSize, len - 1);\n      var nextFrameEnd = Math.min(i + frameSize * 2, len);\n      var avgX = (nextFrameEnd + nextFrameStart) / 2;\n      var avgY = 0;\n\n      for (var idx = nextFrameStart; idx < nextFrameEnd; idx++) {\n        var rawIndex = this.getRawIndex(idx);\n        var y = dimStore[rawIndex];\n\n        if (isNaN(y)) {\n          continue;\n        }\n\n        avgY += y;\n      }\n\n      avgY /= nextFrameEnd - nextFrameStart;\n      var frameStart = i;\n      var frameEnd = Math.min(i + frameSize, len);\n      var pointAX = i - 1;\n      var pointAY = dimStore[currentRawIndex];\n      maxArea = -1;\n      nextRawIndex = frameStart; // Find a point from current frame that construct a triangel with largest area with previous selected point\n      // And the average of next frame.\n\n      for (var idx = frameStart; idx < frameEnd; idx++) {\n        var rawIndex = this.getRawIndex(idx);\n        var y = dimStore[rawIndex];\n\n        if (isNaN(y)) {\n          continue;\n        } // Calculate triangle area over three buckets\n\n\n        area = Math.abs((pointAX - avgX) * (y - pointAY) - (pointAX - idx) * (avgY - pointAY));\n\n        if (area > maxArea) {\n          maxArea = area;\n          nextRawIndex = rawIndex; // Next a is this b\n        }\n      }\n\n      newIndices[sampledIndex++] = nextRawIndex;\n      currentRawIndex = nextRawIndex; // This a is the next a (chosen b)\n    } // First frame use the last data.\n\n\n    newIndices[sampledIndex++] = this.getRawIndex(len - 1);\n    list._count = sampledIndex;\n    list._indices = newIndices;\n    list.getRawIndex = getRawIndexWithIndices;\n    return list;\n  };\n  /**\n   * Get model of one data item.\n   */\n  // TODO: Type of data item\n\n\n  List.prototype.getItemModel = function (idx) {\n    var hostModel = this.hostModel;\n    var dataItem = this.getRawDataItem(idx);\n    return new Model(dataItem, hostModel, hostModel && hostModel.ecModel);\n  };\n  /**\n   * Create a data differ\n   */\n\n\n  List.prototype.diff = function (otherList) {\n    var thisList = this;\n    return new DataDiffer(otherList ? otherList.getIndices() : [], this.getIndices(), function (idx) {\n      return getId(otherList, idx);\n    }, function (idx) {\n      return getId(thisList, idx);\n    });\n  };\n  /**\n   * Get visual property.\n   */\n\n\n  List.prototype.getVisual = function (key) {\n    var visual = this._visual;\n    return visual && visual[key];\n  };\n\n  List.prototype.setVisual = function (kvObj, val) {\n    this._visual = this._visual || {};\n\n    if (isObject(kvObj)) {\n      zrUtil.extend(this._visual, kvObj);\n    } else {\n      this._visual[kvObj] = val;\n    }\n  };\n  /**\n   * Get visual property of single data item\n   */\n  // eslint-disable-next-line\n\n\n  List.prototype.getItemVisual = function (idx, key) {\n    var itemVisual = this._itemVisuals[idx];\n    var val = itemVisual && itemVisual[key];\n\n    if (val == null) {\n      // Use global visual property\n      return this.getVisual(key);\n    }\n\n    return val;\n  };\n  /**\n   * If exists visual property of single data item\n   */\n\n\n  List.prototype.hasItemVisual = function () {\n    return this._itemVisuals.length > 0;\n  };\n  /**\n   * Make sure itemVisual property is unique\n   */\n  // TODO: use key to save visual to reduce memory.\n\n\n  List.prototype.ensureUniqueItemVisual = function (idx, key) {\n    var itemVisuals = this._itemVisuals;\n    var itemVisual = itemVisuals[idx];\n\n    if (!itemVisual) {\n      itemVisual = itemVisuals[idx] = {};\n    }\n\n    var val = itemVisual[key];\n\n    if (val == null) {\n      val = this.getVisual(key); // TODO Performance?\n\n      if (zrUtil.isArray(val)) {\n        val = val.slice();\n      } else if (isObject(val)) {\n        val = zrUtil.extend({}, val);\n      }\n\n      itemVisual[key] = val;\n    }\n\n    return val;\n  }; // eslint-disable-next-line\n\n\n  List.prototype.setItemVisual = function (idx, key, value) {\n    var itemVisual = this._itemVisuals[idx] || {};\n    this._itemVisuals[idx] = itemVisual;\n\n    if (isObject(key)) {\n      zrUtil.extend(itemVisual, key);\n    } else {\n      itemVisual[key] = value;\n    }\n  };\n  /**\n   * Clear itemVisuals and list visual.\n   */\n\n\n  List.prototype.clearAllVisual = function () {\n    this._visual = {};\n    this._itemVisuals = [];\n  };\n\n  List.prototype.setLayout = function (key, val) {\n    if (isObject(key)) {\n      for (var name_1 in key) {\n        if (key.hasOwnProperty(name_1)) {\n          this.setLayout(name_1, key[name_1]);\n        }\n      }\n\n      return;\n    }\n\n    this._layout[key] = val;\n  };\n  /**\n   * Get layout property.\n   */\n\n\n  List.prototype.getLayout = function (key) {\n    return this._layout[key];\n  };\n  /**\n   * Get layout of single data item\n   */\n\n\n  List.prototype.getItemLayout = function (idx) {\n    return this._itemLayouts[idx];\n  };\n  /**\n   * Set layout of single data item\n   */\n\n\n  List.prototype.setItemLayout = function (idx, layout, merge) {\n    this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;\n  };\n  /**\n   * Clear all layout of single data item\n   */\n\n\n  List.prototype.clearItemLayouts = function () {\n    this._itemLayouts.length = 0;\n  };\n  /**\n   * Set graphic element relative to data. It can be set as null\n   */\n\n\n  List.prototype.setItemGraphicEl = function (idx, el) {\n    var hostModel = this.hostModel;\n\n    if (el) {\n      var ecData = getECData(el); // Add data index and series index for indexing the data by element\n      // Useful in tooltip\n\n      ecData.dataIndex = idx;\n      ecData.dataType = this.dataType;\n      ecData.seriesIndex = hostModel && hostModel.seriesIndex; // TODO: not store dataIndex on children.\n\n      if (el.type === 'group') {\n        el.traverse(setItemDataAndSeriesIndex, el);\n      }\n    }\n\n    this._graphicEls[idx] = el;\n  };\n\n  List.prototype.getItemGraphicEl = function (idx) {\n    return this._graphicEls[idx];\n  };\n\n  List.prototype.eachItemGraphicEl = function (cb, context) {\n    zrUtil.each(this._graphicEls, function (el, idx) {\n      if (el) {\n        cb && cb.call(context, el, idx);\n      }\n    });\n  };\n  /**\n   * Shallow clone a new list except visual and layout properties, and graph elements.\n   * New list only change the indices.\n   */\n\n\n  List.prototype.cloneShallow = function (list) {\n    if (!list) {\n      var dimensionInfoList = map(this.dimensions, this.getDimensionInfo, this);\n      list = new List(dimensionInfoList, this.hostModel);\n    } // FIXME\n\n\n    list._storage = this._storage;\n    list._storageArr = this._storageArr;\n    transferProperties(list, this); // Clone will not change the data extent and indices\n\n    if (this._indices) {\n      var Ctor = this._indices.constructor;\n\n      if (Ctor === Array) {\n        var thisCount = this._indices.length;\n        list._indices = new Ctor(thisCount);\n\n        for (var i = 0; i < thisCount; i++) {\n          list._indices[i] = this._indices[i];\n        }\n      } else {\n        list._indices = new Ctor(this._indices);\n      }\n    } else {\n      list._indices = null;\n    }\n\n    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;\n    return list;\n  };\n  /**\n   * Wrap some method to add more feature\n   */\n\n\n  List.prototype.wrapMethod = function (methodName, injectFunction) {\n    var originalMethod = this[methodName];\n\n    if (typeof originalMethod !== 'function') {\n      return;\n    }\n\n    this.__wrappedMethods = this.__wrappedMethods || [];\n\n    this.__wrappedMethods.push(methodName);\n\n    this[methodName] = function () {\n      var res = originalMethod.apply(this, arguments);\n      return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n    };\n  }; // ----------------------------------------------------------\n  // A work around for internal method visiting private member.\n  // ----------------------------------------------------------\n\n\n  List.internalField = function () {\n    defaultDimValueGetters = {\n      arrayRows: getDimValueSimply,\n      objectRows: function (dataItem, dimName, dataIndex, dimIndex) {\n        return parseDataValue(dataItem[dimName], this._dimensionInfos[dimName]);\n      },\n      keyedColumns: getDimValueSimply,\n      original: function (dataItem, dimName, dataIndex, dimIndex) {\n        // Performance sensitive, do not use modelUtil.getDataItemValue.\n        // If dataItem is an plain object with no value field, the let `value`\n        // will be assigned with the object, but it will be tread correctly\n        // in the `convertValue`.\n        var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }\n\n        if (!this._rawData.pure && isDataItemOption(dataItem)) {\n          this.hasItemOption = true;\n        }\n\n        return parseDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.\n        : value, this._dimensionInfos[dimName]);\n      },\n      typedArray: function (dataItem, dimName, dataIndex, dimIndex) {\n        return dataItem[dimIndex];\n      }\n    };\n\n    function getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {\n      return parseDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);\n    }\n\n    prepareInvertedIndex = function (list) {\n      var invertedIndicesMap = list._invertedIndicesMap;\n      zrUtil.each(invertedIndicesMap, function (invertedIndices, dim) {\n        var dimInfo = list._dimensionInfos[dim]; // Currently, only dimensions that has ordinalMeta can create inverted indices.\n\n        var ordinalMeta = dimInfo.ordinalMeta;\n\n        if (ordinalMeta) {\n          invertedIndices = invertedIndicesMap[dim] = new CtorInt32Array(ordinalMeta.categories.length); // The default value of TypedArray is 0. To avoid miss\n          // mapping to 0, we should set it as INDEX_NOT_FOUND.\n\n          for (var i = 0; i < invertedIndices.length; i++) {\n            invertedIndices[i] = INDEX_NOT_FOUND;\n          }\n\n          for (var i = 0; i < list._count; i++) {\n            // Only support the case that all values are distinct.\n            invertedIndices[list.get(dim, i)] = i;\n          }\n        }\n      });\n    };\n\n    getIdNameFromStore = function (list, dimIdx, ordinalMeta, rawIndex) {\n      var val;\n      var chunk = list._storageArr[dimIdx];\n\n      if (chunk) {\n        val = chunk[rawIndex];\n\n        if (ordinalMeta && ordinalMeta.categories.length) {\n          val = ordinalMeta.categories[val];\n        }\n      }\n\n      return convertOptionIdName(val, null);\n    };\n\n    getIndicesCtor = function (list) {\n      // The possible max value in this._indicies is always this._rawCount despite of filtering.\n      return list._rawCount > 65535 ? CtorUint32Array : CtorUint16Array;\n    };\n\n    prepareStorage = function (storage, dimInfo, end, append) {\n      var DataCtor = dataCtors[dimInfo.type];\n      var dim = dimInfo.name;\n\n      if (append) {\n        var oldStore = storage[dim];\n        var oldLen = oldStore && oldStore.length;\n\n        if (!(oldLen === end)) {\n          var newStore = new DataCtor(end); // The cost of the copy is probably inconsiderable\n          // within the initial chunkSize.\n\n          for (var j = 0; j < oldLen; j++) {\n            newStore[j] = oldStore[j];\n          }\n\n          storage[dim] = newStore;\n        }\n      } else {\n        storage[dim] = new DataCtor(end);\n      }\n    };\n\n    getRawIndexWithoutIndices = function (idx) {\n      return idx;\n    };\n\n    getRawIndexWithIndices = function (idx) {\n      if (idx < this._count && idx >= 0) {\n        return this._indices[idx];\n      }\n\n      return -1;\n    };\n    /**\n     * @see the comment of `List['getId']`.\n     */\n\n\n    getId = function (list, rawIndex) {\n      var id = list._idList[rawIndex];\n\n      if (id == null && list._idDimIdx != null) {\n        id = getIdNameFromStore(list, list._idDimIdx, list._idOrdinalMeta, rawIndex);\n      }\n\n      if (id == null) {\n        id = ID_PREFIX + rawIndex;\n      }\n\n      return id;\n    };\n\n    normalizeDimensions = function (dimensions) {\n      if (!zrUtil.isArray(dimensions)) {\n        dimensions = dimensions != null ? [dimensions] : [];\n      }\n\n      return dimensions;\n    };\n\n    validateDimensions = function (list, dims) {\n      for (var i = 0; i < dims.length; i++) {\n        // stroage may be empty when no data, so use\n        // dimensionInfos to check.\n        if (!list._dimensionInfos[dims[i]]) {\n          console.error('Unkown dimension ' + dims[i]);\n        }\n      }\n    }; // Data in excludeDimensions is copied, otherwise transfered.\n\n\n    cloneListForMapAndSample = function (original, excludeDimensions) {\n      var allDimensions = original.dimensions;\n      var list = new List(map(allDimensions, original.getDimensionInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked\n\n      transferProperties(list, original);\n      var storage = list._storage = {};\n      var originalStorage = original._storage;\n      var storageArr = list._storageArr = []; // Init storage\n\n      for (var i = 0; i < allDimensions.length; i++) {\n        var dim = allDimensions[i];\n\n        if (originalStorage[dim]) {\n          // Notice that we do not reset invertedIndicesMap here, becuase\n          // there is no scenario of mapping or sampling ordinal dimension.\n          if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n            storage[dim] = cloneChunk(originalStorage[dim]);\n            list._rawExtent[dim] = getInitialExtent();\n            list._extent[dim] = null;\n          } else {\n            // Direct reference for other dimensions\n            storage[dim] = originalStorage[dim];\n          }\n\n          storageArr.push(storage[dim]);\n        }\n      }\n\n      return list;\n    };\n\n    function cloneChunk(originalChunk) {\n      var Ctor = originalChunk.constructor; // Only shallow clone is enough when Array.\n\n      return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);\n    }\n\n    getInitialExtent = function () {\n      return [Infinity, -Infinity];\n    };\n\n    setItemDataAndSeriesIndex = function (child) {\n      var childECData = getECData(child);\n      var thisECData = getECData(this);\n      childECData.seriesIndex = thisECData.seriesIndex;\n      childECData.dataIndex = thisECData.dataIndex;\n      childECData.dataType = thisECData.dataType;\n    };\n\n    transferProperties = function (target, source) {\n      zrUtil.each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function (propName) {\n        if (source.hasOwnProperty(propName)) {\n          target[propName] = source[propName];\n        }\n      });\n      target.__wrappedMethods = source.__wrappedMethods;\n      zrUtil.each(CLONE_PROPERTIES, function (propName) {\n        target[propName] = zrUtil.clone(source[propName]);\n      });\n      target._calculationInfo = zrUtil.extend({}, source._calculationInfo);\n    };\n\n    makeIdFromName = function (list, idx) {\n      var nameList = list._nameList;\n      var idList = list._idList;\n      var nameDimIdx = list._nameDimIdx;\n      var idDimIdx = list._idDimIdx;\n      var name = nameList[idx];\n      var id = idList[idx];\n\n      if (name == null && nameDimIdx != null) {\n        nameList[idx] = name = getIdNameFromStore(list, nameDimIdx, list._nameOrdinalMeta, idx);\n      }\n\n      if (id == null && idDimIdx != null) {\n        idList[idx] = id = getIdNameFromStore(list, idDimIdx, list._idOrdinalMeta, idx);\n      }\n\n      if (id == null && name != null) {\n        var nameRepeatCount = list._nameRepeatCount;\n        var nmCnt = nameRepeatCount[name] = (nameRepeatCount[name] || 0) + 1;\n        id = name;\n\n        if (nmCnt > 1) {\n          id += '__ec__' + nmCnt;\n        }\n\n        idList[idx] = id;\n      }\n    };\n  }();\n\n  return List;\n}();\n\nexport default List;"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO,KAAKA,MAAM,MAAM,uBAAuB;AAC/C,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,SAASC,yBAAyB,EAAEC,sBAAsB,QAAQ,eAAe;AACjF,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,eAAe;AACrE,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK;AAC1B,IAAIC,QAAQ,GAAGhB,MAAM,CAACgB,QAAQ;AAC9B,IAAIC,GAAG,GAAGjB,MAAM,CAACiB,GAAG;AACpB,IAAIC,SAAS,GAAG,WAAW;AAC3B,IAAIC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1B;;AAEA,IAAIC,SAAS,GAAG,OAAO;AACvB,IAAIC,SAAS,GAAG;EACd,OAAO,EAAE,OAAOC,YAAY,KAAKJ,SAAS,GAAGK,KAAK,GAAGD,YAAY;EACjE,KAAK,EAAE,OAAOE,UAAU,KAAKN,SAAS,GAAGK,KAAK,GAAGC,UAAU;EAC3D;EACA,SAAS,EAAED,KAAK;EAChB,QAAQ,EAAEA,KAAK;EACf,MAAM,EAAEA;AACV,CAAC,CAAC,CAAC;AACH;;AAEA,IAAIE,eAAe,GAAG,OAAOC,WAAW,KAAKR,SAAS,GAAGK,KAAK,GAAGG,WAAW;AAC5E,IAAIC,cAAc,GAAG,OAAOH,UAAU,KAAKN,SAAS,GAAGK,KAAK,GAAGC,UAAU;AACzE,IAAII,eAAe,GAAG,OAAOC,WAAW,KAAKX,SAAS,GAAGK,KAAK,GAAGM,WAAW;AAC5E,IAAIC,uBAAuB,GAAG,CAAC,eAAe,EAAE,WAAW,EAAE,SAAS,EAAE,qBAAqB,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE,WAAW,EAAE,kBAAkB,CAAC;AACpM,IAAIC,gBAAgB,GAAG,CAAC,SAAS,EAAE,oBAAoB,EAAE,YAAY,CAAC,CAAC,CAAC;AACxE;AACA;;AAEA,IAAIC,sBAAsB;AAC1B,IAAIC,oBAAoB;AACxB,IAAIC,cAAc;AAClB,IAAIC,cAAc;AAClB,IAAIC,yBAAyB;AAC7B,IAAIC,sBAAsB;AAC1B,IAAIC,KAAK;AACT,IAAIC,kBAAkB;AACtB,IAAIC,cAAc;AAClB,IAAIC,mBAAmB;AACvB,IAAIC,kBAAkB;AACtB,IAAIC,wBAAwB;AAC5B,IAAIC,gBAAgB;AACpB,IAAIC,yBAAyB;AAC7B,IAAIC,kBAAkB;AAEtB,IAAIC,IAAI,GACR;AACA,YAAY;EACV;AACF;AACA;AACA;AACA;EACE,SAASA,IAAI,CAACC,UAAU,EAAEC,SAAS,EAAE;IACnC,IAAI,CAACC,IAAI,GAAG,MAAM;IAClB,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;IACpB;IACA;IACA;;IAEA,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,OAAO,GAAG,EAAE,CAAC,CAAC;IACnB;IACA;IACA;;IAEA,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEnB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEnB,IAAI,CAACC,YAAY,GAAG,EAAE,CAAC,CAAC;;IAExB,IAAI,CAACC,YAAY,GAAG,EAAE,CAAC,CAAC;;IAExB,IAAI,CAACC,WAAW,GAAG,EAAE,CAAC,CAAC;IACvB;;IAEA,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;IACpB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEnB,IAAI,CAACC,kBAAkB,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5B;IACA;IACA;;IAEA,IAAI,CAACC,aAAa,GAAG,IAAI,CAAC,CAAC;IAC3B;;IAEA,IAAI,CAACC,oBAAoB,GAAG,CAAC,cAAc,EAAE,YAAY,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC,CAAC;;IAErF,IAAI,CAACC,iBAAiB,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAG,CAAC,YAAY,EAAE,gBAAgB,CAAC;IAC1D;AACJ;AACA;AACA;AACA;;IAEI,IAAI,CAACC,WAAW,GAAGlC,yBAAyB;IAC5CY,UAAU,GAAGA,UAAU,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;IACrC,IAAIuB,cAAc,GAAG,CAAC,CAAC;IACvB,IAAIC,cAAc,GAAG,EAAE;IACvB,IAAIC,kBAAkB,GAAG,CAAC,CAAC;IAE3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,UAAU,CAAC2B,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C;MACA,IAAIE,YAAY,GAAG5B,UAAU,CAAC0B,CAAC,CAAC;MAChC,IAAIG,aAAa,GAAG7E,MAAM,CAAC8E,QAAQ,CAACF,YAAY,CAAC,GAAG,IAAIvE,iBAAiB,CAAC;QACxE0E,IAAI,EAAEH;MACR,CAAC,CAAC,GAAG,EAAEA,YAAY,YAAYvE,iBAAiB,CAAC,GAAG,IAAIA,iBAAiB,CAACuE,YAAY,CAAC,GAAGA,YAAY;MACtG,IAAII,aAAa,GAAGH,aAAa,CAACE,IAAI;MACtCF,aAAa,CAAC3B,IAAI,GAAG2B,aAAa,CAAC3B,IAAI,IAAI,OAAO;MAElD,IAAI,CAAC2B,aAAa,CAACI,QAAQ,EAAE;QAC3BJ,aAAa,CAACI,QAAQ,GAAGD,aAAa;QACtCH,aAAa,CAACK,aAAa,GAAG,CAAC;MACjC;MAEA,IAAIC,SAAS,GAAGN,aAAa,CAACM,SAAS,GAAGN,aAAa,CAACM,SAAS,IAAI,CAAC,CAAC;MACvEX,cAAc,CAACY,IAAI,CAACJ,aAAa,CAAC;MAClCT,cAAc,CAACS,aAAa,CAAC,GAAGH,aAAa;MAC7CA,aAAa,CAACQ,KAAK,GAAGX,CAAC;MAEvB,IAAIG,aAAa,CAACS,qBAAqB,EAAE;QACvCb,kBAAkB,CAACO,aAAa,CAAC,GAAG,EAAE;MACxC;MAEA,IAAIG,SAAS,CAACI,QAAQ,KAAK,CAAC,EAAE;QAC5B,IAAI,CAACC,WAAW,GAAGd,CAAC;QACpB,IAAI,CAACe,gBAAgB,GAAGZ,aAAa,CAACa,WAAW;MACnD;MAEA,IAAIP,SAAS,CAACQ,MAAM,KAAK,CAAC,EAAE;QAC1B,IAAI,CAACC,SAAS,GAAGlB,CAAC;QAClB,IAAI,CAACmB,cAAc,GAAGhB,aAAa,CAACa,WAAW;MACjD;IACF;IAEA,IAAI,CAAC1C,UAAU,GAAGwB,cAAc;IAChC,IAAI,CAACsB,eAAe,GAAGvB,cAAc;IACrC,IAAI,CAACtB,SAAS,GAAGA,SAAS,CAAC,CAAC;;IAE5B,IAAI,CAAC8C,kBAAkB,GAAG3F,mBAAmB,CAAC,IAAI,CAAC;IACnD,IAAI,CAAC4F,mBAAmB,GAAGvB,kBAAkB;IAC7C,IAAI,CAACwB,UAAU,GAAG,IAAI,CAACF,kBAAkB,CAACE,UAAU;EACtD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGElD,IAAI,CAACmD,SAAS,CAACC,YAAY,GAAG,UAAUC,GAAG,EAAE;IAC3C,IAAI,OAAOA,GAAG,KAAK,QAAQ,CAAC;IAAA,GACzB,CAACC,KAAK,CAACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAACN,eAAe,CAACQ,cAAc,CAACF,GAAG,CAAC,EAAE;MAC3DA,GAAG,GAAG,IAAI,CAACpD,UAAU,CAACoD,GAAG,CAAC;IAC5B;IAEA,OAAOA,GAAG;EACZ,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;;EAGErD,IAAI,CAACmD,SAAS,CAACK,gBAAgB,GAAG,UAAUH,GAAG,EAAE;IAC/C;IACA,OAAO,IAAI,CAACN,eAAe,CAAC,IAAI,CAACK,YAAY,CAACC,GAAG,CAAC,CAAC;EACrD,CAAC;EACD;AACF;AACA;;EAGErD,IAAI,CAACmD,SAAS,CAACM,oBAAoB,GAAG,YAAY;IAChD,OAAO,IAAI,CAACT,kBAAkB,CAACU,eAAe,CAACC,KAAK,EAAE;EACxD,CAAC;EAED3D,IAAI,CAACmD,SAAS,CAACS,YAAY,GAAG,UAAU1B,QAAQ,EAAE2B,GAAG,EAAE;IACrD,IAAIC,iBAAiB,GAAG,IAAI,CAACd,kBAAkB;IAE/C,IAAIa,GAAG,IAAI,IAAI,EAAE;MACf,OAAOC,iBAAiB,CAACC,sBAAsB,CAAC7B,QAAQ,CAAC;IAC3D;IAEA,IAAI8B,IAAI,GAAGF,iBAAiB,CAACG,MAAM,CAAC/B,QAAQ,CAAC;IAC7C,OAAO8B,IAAI,GAAGA,IAAI,CAACH,GAAG,CAAC,GAAG,IAAI;EAChC,CAAC;EAED7D,IAAI,CAACmD,SAAS,CAACe,gBAAgB,GAAG,UAAUhC,QAAQ,EAAE;IACpD,IAAI4B,iBAAiB,GAAG,IAAI,CAACd,kBAAkB;IAC/C,IAAIgB,IAAI,GAAGF,iBAAiB,CAACG,MAAM,CAAC/B,QAAQ,CAAC;IAC7C,OAAO,CAAC8B,IAAI,IAAI,EAAE,EAAEL,KAAK,EAAE;EAC7B,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE3D,IAAI,CAACmD,SAAS,CAACgB,QAAQ,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAEC,cAAc,EAAE;IAClE,IAAIC,WAAW,GAAG1G,gBAAgB,CAACuG,IAAI,CAAC,IAAInH,MAAM,CAACuH,WAAW,CAACJ,IAAI,CAAC;IACpE,IAAIK,QAAQ,GAAGF,WAAW,GAAG,IAAInH,mBAAmB,CAACgH,IAAI,EAAE,IAAI,CAACnE,UAAU,CAAC2B,MAAM,CAAC,GAAGwC,IAAI;IAEzF,IAAIM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC3H,MAAM,CAAC4H,MAAM,CAACN,WAAW,IAAItH,MAAM,CAAC6H,UAAU,CAACL,QAAQ,CAACM,OAAO,CAAC,IAAI9H,MAAM,CAAC6H,UAAU,CAACL,QAAQ,CAACO,KAAK,CAAC,EAAE,wBAAwB,CAAC;IAClI;IAEA,IAAI,CAACC,QAAQ,GAAGR,QAAQ;IACxB,IAAIS,YAAY,GAAGT,QAAQ,CAACU,SAAS,EAAE,CAACD,YAAY,CAAC,CAAC;;IAEtD,IAAI,CAAC5E,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAAC8E,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACxC,SAAS,IAAI,IAAI,IAAIqC,YAAY,KAAK3H,yBAAyB,CAAC;IAAA,GAC7F,CAAC,CAACkH,QAAQ,CAACa,WAAW;IACzB,IAAI,CAAC9E,SAAS,GAAG,CAAC6D,QAAQ,IAAI,EAAE,EAAEV,KAAK,EAAE;IACzC,IAAI,CAAClD,OAAO,GAAG,EAAE;IACjB,IAAI,CAAC8E,gBAAgB,GAAG,CAAC,CAAC;IAE1B,IAAI,CAACjB,cAAc,EAAE;MACnB,IAAI,CAACnD,aAAa,GAAG,KAAK;IAC5B;IAEA,IAAI,CAACqE,qBAAqB,GAAGvG,sBAAsB,CAACiG,YAAY,CAAC,CAAC,CAAC;;IAEnE,IAAI,CAACO,eAAe,GAAGnB,cAAc,GAAGA,cAAc,IAAI,IAAI,CAACkB,qBAAqB;IACpF,IAAI,CAACE,wBAAwB,GAAGzG,sBAAsB,CAAC0G,SAAS,CAAC,CAAC;;IAElE,IAAI,CAAC5E,UAAU,GAAG,CAAC,CAAC;IAEpB,IAAI,CAAC6E,qBAAqB,CAAC,CAAC,EAAEnB,QAAQ,CAACO,KAAK,EAAE,CAAC,CAAC,CAAC;;IAGjD,IAAIP,QAAQ,CAACoB,IAAI,EAAE;MACjB,IAAI,CAAC1E,aAAa,GAAG,KAAK;IAC5B;EACF,CAAC;EAEDnB,IAAI,CAACmD,SAAS,CAAC2C,WAAW,GAAG,YAAY;IACvC,OAAO,IAAI,CAACb,QAAQ;EACtB,CAAC;EACD;AACF;AACA;;EAGEjF,IAAI,CAACmD,SAAS,CAAC4C,UAAU,GAAG,UAAU3B,IAAI,EAAE;IAC1C,IAAIM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC3H,MAAM,CAAC4H,MAAM,CAAC,CAAC,IAAI,CAACO,QAAQ,EAAE,4CAA4C,CAAC;IAC7E;IAEA,IAAIY,OAAO,GAAG,IAAI,CAACf,QAAQ;IAC3B,IAAIgB,KAAK,GAAG,IAAI,CAACjB,KAAK,EAAE;IACxBgB,OAAO,CAACD,UAAU,CAAC3B,IAAI,CAAC;IACxB,IAAI8B,GAAG,GAAGF,OAAO,CAAChB,KAAK,EAAE;IAEzB,IAAI,CAACgB,OAAO,CAACG,UAAU,EAAE;MACvBD,GAAG,IAAID,KAAK;IACd;IAEA,IAAI,CAACL,qBAAqB,CAACK,KAAK,EAAEC,GAAG,EAAE,IAAI,CAAC;EAC9C,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGElG,IAAI,CAACmD,SAAS,CAACiD,YAAY,GAAG,UAAUC,MAAM,EAAEC,KAAK,EAAE;IACrD,IAAIC,OAAO,GAAG,IAAI,CAACjG,QAAQ;IAC3B,IAAIL,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,IAAIuG,MAAM,GAAGvG,UAAU,CAAC2B,MAAM;IAC9B,IAAI6E,SAAS,GAAG,IAAI,CAAC1F,UAAU;IAC/B,IAAIkF,KAAK,GAAG,IAAI,CAACjB,KAAK,EAAE;IACxB,IAAIkB,GAAG,GAAGD,KAAK,GAAGlI,IAAI,CAAC2I,GAAG,CAACL,MAAM,CAACzE,MAAM,EAAE0E,KAAK,GAAGA,KAAK,CAAC1E,MAAM,GAAG,CAAC,CAAC;IAEnE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6E,MAAM,EAAE7E,CAAC,EAAE,EAAE;MAC/B,IAAI0B,GAAG,GAAGpD,UAAU,CAAC0B,CAAC,CAAC;MAEvB,IAAI,CAAC8E,SAAS,CAACpD,GAAG,CAAC,EAAE;QACnBoD,SAAS,CAACpD,GAAG,CAAC,GAAGxD,gBAAgB,EAAE;MACrC;MAEAT,cAAc,CAACmH,OAAO,EAAE,IAAI,CAACxD,eAAe,CAACM,GAAG,CAAC,EAAE6C,GAAG,EAAE,IAAI,CAAC;IAC/D;IAEA,IAAIS,YAAY,GAAGzI,GAAG,CAAC+B,UAAU,EAAE,UAAUoD,GAAG,EAAE;MAChD,OAAOoD,SAAS,CAACpD,GAAG,CAAC;IACvB,CAAC,CAAC;IACF,IAAIuD,UAAU,GAAG,IAAI,CAACrG,WAAW,GAAGrC,GAAG,CAAC+B,UAAU,EAAE,UAAUoD,GAAG,EAAE;MACjE,OAAOkD,OAAO,CAAClD,GAAG,CAAC;IACrB,CAAC,CAAC;IACF,IAAIwD,aAAa,GAAG,EAAE;IAEtB,KAAK,IAAIhD,GAAG,GAAGoC,KAAK,EAAEpC,GAAG,GAAGqC,GAAG,EAAErC,GAAG,EAAE,EAAE;MACtC,IAAIiD,SAAS,GAAGjD,GAAG,GAAGoC,KAAK,CAAC,CAAC;;MAE7B,KAAK,IAAIc,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGP,MAAM,EAAEO,MAAM,EAAE,EAAE;QAC9C,IAAI1D,GAAG,GAAGpD,UAAU,CAAC8G,MAAM,CAAC;QAE5B,IAAIC,GAAG,GAAG,IAAI,CAACtB,wBAAwB,CAACW,MAAM,CAACS,SAAS,CAAC,IAAID,aAAa,EAAExD,GAAG,EAAEyD,SAAS,EAAEC,MAAM,CAAC;QAEnGH,UAAU,CAACG,MAAM,CAAC,CAAClD,GAAG,CAAC,GAAGmD,GAAG;QAC7B,IAAIC,YAAY,GAAGN,YAAY,CAACI,MAAM,CAAC;QACvCC,GAAG,GAAGC,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC;QAChDA,GAAG,GAAGC,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC;MAClD;MAEA,IAAIV,KAAK,EAAE;QACT,IAAI,CAAC9F,SAAS,CAACqD,GAAG,CAAC,GAAGyC,KAAK,CAACQ,SAAS,CAAC;QAEtC,IAAI,CAAC,IAAI,CAACzB,mBAAmB,EAAE;UAC7B5F,cAAc,CAAC,IAAI,EAAEoE,GAAG,CAAC;QAC3B;MACF;IACF;IAEA,IAAI,CAACxD,SAAS,GAAG,IAAI,CAACD,MAAM,GAAG8F,GAAG,CAAC,CAAC;;IAEpC,IAAI,CAAClF,OAAO,GAAG,CAAC,CAAC;IACjB9B,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEDc,IAAI,CAACmD,SAAS,CAACyC,qBAAqB,GAAG,UAAUK,KAAK,EAAEC,GAAG,EAAEgB,MAAM,EAAE;IACnE,IAAIjB,KAAK,IAAIC,GAAG,EAAE;MAChB;IACF;IAEA,IAAIF,OAAO,GAAG,IAAI,CAACf,QAAQ;IAC3B,IAAIsB,OAAO,GAAG,IAAI,CAACjG,QAAQ;IAC3B,IAAIL,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,IAAIuG,MAAM,GAAGvG,UAAU,CAAC2B,MAAM;IAC9B,IAAIuF,gBAAgB,GAAG,IAAI,CAACpE,eAAe;IAC3C,IAAIsB,QAAQ,GAAG,IAAI,CAAC7D,SAAS;IAC7B,IAAI4G,MAAM,GAAG,IAAI,CAAC3G,OAAO;IACzB,IAAIgG,SAAS,GAAG,IAAI,CAAC1F,UAAU;IAC/B,IAAImE,YAAY,GAAGc,OAAO,CAACb,SAAS,EAAE,CAACD,YAAY;IACnD,IAAImC,gBAAgB,GAAGnC,YAAY,KAAK1H,sBAAsB;IAE9D,KAAK,IAAImE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6E,MAAM,EAAE7E,CAAC,EAAE,EAAE;MAC/B,IAAI0B,GAAG,GAAGpD,UAAU,CAAC0B,CAAC,CAAC;MAEvB,IAAI,CAAC8E,SAAS,CAACpD,GAAG,CAAC,EAAE;QACnBoD,SAAS,CAACpD,GAAG,CAAC,GAAGxD,gBAAgB,EAAE;MACrC;MAEAT,cAAc,CAACmH,OAAO,EAAEY,gBAAgB,CAAC9D,GAAG,CAAC,EAAE6C,GAAG,EAAEgB,MAAM,CAAC;IAC7D;IAEA,IAAIN,UAAU,GAAG,IAAI,CAACrG,WAAW,GAAGrC,GAAG,CAAC+B,UAAU,EAAE,UAAUoD,GAAG,EAAE;MACjE,OAAOkD,OAAO,CAAClD,GAAG,CAAC;IACrB,CAAC,CAAC;IACF,IAAIsD,YAAY,GAAGzI,GAAG,CAAC+B,UAAU,EAAE,UAAUoD,GAAG,EAAE;MAChD,OAAOoD,SAAS,CAACpD,GAAG,CAAC;IACvB,CAAC,CAAC;IAEF,IAAI2C,OAAO,CAACV,WAAW,EAAE;MACvBU,OAAO,CAACV,WAAW,CAACW,KAAK,EAAEC,GAAG,EAAEU,UAAU,EAAED,YAAY,CAAC;IAC3D,CAAC,MAAM;MACL,IAAIW,QAAQ,GAAG,EAAE;MAEjB,KAAK,IAAIzD,GAAG,GAAGoC,KAAK,EAAEpC,GAAG,GAAGqC,GAAG,EAAErC,GAAG,EAAE,EAAE;QACtC;QACAyD,QAAQ,GAAGtB,OAAO,CAACjB,OAAO,CAAClB,GAAG,EAAEyD,QAAQ,CAAC,CAAC,CAAC;QAC3C;QACA;QACA;QACA;QACA;QACA;;QAEA,KAAK,IAAIP,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGP,MAAM,EAAEO,MAAM,EAAE,EAAE;UAC9C,IAAI1D,GAAG,GAAGpD,UAAU,CAAC8G,MAAM,CAAC;UAC5B,IAAIQ,UAAU,GAAGX,UAAU,CAACG,MAAM,CAAC,CAAC,CAAC;;UAErC,IAAIC,GAAG,GAAG,IAAI,CAACvB,eAAe,CAAC6B,QAAQ,EAAEjE,GAAG,EAAEQ,GAAG,EAAEkD,MAAM,CAAC;UAE1DQ,UAAU,CAAC1D,GAAG,CAAC,GAAGmD,GAAG;UACrB,IAAIC,YAAY,GAAGN,YAAY,CAACI,MAAM,CAAC;UACvCC,GAAG,GAAGC,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC;UAChDA,GAAG,GAAGC,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC;QAClD,CAAC,CAAC;QACF;;QAGA,IAAIK,gBAAgB,IAAI,CAACrB,OAAO,CAACH,IAAI,IAAIyB,QAAQ,EAAE;UACjD,IAAI9E,QAAQ,GAAG8E,QAAQ,CAACtF,IAAI;UAE5B,IAAIqC,QAAQ,CAACR,GAAG,CAAC,IAAI,IAAI,IAAIrB,QAAQ,IAAI,IAAI,EAAE;YAC7C6B,QAAQ,CAACR,GAAG,CAAC,GAAGnG,mBAAmB,CAAC8E,QAAQ,EAAE,IAAI,CAAC;UACrD;UAEA,IAAII,MAAM,GAAG0E,QAAQ,CAACE,EAAE;UAExB,IAAIJ,MAAM,CAACvD,GAAG,CAAC,IAAI,IAAI,IAAIjB,MAAM,IAAI,IAAI,EAAE;YACzCwE,MAAM,CAACvD,GAAG,CAAC,GAAGnG,mBAAmB,CAACkF,MAAM,EAAE,IAAI,CAAC;UACjD;QACF;QAEA,IAAI,CAAC,IAAI,CAACyC,mBAAmB,EAAE;UAC7B5F,cAAc,CAAC,IAAI,EAAEoE,GAAG,CAAC;QAC3B;MACF;IACF;IAEA,IAAI,CAACmC,OAAO,CAACG,UAAU,IAAIH,OAAO,CAACyB,KAAK,EAAE;MACxC;MACAzB,OAAO,CAACyB,KAAK,EAAE;IACjB;IAEA,IAAI,CAACpH,SAAS,GAAG,IAAI,CAACD,MAAM,GAAG8F,GAAG,CAAC,CAAC;;IAEpC,IAAI,CAAClF,OAAO,GAAG,CAAC,CAAC;IACjB9B,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEDc,IAAI,CAACmD,SAAS,CAAC6B,KAAK,GAAG,YAAY;IACjC,OAAO,IAAI,CAAC5E,MAAM;EACpB,CAAC;EAEDJ,IAAI,CAACmD,SAAS,CAACuE,UAAU,GAAG,YAAY;IACtC,IAAIC,UAAU;IACd,IAAIC,OAAO,GAAG,IAAI,CAACxC,QAAQ;IAE3B,IAAIwC,OAAO,EAAE;MACX,IAAIC,IAAI,GAAGD,OAAO,CAACE,WAAW;MAC9B,IAAIC,SAAS,GAAG,IAAI,CAAC3H,MAAM,CAAC,CAAC;;MAE7B,IAAIyH,IAAI,KAAKrJ,KAAK,EAAE;QAClBmJ,UAAU,GAAG,IAAIE,IAAI,CAACE,SAAS,CAAC;QAEhC,KAAK,IAAIpG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoG,SAAS,EAAEpG,CAAC,EAAE,EAAE;UAClCgG,UAAU,CAAChG,CAAC,CAAC,GAAGiG,OAAO,CAACjG,CAAC,CAAC;QAC5B;MACF,CAAC,MAAM;QACLgG,UAAU,GAAG,IAAIE,IAAI,CAACD,OAAO,CAACI,MAAM,EAAE,CAAC,EAAED,SAAS,CAAC;MACrD;IACF,CAAC,MAAM;MACL,IAAIF,IAAI,GAAG1I,cAAc,CAAC,IAAI,CAAC;MAC/BwI,UAAU,GAAG,IAAIE,IAAI,CAAC,IAAI,CAAC7C,KAAK,EAAE,CAAC;MAEnC,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgG,UAAU,CAAC/F,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1CgG,UAAU,CAAChG,CAAC,CAAC,GAAGA,CAAC;MACnB;IACF;IAEA,OAAOgG,UAAU;EACnB,CAAC,CAAC,CAAC;EACH;EACA;;EAGA3H,IAAI,CAACmD,SAAS,CAAC8E,WAAW,GAAG,UAAUlB,MAAM,EAAElD,GAAG,EAAE;IAClD,IAAI,EAAEA,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAG,IAAI,CAACzD,MAAM,CAAC,EAAE;MACpC,OAAO8H,GAAG;IACZ;IAEA,IAAIC,QAAQ,GAAG,IAAI,CAAC5H,WAAW,CAACwG,MAAM,CAAC;IACvC,OAAOoB,QAAQ,GAAGA,QAAQ,CAAC,IAAI,CAAC5G,WAAW,CAACsC,GAAG,CAAC,CAAC,GAAGqE,GAAG;EACzD,CAAC;EACD;AACF;AACA;AACA;;EAGElI,IAAI,CAACmD,SAAS,CAACiF,GAAG,GAAG,UAAU/E,GAAG,EAAEQ,GAAG,EAAE;IACvC,IAAI,EAAEA,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAG,IAAI,CAACzD,MAAM,CAAC,EAAE;MACpC,OAAO8H,GAAG;IACZ;IAEA,IAAIC,QAAQ,GAAG,IAAI,CAAC7H,QAAQ,CAAC+C,GAAG,CAAC;IACjC,OAAO8E,QAAQ,GAAGA,QAAQ,CAAC,IAAI,CAAC5G,WAAW,CAACsC,GAAG,CAAC,CAAC,GAAGqE,GAAG;EACzD,CAAC;EACD;AACF;AACA;;EAGElI,IAAI,CAACmD,SAAS,CAACkF,aAAa,GAAG,UAAUhF,GAAG,EAAEiF,MAAM,EAAE;IACpD,IAAI,EAAEA,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,IAAI,CAACjI,SAAS,CAAC,EAAE;MAC7C,OAAO6H,GAAG;IACZ;IAEA,IAAIC,QAAQ,GAAG,IAAI,CAAC7H,QAAQ,CAAC+C,GAAG,CAAC;IACjC,OAAO8E,QAAQ,GAAGA,QAAQ,CAACG,MAAM,CAAC,GAAGJ,GAAG;EAC1C,CAAC;EAEDlI,IAAI,CAACmD,SAAS,CAACoF,SAAS,GAAG,UAAUtI,UAAU,EAAE4D,GAAG,EAAE;IACpD,IAAIwC,MAAM,GAAG,EAAE;IAEf,IAAI,CAACpJ,MAAM,CAACuL,OAAO,CAACvI,UAAU,CAAC,EAAE;MAC/B;MACA4D,GAAG,GAAG5D,UAAU;MAChBA,UAAU,GAAG,IAAI,CAACA,UAAU;IAC9B;IAEA,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAE8G,GAAG,GAAGxI,UAAU,CAAC2B,MAAM,EAAED,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;MACrD0E,MAAM,CAAChE,IAAI,CAAC,IAAI,CAAC+F,GAAG,CAACnI,UAAU,CAAC0B,CAAC,CAAC,EAAEkC;MACpC,aACC,CAAC;IACJ;;IAEA,OAAOwC,MAAM;EACf,CAAC;EACD;AACF;AACA;AACA;;EAGErG,IAAI,CAACmD,SAAS,CAACuF,QAAQ,GAAG,UAAU7E,GAAG,EAAE;IACvC,IAAIH,eAAe,GAAG,IAAI,CAACV,kBAAkB,CAACU,eAAe;IAE7D,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAE8G,GAAG,GAAG/E,eAAe,CAAC9B,MAAM,EAAED,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;MAC1D;MACA;MACA;MACA,IAAI2B,KAAK,CAAC,IAAI,CAAC8E,GAAG,CAAC1E,eAAe,CAAC/B,CAAC,CAAC,EAAEkC,GAAG,CAAC,CAAC,EAAE;QAC5C,OAAO,KAAK;MACd;IACF;IAEA,OAAO,IAAI;EACb,CAAC;EACD;AACF;AACA;;EAGE7D,IAAI,CAACmD,SAAS,CAACwF,aAAa,GAAG,UAAUtF,GAAG,EAAE;IAC5C;IACAA,GAAG,GAAG,IAAI,CAACD,YAAY,CAACC,GAAG,CAAC;IAC5B,IAAIuF,OAAO,GAAG,IAAI,CAACtI,QAAQ,CAAC+C,GAAG,CAAC;IAChC,IAAIwF,aAAa,GAAGhJ,gBAAgB,EAAE,CAAC,CAAC;;IAExC,IAAI,CAAC+I,OAAO,EAAE;MACZ,OAAOC,aAAa;IACtB,CAAC,CAAC;;IAGF,IAAIC,OAAO,GAAG,IAAI,CAAC9D,KAAK,EAAE,CAAC,CAAC;IAC5B;IACA;IACA;IACA;;IAEA,IAAI+D,MAAM,GAAG,CAAC,IAAI,CAAC3D,QAAQ,CAAC,CAAC;;IAE7B,IAAI4D,SAAS;IAEb,IAAID,MAAM,EAAE;MACV,OAAO,IAAI,CAAChI,UAAU,CAACsC,GAAG,CAAC,CAACM,KAAK,EAAE;IACrC;IAEAqF,SAAS,GAAG,IAAI,CAAChI,OAAO,CAACqC,GAAG,CAAC;IAE7B,IAAI2F,SAAS,EAAE;MACb,OAAOA,SAAS,CAACrF,KAAK,EAAE;IAC1B;IAEAqF,SAAS,GAAGH,aAAa;IACzB,IAAII,GAAG,GAAGD,SAAS,CAAC,CAAC,CAAC;IACtB,IAAItC,GAAG,GAAGsC,SAAS,CAAC,CAAC,CAAC;IAEtB,KAAK,IAAIrH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmH,OAAO,EAAEnH,CAAC,EAAE,EAAE;MAChC,IAAI2G,MAAM,GAAG,IAAI,CAAC/G,WAAW,CAACI,CAAC,CAAC;MAChC,IAAIuH,KAAK,GAAGN,OAAO,CAACN,MAAM,CAAC;MAC3BY,KAAK,GAAGD,GAAG,KAAKA,GAAG,GAAGC,KAAK,CAAC;MAC5BA,KAAK,GAAGxC,GAAG,KAAKA,GAAG,GAAGwC,KAAK,CAAC;IAC9B;IAEAF,SAAS,GAAG,CAACC,GAAG,EAAEvC,GAAG,CAAC;IACtB,IAAI,CAAC1F,OAAO,CAACqC,GAAG,CAAC,GAAG2F,SAAS;IAC7B,OAAOA,SAAS;EAClB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEhJ,IAAI,CAACmD,SAAS,CAACgG,oBAAoB,GAAG,UAAU9F,GAAG,EAAE;IACnDA,GAAG,GAAG,IAAI,CAACD,YAAY,CAACC,GAAG,CAAC;IAC5B,OAAO,IAAI,CAACpC,kBAAkB,CAACoC,GAAG,CAAC,IAAI,IAAI,CAACsF,aAAa,CAACtF,GAAG,CAAC;EAChE,CAAC;EACD;AACF;AACA;AACA;;EAGErD,IAAI,CAACmD,SAAS,CAACiG,oBAAoB,GAAG,UAAUC,MAAM,EAAEhG,GAAG,EAAE;IAC3DA,GAAG,GAAG,IAAI,CAACD,YAAY,CAACC,GAAG,CAAC;IAC5B,IAAI,CAACpC,kBAAkB,CAACoC,GAAG,CAAC,GAAGgG,MAAM,CAAC1F,KAAK,EAAE;EAC/C,CAAC;EAED3D,IAAI,CAACmD,SAAS,CAACmG,kBAAkB,GAAG,UAAUC,GAAG,EAAE;IACjD,OAAO,IAAI,CAACrI,gBAAgB,CAACqI,GAAG,CAAC;EACnC,CAAC;EAEDvJ,IAAI,CAACmD,SAAS,CAACqG,kBAAkB,GAAG,UAAUD,GAAG,EAAEL,KAAK,EAAE;IACxDjL,QAAQ,CAACsL,GAAG,CAAC,GAAGtM,MAAM,CAACwM,MAAM,CAAC,IAAI,CAACvI,gBAAgB,EAAEqI,GAAG,CAAC,GAAG,IAAI,CAACrI,gBAAgB,CAACqI,GAAG,CAAC,GAAGL,KAAK;EAChG,CAAC;EACD;AACF;AACA;;EAGElJ,IAAI,CAACmD,SAAS,CAACuG,MAAM,GAAG,UAAUrG,GAAG,EAAE;IACrC,IAAIuF,OAAO,GAAG,IAAI,CAACtI,QAAQ,CAAC+C,GAAG,CAAC;IAChC,IAAIsG,GAAG,GAAG,CAAC;IAEX,IAAIf,OAAO,EAAE;MACX,KAAK,IAAIjH,CAAC,GAAG,CAAC,EAAE8G,GAAG,GAAG,IAAI,CAACzD,KAAK,EAAE,EAAErD,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;QAChD,IAAIuH,KAAK,GAAG,IAAI,CAACd,GAAG,CAAC/E,GAAG,EAAE1B,CAAC,CAAC;QAE5B,IAAI,CAAC2B,KAAK,CAAC4F,KAAK,CAAC,EAAE;UACjBS,GAAG,IAAIT,KAAK;QACd;MACF;IACF;IAEA,OAAOS,GAAG;EACZ,CAAC;EACD;AACF;AACA;;EAGE3J,IAAI,CAACmD,SAAS,CAACyG,SAAS,GAAG,UAAUvG,GAAG,EAAE;IACxC,IAAIwG,YAAY,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAI,CAACC,IAAI,CAACzG,GAAG,EAAE,UAAU2D,GAAG,EAAE;MAC5B,IAAI,CAAC1D,KAAK,CAAC0D,GAAG,CAAC,EAAE;QACf6C,YAAY,CAACxH,IAAI,CAAC2E,GAAG,CAAC;MACxB;IACF,CAAC,CAAC,CAAC,CAAC;IACJ;;IAEA,IAAI+C,kBAAkB,GAAGF,YAAY,CAACG,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MACzD,OAAOD,CAAC,GAAGC,CAAC;IACd,CAAC,CAAC;IACF,IAAIzB,GAAG,GAAG,IAAI,CAACzD,KAAK,EAAE,CAAC,CAAC;;IAExB,OAAOyD,GAAG,KAAK,CAAC,GAAG,CAAC,GAAGA,GAAG,GAAG,CAAC,KAAK,CAAC,GAAGsB,kBAAkB,CAAC,CAACtB,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAACsB,kBAAkB,CAACtB,GAAG,GAAG,CAAC,CAAC,GAAGsB,kBAAkB,CAACtB,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;EAChJ,CAAC,CAAC,CAAC;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEzI,IAAI,CAACmD,SAAS,CAACgH,UAAU,GAAG,UAAU9G,GAAG,EAAE6F,KAAK,EAAE;IAChD,IAAIkB,eAAe,GAAG/G,GAAG,IAAI,IAAI,CAACJ,mBAAmB,CAACI,GAAG,CAAC;IAE1D,IAAIqB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAI,CAACwF,eAAe,EAAE;QACpB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;IACF;IAEA,IAAIC,QAAQ,GAAGF,eAAe,CAAClB,KAAK,CAAC;IAErC,IAAIoB,QAAQ,IAAI,IAAI,IAAIhH,KAAK,CAACgH,QAAQ,CAAC,EAAE;MACvC,OAAOlM,eAAe;IACxB;IAEA,OAAOkM,QAAQ;EACjB,CAAC;EACD;AACF;AACA;;EAGEtK,IAAI,CAACmD,SAAS,CAACoH,WAAW,GAAG,UAAUvI,IAAI,EAAE;IAC3C,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAE8G,GAAG,GAAG,IAAI,CAACzD,KAAK,EAAE,EAAErD,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;MAChD,IAAI,IAAI,CAAC6I,OAAO,CAAC7I,CAAC,CAAC,KAAKK,IAAI,EAAE;QAC5B,OAAOL,CAAC;MACV;IACF;IAEA,OAAO,CAAC,CAAC;EACX,CAAC;EACD;AACF;AACA;;EAGE3B,IAAI,CAACmD,SAAS,CAACsH,eAAe,GAAG,UAAUH,QAAQ,EAAE;IACnD,IAAIA,QAAQ,IAAI,IAAI,CAACjK,SAAS,IAAIiK,QAAQ,GAAG,CAAC,EAAE;MAC9C,OAAO,CAAC,CAAC;IACX;IAEA,IAAI,CAAC,IAAI,CAAClF,QAAQ,EAAE;MAClB,OAAOkF,QAAQ;IACjB,CAAC,CAAC;;IAGF,IAAI1C,OAAO,GAAG,IAAI,CAACxC,QAAQ,CAAC,CAAC;;IAE7B,IAAIsF,YAAY,GAAG9C,OAAO,CAAC0C,QAAQ,CAAC;IAEpC,IAAII,YAAY,IAAI,IAAI,IAAIA,YAAY,GAAG,IAAI,CAACtK,MAAM,IAAIsK,YAAY,KAAKJ,QAAQ,EAAE;MACnF,OAAOA,QAAQ;IACjB;IAEA,IAAIK,IAAI,GAAG,CAAC;IACZ,IAAIC,KAAK,GAAG,IAAI,CAACxK,MAAM,GAAG,CAAC;IAE3B,OAAOuK,IAAI,IAAIC,KAAK,EAAE;MACpB,IAAIC,GAAG,GAAG,CAACF,IAAI,GAAGC,KAAK,IAAI,CAAC,GAAG,CAAC;MAEhC,IAAIhD,OAAO,CAACiD,GAAG,CAAC,GAAGP,QAAQ,EAAE;QAC3BK,IAAI,GAAGE,GAAG,GAAG,CAAC;MAChB,CAAC,MAAM,IAAIjD,OAAO,CAACiD,GAAG,CAAC,GAAGP,QAAQ,EAAE;QAClCM,KAAK,GAAGC,GAAG,GAAG,CAAC;MACjB,CAAC,MAAM;QACL,OAAOA,GAAG;MACZ;IACF;IAEA,OAAO,CAAC,CAAC;EACX,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE7K,IAAI,CAACmD,SAAS,CAAC2H,gBAAgB,GAAG,UAAUzH,GAAG,EAAE6F,KAAK,EAAE6B,WAAW,EAAE;IACnE,IAAIxE,OAAO,GAAG,IAAI,CAACjG,QAAQ;IAC3B,IAAIsI,OAAO,GAAGrC,OAAO,CAAClD,GAAG,CAAC;IAC1B,IAAI2H,cAAc,GAAG,EAAE;IAEvB,IAAI,CAACpC,OAAO,EAAE;MACZ,OAAOoC,cAAc;IACvB;IAEA,IAAID,WAAW,IAAI,IAAI,EAAE;MACvBA,WAAW,GAAGE,QAAQ;IACxB;IAEA,IAAIC,OAAO,GAAGD,QAAQ;IACtB,IAAIE,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,iBAAiB,GAAG,CAAC,CAAC,CAAC;;IAE3B,KAAK,IAAIzJ,CAAC,GAAG,CAAC,EAAE8G,GAAG,GAAG,IAAI,CAACzD,KAAK,EAAE,EAAErD,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;MAChD,IAAI0J,SAAS,GAAG,IAAI,CAAC9J,WAAW,CAACI,CAAC,CAAC;MACnC,IAAI2J,IAAI,GAAGpC,KAAK,GAAGN,OAAO,CAACyC,SAAS,CAAC;MACrC,IAAIE,IAAI,GAAGxN,IAAI,CAACyN,GAAG,CAACF,IAAI,CAAC;MAEzB,IAAIC,IAAI,IAAIR,WAAW,EAAE;QACvB;QACA;QACA;QACA;QACA;QACA;QACA,IAAIQ,IAAI,GAAGL,OAAO,IAAIK,IAAI,KAAKL,OAAO,IAAII,IAAI,IAAI,CAAC,IAAIH,OAAO,GAAG,CAAC,EAAE;UAClED,OAAO,GAAGK,IAAI;UACdJ,OAAO,GAAGG,IAAI;UACdF,iBAAiB,GAAG,CAAC;QACvB;QAEA,IAAIE,IAAI,KAAKH,OAAO,EAAE;UACpBH,cAAc,CAACI,iBAAiB,EAAE,CAAC,GAAGzJ,CAAC;QACzC;MACF;IACF;IAEAqJ,cAAc,CAACpJ,MAAM,GAAGwJ,iBAAiB;IACzC,OAAOJ,cAAc;EACvB,CAAC;EACD;AACF;AACA;;EAGEhL,IAAI,CAACmD,SAAS,CAACsI,cAAc,GAAG,UAAU5H,GAAG,EAAE;IAC7C,IAAI,CAAC,IAAI,CAACoB,QAAQ,CAACkB,UAAU,EAAE;MAC7B,IAAIa,GAAG,GAAG,EAAE;MAEZ,KAAK,IAAIrF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC1B,UAAU,CAAC2B,MAAM,EAAED,CAAC,EAAE,EAAE;QAC/C,IAAI0B,GAAG,GAAG,IAAI,CAACpD,UAAU,CAAC0B,CAAC,CAAC;QAC5BqF,GAAG,CAAC3E,IAAI,CAAC,IAAI,CAAC+F,GAAG,CAAC/E,GAAG,EAAEQ,GAAG,CAAC,CAAC;MAC9B;MAEA,OAAOmD,GAAG;IACZ,CAAC,MAAM;MACL,OAAO,IAAI,CAAC/B,QAAQ,CAACF,OAAO,CAAC,IAAI,CAACxD,WAAW,CAACsC,GAAG,CAAC,CAAC;IACrD;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;;EAGE7D,IAAI,CAACmD,SAAS,CAACqH,OAAO,GAAG,UAAU3G,GAAG,EAAE;IACtC,IAAIyG,QAAQ,GAAG,IAAI,CAAC/I,WAAW,CAACsC,GAAG,CAAC;IACpC,IAAI7B,IAAI,GAAG,IAAI,CAACxB,SAAS,CAAC8J,QAAQ,CAAC;IAEnC,IAAItI,IAAI,IAAI,IAAI,IAAI,IAAI,CAACS,WAAW,IAAI,IAAI,EAAE;MAC5CT,IAAI,GAAGxC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAACiD,WAAW,EAAE,IAAI,CAACC,gBAAgB,EAAE4H,QAAQ,CAAC;IACpF;IAEA,IAAItI,IAAI,IAAI,IAAI,EAAE;MAChBA,IAAI,GAAG,EAAE;IACX;IAEA,OAAOA,IAAI;EACb,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;;EAGEhC,IAAI,CAACmD,SAAS,CAAC5D,KAAK,GAAG,UAAUsE,GAAG,EAAE;IACpC,OAAOtE,KAAK,CAAC,IAAI,EAAE,IAAI,CAACgC,WAAW,CAACsC,GAAG,CAAC,CAAC;EAC3C,CAAC;EAED7D,IAAI,CAACmD,SAAS,CAAC2G,IAAI,GAAG,UAAU9F,IAAI,EAAE0H,EAAE,EAAEC,GAAG,EAAEC,SAAS,EAAE;IACxD,YAAY;;IAEZ,IAAIC,KAAK,GAAG,IAAI;IAEhB,IAAI,CAAC,IAAI,CAACzL,MAAM,EAAE;MAChB;IACF;IAEA,IAAI,OAAO4D,IAAI,KAAK,UAAU,EAAE;MAC9B4H,SAAS,GAAGD,GAAG;MACfA,GAAG,GAAGD,EAAE;MACRA,EAAE,GAAG1H,IAAI;MACTA,IAAI,GAAG,EAAE;IACX,CAAC,CAAC;;IAGF,IAAI8H,IAAI,GAAGH,GAAG,IAAIC,SAAS,IAAI,IAAI;IACnC,IAAIG,QAAQ,GAAG7N,GAAG,CAACwB,mBAAmB,CAACsE,IAAI,CAAC,EAAE,IAAI,CAACZ,YAAY,EAAE,IAAI,CAAC;IAEtE,IAAIsB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCjF,kBAAkB,CAAC,IAAI,EAAEoM,QAAQ,CAAC;IACpC;IAEA,IAAIC,OAAO,GAAGD,QAAQ,CAACnK,MAAM;IAC7B,IAAIqK,UAAU,GAAG/N,GAAG,CAAC6N,QAAQ,EAAE,UAAUG,OAAO,EAAE;MAChD,OAAOL,KAAK,CAAC9I,eAAe,CAACmJ,OAAO,CAAC,CAAC5J,KAAK;IAC7C,CAAC,CAAC;IACF,IAAIsE,UAAU,GAAG,IAAI,CAACrG,WAAW;IAEjC,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAE8G,GAAG,GAAG,IAAI,CAACzD,KAAK,EAAE,EAAErD,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;MAChD,IAAI2G,MAAM,GAAG,IAAI,CAAC/G,WAAW,CAACI,CAAC,CAAC,CAAC,CAAC;;MAElC,QAAQqK,OAAO;QACb,KAAK,CAAC;UACJN,EAAE,CAACS,IAAI,CAACL,IAAI,EAAEnK,CAAC,CAAC;UAChB;QAEF,KAAK,CAAC;UACJ+J,EAAE,CAACS,IAAI,CAACL,IAAI,EAAElF,UAAU,CAACqF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC3D,MAAM,CAAC,EAAE3G,CAAC,CAAC;UACnD;QAEF,KAAK,CAAC;UACJ+J,EAAE,CAACS,IAAI,CAACL,IAAI,EAAElF,UAAU,CAACqF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC3D,MAAM,CAAC,EAAE1B,UAAU,CAACqF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC3D,MAAM,CAAC,EAAE3G,CAAC,CAAC;UACtF;QAEF;UACE,IAAIyK,CAAC,GAAG,CAAC;UACT,IAAIlD,KAAK,GAAG,EAAE;UAEd,OAAOkD,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;YACvBlD,KAAK,CAACkD,CAAC,CAAC,GAAGxF,UAAU,CAACqF,UAAU,CAACG,CAAC,CAAC,CAAC,CAAC9D,MAAM,CAAC;UAC9C,CAAC,CAAC;;UAGFY,KAAK,CAACkD,CAAC,CAAC,GAAGzK,CAAC;UACZ+J,EAAE,CAACW,KAAK,CAACP,IAAI,EAAE5C,KAAK,CAAC;MAAC;IAE5B;EACF,CAAC;EAEDlJ,IAAI,CAACmD,SAAS,CAACmJ,UAAU,GAAG,UAAUtI,IAAI,EAAE0H,EAAE,EAAEC,GAAG,EAAEC,SAAS,EAAE;IAC9D,YAAY;;IAEZ,IAAIC,KAAK,GAAG,IAAI;IAEhB,IAAI,CAAC,IAAI,CAACzL,MAAM,EAAE;MAChB;IACF;IAEA,IAAI,OAAO4D,IAAI,KAAK,UAAU,EAAE;MAC9B4H,SAAS,GAAGD,GAAG;MACfA,GAAG,GAAGD,EAAE;MACRA,EAAE,GAAG1H,IAAI;MACTA,IAAI,GAAG,EAAE;IACX,CAAC,CAAC;;IAGF,IAAI8H,IAAI,GAAGH,GAAG,IAAIC,SAAS,IAAI,IAAI;IACnC,IAAIG,QAAQ,GAAG7N,GAAG,CAACwB,mBAAmB,CAACsE,IAAI,CAAC,EAAE,IAAI,CAACZ,YAAY,EAAE,IAAI,CAAC;IAEtE,IAAIsB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCjF,kBAAkB,CAAC,IAAI,EAAEoM,QAAQ,CAAC;IACpC;IAEA,IAAI/G,KAAK,GAAG,IAAI,CAACA,KAAK,EAAE;IACxB,IAAI6C,IAAI,GAAG1I,cAAc,CAAC,IAAI,CAAC;IAC/B,IAAIwI,UAAU,GAAG,IAAIE,IAAI,CAAC7C,KAAK,CAAC;IAChC,IAAIkE,KAAK,GAAG,EAAE;IACd,IAAI8C,OAAO,GAAGD,QAAQ,CAACnK,MAAM;IAC7B,IAAI2K,MAAM,GAAG,CAAC;IACd,IAAIN,UAAU,GAAG/N,GAAG,CAAC6N,QAAQ,EAAE,UAAUG,OAAO,EAAE;MAChD,OAAOL,KAAK,CAAC9I,eAAe,CAACmJ,OAAO,CAAC,CAAC5J,KAAK;IAC7C,CAAC,CAAC;IACF,IAAIkK,IAAI,GAAGP,UAAU,CAAC,CAAC,CAAC;IACxB,IAAIrF,UAAU,GAAG,IAAI,CAACrG,WAAW;IAEjC,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqD,KAAK,EAAErD,CAAC,EAAE,EAAE;MAC9B,IAAI8K,IAAI,GAAG,KAAK,CAAC;MACjB,IAAInE,MAAM,GAAG,IAAI,CAAC/G,WAAW,CAACI,CAAC,CAAC,CAAC,CAAC;;MAElC,IAAIqK,OAAO,KAAK,CAAC,EAAE;QACjBS,IAAI,GAAGf,EAAE,CAACS,IAAI,CAACL,IAAI,EAAEnK,CAAC,CAAC;MACzB,CAAC,MAAM,IAAIqK,OAAO,KAAK,CAAC,EAAE;QACxB,IAAIhF,GAAG,GAAGJ,UAAU,CAAC4F,IAAI,CAAC,CAAClE,MAAM,CAAC;QAClCmE,IAAI,GAAGf,EAAE,CAACS,IAAI,CAACL,IAAI,EAAE9E,GAAG,EAAErF,CAAC,CAAC;MAC9B,CAAC,MAAM;QACL,IAAIyK,CAAC,GAAG,CAAC;QAET,OAAOA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;UACvBlD,KAAK,CAACkD,CAAC,CAAC,GAAGxF,UAAU,CAACqF,UAAU,CAACG,CAAC,CAAC,CAAC,CAAC9D,MAAM,CAAC;QAC9C;QAEAY,KAAK,CAACkD,CAAC,CAAC,GAAGzK,CAAC;QACZ8K,IAAI,GAAGf,EAAE,CAACW,KAAK,CAACP,IAAI,EAAE5C,KAAK,CAAC;MAC9B;MAEA,IAAIuD,IAAI,EAAE;QACR9E,UAAU,CAAC4E,MAAM,EAAE,CAAC,GAAGjE,MAAM;MAC/B;IACF,CAAC,CAAC;;IAGF,IAAIiE,MAAM,GAAGvH,KAAK,EAAE;MAClB,IAAI,CAACI,QAAQ,GAAGuC,UAAU;IAC5B;IAEA,IAAI,CAACvH,MAAM,GAAGmM,MAAM,CAAC,CAAC;;IAEtB,IAAI,CAACvL,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACO,WAAW,GAAG,IAAI,CAAC6D,QAAQ,GAAG9F,sBAAsB,GAAGD,yBAAyB;IACrF,OAAO,IAAI;EACb,CAAC;EACD;AACF;AACA;AACA;;EAGEW,IAAI,CAACmD,SAAS,CAACuJ,WAAW,GAAG,UAAUC,KAAK,EAAE;IAC5C,YAAY;;IAEZ,IAAId,KAAK,GAAG,IAAI;IAEhB,IAAIpD,GAAG,GAAG,IAAI,CAACrI,MAAM;IAErB,IAAI,CAACqI,GAAG,EAAE;MACR;IACF;IAEA,IAAIxI,UAAU,GAAG,EAAE;IAEnB,KAAK,IAAIoD,GAAG,IAAIsJ,KAAK,EAAE;MACrB,IAAIA,KAAK,CAACpJ,cAAc,CAACF,GAAG,CAAC,EAAE;QAC7BpD,UAAU,CAACoC,IAAI,CAACgB,GAAG,CAAC;MACtB;IACF;IAEA,IAAIqB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCjF,kBAAkB,CAAC,IAAI,EAAEM,UAAU,CAAC;IACtC;IAEA,IAAI+L,OAAO,GAAG/L,UAAU,CAAC2B,MAAM;IAE/B,IAAI,CAACoK,OAAO,EAAE;MACZ;IACF;IAEA,IAAIY,aAAa,GAAG,IAAI,CAAC5H,KAAK,EAAE;IAChC,IAAI6C,IAAI,GAAG1I,cAAc,CAAC,IAAI,CAAC;IAC/B,IAAIwI,UAAU,GAAG,IAAIE,IAAI,CAAC+E,aAAa,CAAC;IACxC,IAAIL,MAAM,GAAG,CAAC;IACd,IAAIC,IAAI,GAAGvM,UAAU,CAAC,CAAC,CAAC;IACxB,IAAIgM,UAAU,GAAG/N,GAAG,CAAC+B,UAAU,EAAE,UAAUiM,OAAO,EAAE;MAClD,OAAOL,KAAK,CAAC9I,eAAe,CAACmJ,OAAO,CAAC,CAAC5J,KAAK;IAC7C,CAAC,CAAC;IACF,IAAI2G,GAAG,GAAG0D,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI9F,GAAG,GAAGiG,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI5F,UAAU,GAAG,IAAI,CAACrG,WAAW;IACjC,IAAIsM,aAAa,GAAG,KAAK;IAEzB,IAAI,CAAC,IAAI,CAACzH,QAAQ,EAAE;MAClB;MACA,IAAIvB,GAAG,GAAG,CAAC;MAEX,IAAImI,OAAO,KAAK,CAAC,EAAE;QACjB,IAAIzE,UAAU,GAAGX,UAAU,CAACqF,UAAU,CAAC,CAAC,CAAC,CAAC;QAE1C,KAAK,IAAItK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;UAC5B,IAAIqF,GAAG,GAAGO,UAAU,CAAC5F,CAAC,CAAC,CAAC,CAAC;UACzB;UACA;UACA;UACA;;UAEA,IAAIqF,GAAG,IAAIiC,GAAG,IAAIjC,GAAG,IAAIN,GAAG,IAAIpD,KAAK,CAAC0D,GAAG,CAAC,EAAE;YAC1CW,UAAU,CAAC4E,MAAM,EAAE,CAAC,GAAG1I,GAAG;UAC5B;UAEAA,GAAG,EAAE;QACP;QAEAgJ,aAAa,GAAG,IAAI;MACtB,CAAC,MAAM,IAAIb,OAAO,KAAK,CAAC,EAAE;QACxB,IAAIzE,UAAU,GAAGX,UAAU,CAACqF,UAAU,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAIa,WAAW,GAAGlG,UAAU,CAACqF,UAAU,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAIc,IAAI,GAAGJ,KAAK,CAAC1M,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,IAAI+M,IAAI,GAAGL,KAAK,CAAC1M,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAElC,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,EAAE,EAAE;UAC5B,IAAIqF,GAAG,GAAGO,UAAU,CAAC5F,CAAC,CAAC;UACvB,IAAIsL,IAAI,GAAGH,WAAW,CAACnL,CAAC,CAAC,CAAC,CAAC;;UAE3B,IAAI,CAACqF,GAAG,IAAIiC,GAAG,IAAIjC,GAAG,IAAIN,GAAG,IAAIpD,KAAK,CAAC0D,GAAG,CAAC,MAAMiG,IAAI,IAAIF,IAAI,IAAIE,IAAI,IAAID,IAAI,IAAI1J,KAAK,CAAC2J,IAAI,CAAC,CAAC,EAAE;YAC7FtF,UAAU,CAAC4E,MAAM,EAAE,CAAC,GAAG1I,GAAG;UAC5B;UAEAA,GAAG,EAAE;QACP;QAEAgJ,aAAa,GAAG,IAAI;MACtB;IACF;IAEA,IAAI,CAACA,aAAa,EAAE;MAClB,IAAIb,OAAO,KAAK,CAAC,EAAE;QACjB,KAAK,IAAIrK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiL,aAAa,EAAEjL,CAAC,EAAE,EAAE;UACtC,IAAI2I,QAAQ,GAAG,IAAI,CAAC/I,WAAW,CAACI,CAAC,CAAC;UAClC,IAAIqF,GAAG,GAAGJ,UAAU,CAACqF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC3B,QAAQ,CAAC,CAAC,CAAC;;UAE/C,IAAItD,GAAG,IAAIiC,GAAG,IAAIjC,GAAG,IAAIN,GAAG,IAAIpD,KAAK,CAAC0D,GAAG,CAAC,EAAE;YAC1CW,UAAU,CAAC4E,MAAM,EAAE,CAAC,GAAGjC,QAAQ;UACjC;QACF;MACF,CAAC,MAAM;QACL,KAAK,IAAI3I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiL,aAAa,EAAEjL,CAAC,EAAE,EAAE;UACtC,IAAI8K,IAAI,GAAG,IAAI;UACf,IAAInC,QAAQ,GAAG,IAAI,CAAC/I,WAAW,CAACI,CAAC,CAAC;UAElC,KAAK,IAAIyK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;YAChC,IAAIc,IAAI,GAAGjN,UAAU,CAACmM,CAAC,CAAC;YACxB,IAAIpF,GAAG,GAAGJ,UAAU,CAACqF,UAAU,CAACG,CAAC,CAAC,CAAC,CAAC9B,QAAQ,CAAC,CAAC,CAAC;;YAE/C,IAAItD,GAAG,GAAG2F,KAAK,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIlG,GAAG,GAAG2F,KAAK,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;cAChDT,IAAI,GAAG,KAAK;YACd;UACF;UAEA,IAAIA,IAAI,EAAE;YACR9E,UAAU,CAAC4E,MAAM,EAAE,CAAC,GAAG,IAAI,CAAChL,WAAW,CAACI,CAAC,CAAC;UAC5C;QACF;MACF;IACF,CAAC,CAAC;;IAGF,IAAI4K,MAAM,GAAGK,aAAa,EAAE;MAC1B,IAAI,CAACxH,QAAQ,GAAGuC,UAAU;IAC5B;IAEA,IAAI,CAACvH,MAAM,GAAGmM,MAAM,CAAC,CAAC;;IAEtB,IAAI,CAACvL,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACO,WAAW,GAAG,IAAI,CAAC6D,QAAQ,GAAG9F,sBAAsB,GAAGD,yBAAyB;IACrF,OAAO,IAAI;EACb,CAAC;EACD;;EAGAW,IAAI,CAACmD,SAAS,CAACgK,QAAQ,GAAG,UAAUnJ,IAAI,EAAE0H,EAAE,EAAEC,GAAG,EAAEC,SAAS,EAAE;IAC5D,YAAY;;IAEZ,IAAI,OAAO5H,IAAI,KAAK,UAAU,EAAE;MAC9B4H,SAAS,GAAGD,GAAG;MACfA,GAAG,GAAGD,EAAE;MACRA,EAAE,GAAG1H,IAAI;MACTA,IAAI,GAAG,EAAE;IACX,CAAC,CAAC;;IAGF2H,GAAG,GAAGA,GAAG,IAAIC,SAAS,IAAI,IAAI;IAC9B,IAAIwB,MAAM,GAAG,EAAE;IACf,IAAI,CAACtD,IAAI,CAAC9F,IAAI,EAAE,YAAY;MAC1BoJ,MAAM,CAAC/K,IAAI,CAACqJ,EAAE,IAAIA,EAAE,CAACW,KAAK,CAAC,IAAI,EAAEgB,SAAS,CAAC,CAAC;IAC9C,CAAC,EAAE1B,GAAG,CAAC;IACP,OAAOyB,MAAM;EACf,CAAC;EAEDpN,IAAI,CAACmD,SAAS,CAACjF,GAAG,GAAG,UAAU8F,IAAI,EAAE0H,EAAE,EAAEC,GAAG,EAAEC,SAAS,EAAE;IACvD,YAAY;;IAAE;IAEd,IAAIE,IAAI,GAAGH,GAAG,IAAIC,SAAS,IAAI,IAAI;IACnC,IAAIG,QAAQ,GAAG7N,GAAG,CAACwB,mBAAmB,CAACsE,IAAI,CAAC,EAAE,IAAI,CAACZ,YAAY,EAAE,IAAI,CAAC;IAEtE,IAAIsB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCjF,kBAAkB,CAAC,IAAI,EAAEoM,QAAQ,CAAC;IACpC;IAEA,IAAIuB,IAAI,GAAG1N,wBAAwB,CAAC,IAAI,EAAEmM,QAAQ,CAAC;IACnD,IAAIxF,OAAO,GAAG+G,IAAI,CAAChN,QAAQ,CAAC,CAAC;IAC7B;;IAEAgN,IAAI,CAAClI,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC7BkI,IAAI,CAAC/L,WAAW,GAAG+L,IAAI,CAAClI,QAAQ,GAAG9F,sBAAsB,GAAGD,yBAAyB;IACrF,IAAIkO,WAAW,GAAG,EAAE;IACpB,IAAIvB,OAAO,GAAGD,QAAQ,CAACnK,MAAM;IAC7B,IAAI4L,SAAS,GAAG,IAAI,CAACxI,KAAK,EAAE;IAC5B,IAAIqB,MAAM,GAAG,EAAE;IACf,IAAII,SAAS,GAAG6G,IAAI,CAACvM,UAAU;IAE/B,KAAK,IAAIsK,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGmC,SAAS,EAAEnC,SAAS,EAAE,EAAE;MAC1D,KAAK,IAAIoC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGzB,OAAO,EAAEyB,QAAQ,EAAE,EAAE;QACrDpH,MAAM,CAACoH,QAAQ,CAAC,GAAG,IAAI,CAACrF,GAAG,CAAC2D,QAAQ,CAAC0B,QAAQ,CAAC,EAAEpC,SAAS,CAAC;MAC5D;MAEAhF,MAAM,CAAC2F,OAAO,CAAC,GAAGX,SAAS;MAC3B,IAAIqC,QAAQ,GAAGhC,EAAE,IAAIA,EAAE,CAACW,KAAK,CAACP,IAAI,EAAEzF,MAAM,CAAC;MAE3C,IAAIqH,QAAQ,IAAI,IAAI,EAAE;QACpB;QACA,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;UAChCH,WAAW,CAAC,CAAC,CAAC,GAAGG,QAAQ;UACzBA,QAAQ,GAAGH,WAAW;QACxB;QAEA,IAAIjD,QAAQ,GAAG,IAAI,CAAC/I,WAAW,CAAC8J,SAAS,CAAC;QAE1C,KAAK,IAAI1J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+L,QAAQ,CAAC9L,MAAM,EAAED,CAAC,EAAE,EAAE;UACxC,IAAI0B,GAAG,GAAG0I,QAAQ,CAACpK,CAAC,CAAC;UACrB,IAAIqF,GAAG,GAAG0G,QAAQ,CAAC/L,CAAC,CAAC;UACrB,IAAIgM,cAAc,GAAGlH,SAAS,CAACpD,GAAG,CAAC;UACnC,IAAI8E,QAAQ,GAAG5B,OAAO,CAAClD,GAAG,CAAC;UAE3B,IAAI8E,QAAQ,EAAE;YACZA,QAAQ,CAACmC,QAAQ,CAAC,GAAGtD,GAAG;UAC1B;UAEA,IAAIA,GAAG,GAAG2G,cAAc,CAAC,CAAC,CAAC,EAAE;YAC3BA,cAAc,CAAC,CAAC,CAAC,GAAG3G,GAAG;UACzB;UAEA,IAAIA,GAAG,GAAG2G,cAAc,CAAC,CAAC,CAAC,EAAE;YAC3BA,cAAc,CAAC,CAAC,CAAC,GAAG3G,GAAG;UACzB;QACF;MACF;IACF;IAEA,OAAOsG,IAAI;EACb,CAAC;EACD;AACF;AACA;AACA;;EAGEtN,IAAI,CAACmD,SAAS,CAACyK,UAAU,GAAG,UAAUC,SAAS,EAAEC,IAAI,EAAEC,WAAW,EAAEC,WAAW,EAAE;IAC/E,IAAIV,IAAI,GAAG1N,wBAAwB,CAAC,IAAI,EAAE,CAACiO,SAAS,CAAC,CAAC;IACtD,IAAII,aAAa,GAAGX,IAAI,CAAChN,QAAQ;IACjC,IAAI4N,WAAW,GAAG,EAAE;IACpB,IAAIC,SAAS,GAAGrQ,SAAS,CAAC,CAAC,GAAGgQ,IAAI,CAAC;IACnC,IAAI3F,QAAQ,GAAG8F,aAAa,CAACJ,SAAS,CAAC;IACvC,IAAIpF,GAAG,GAAG,IAAI,CAACzD,KAAK,EAAE;IACtB,IAAI2I,cAAc,GAAGL,IAAI,CAACvM,UAAU,CAAC8M,SAAS,CAAC;IAC/C,IAAIlG,UAAU,GAAG,KAAKxI,cAAc,CAAC,IAAI,CAAC,EAAEsJ,GAAG,CAAC;IAChD,IAAI8D,MAAM,GAAG,CAAC;IAEd,KAAK,IAAI5K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8G,GAAG,EAAE9G,CAAC,IAAIwM,SAAS,EAAE;MACvC;MACA,IAAIA,SAAS,GAAG1F,GAAG,GAAG9G,CAAC,EAAE;QACvBwM,SAAS,GAAG1F,GAAG,GAAG9G,CAAC;QACnBuM,WAAW,CAACtM,MAAM,GAAGuM,SAAS;MAChC;MAEA,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,SAAS,EAAE/B,CAAC,EAAE,EAAE;QAClC,IAAIgC,OAAO,GAAG,IAAI,CAAC7M,WAAW,CAACI,CAAC,GAAGyK,CAAC,CAAC;QACrC8B,WAAW,CAAC9B,CAAC,CAAC,GAAGjE,QAAQ,CAACiG,OAAO,CAAC;MACpC;MAEA,IAAIlF,KAAK,GAAG6E,WAAW,CAACG,WAAW,CAAC;MACpC,IAAIG,cAAc,GAAG,IAAI,CAAC9M,WAAW,CAACxD,IAAI,CAACkL,GAAG,CAACtH,CAAC,GAAGqM,WAAW,CAACE,WAAW,EAAEhF,KAAK,CAAC,IAAI,CAAC,EAAET,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEpGN,QAAQ,CAACkG,cAAc,CAAC,GAAGnF,KAAK;MAEhC,IAAIA,KAAK,GAAGyE,cAAc,CAAC,CAAC,CAAC,EAAE;QAC7BA,cAAc,CAAC,CAAC,CAAC,GAAGzE,KAAK;MAC3B;MAEA,IAAIA,KAAK,GAAGyE,cAAc,CAAC,CAAC,CAAC,EAAE;QAC7BA,cAAc,CAAC,CAAC,CAAC,GAAGzE,KAAK;MAC3B;MAEAvB,UAAU,CAAC4E,MAAM,EAAE,CAAC,GAAG8B,cAAc;IACvC;IAEAf,IAAI,CAAClN,MAAM,GAAGmM,MAAM;IACpBe,IAAI,CAAClI,QAAQ,GAAGuC,UAAU;IAC1B2F,IAAI,CAAC/L,WAAW,GAAGjC,sBAAsB;IACzC,OAAOgO,IAAI;EACb,CAAC;EACD;AACF;AACA;AACA;AACA;;EAGEtN,IAAI,CAACmD,SAAS,CAACmL,cAAc,GAAG,UAAUC,cAAc,EAAET,IAAI,EAAE;IAC9D,IAAIR,IAAI,GAAG1N,wBAAwB,CAAC,IAAI,EAAE,EAAE,CAAC;IAC7C,IAAIqO,aAAa,GAAGX,IAAI,CAAChN,QAAQ;IACjC,IAAI6H,QAAQ,GAAG8F,aAAa,CAACM,cAAc,CAAC;IAC5C,IAAI9F,GAAG,GAAG,IAAI,CAACzD,KAAK,EAAE;IACtB,IAAI2C,UAAU,GAAG,KAAKxI,cAAc,CAAC,IAAI,CAAC,EAAEsJ,GAAG,CAAC;IAChD,IAAI+F,YAAY,GAAG,CAAC;IACpB,IAAIL,SAAS,GAAGrQ,SAAS,CAAC,CAAC,GAAGgQ,IAAI,CAAC;IACnC,IAAIW,eAAe,GAAG,IAAI,CAAClN,WAAW,CAAC,CAAC,CAAC;IACzC,IAAImN,OAAO;IACX,IAAIC,IAAI;IACR,IAAIC,YAAY,CAAC,CAAC;;IAElBjH,UAAU,CAAC6G,YAAY,EAAE,CAAC,GAAGC,eAAe;IAE5C,KAAK,IAAI9M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8G,GAAG,GAAG,CAAC,EAAE9G,CAAC,IAAIwM,SAAS,EAAE;MAC3C,IAAIU,cAAc,GAAG9Q,IAAI,CAACkL,GAAG,CAACtH,CAAC,GAAGwM,SAAS,EAAE1F,GAAG,GAAG,CAAC,CAAC;MACrD,IAAIqG,YAAY,GAAG/Q,IAAI,CAACkL,GAAG,CAACtH,CAAC,GAAGwM,SAAS,GAAG,CAAC,EAAE1F,GAAG,CAAC;MACnD,IAAIsG,IAAI,GAAG,CAACD,YAAY,GAAGD,cAAc,IAAI,CAAC;MAC9C,IAAIG,IAAI,GAAG,CAAC;MAEZ,KAAK,IAAInL,GAAG,GAAGgL,cAAc,EAAEhL,GAAG,GAAGiL,YAAY,EAAEjL,GAAG,EAAE,EAAE;QACxD,IAAIyG,QAAQ,GAAG,IAAI,CAAC/I,WAAW,CAACsC,GAAG,CAAC;QACpC,IAAIoL,CAAC,GAAG9G,QAAQ,CAACmC,QAAQ,CAAC;QAE1B,IAAIhH,KAAK,CAAC2L,CAAC,CAAC,EAAE;UACZ;QACF;QAEAD,IAAI,IAAIC,CAAC;MACX;MAEAD,IAAI,IAAIF,YAAY,GAAGD,cAAc;MACrC,IAAIK,UAAU,GAAGvN,CAAC;MAClB,IAAIwN,QAAQ,GAAGpR,IAAI,CAACkL,GAAG,CAACtH,CAAC,GAAGwM,SAAS,EAAE1F,GAAG,CAAC;MAC3C,IAAI2G,OAAO,GAAGzN,CAAC,GAAG,CAAC;MACnB,IAAI0N,OAAO,GAAGlH,QAAQ,CAACsG,eAAe,CAAC;MACvCC,OAAO,GAAG,CAAC,CAAC;MACZE,YAAY,GAAGM,UAAU,CAAC,CAAC;MAC3B;;MAEA,KAAK,IAAIrL,GAAG,GAAGqL,UAAU,EAAErL,GAAG,GAAGsL,QAAQ,EAAEtL,GAAG,EAAE,EAAE;QAChD,IAAIyG,QAAQ,GAAG,IAAI,CAAC/I,WAAW,CAACsC,GAAG,CAAC;QACpC,IAAIoL,CAAC,GAAG9G,QAAQ,CAACmC,QAAQ,CAAC;QAE1B,IAAIhH,KAAK,CAAC2L,CAAC,CAAC,EAAE;UACZ;QACF,CAAC,CAAC;;QAGFN,IAAI,GAAG5Q,IAAI,CAACyN,GAAG,CAAC,CAAC4D,OAAO,GAAGL,IAAI,KAAKE,CAAC,GAAGI,OAAO,CAAC,GAAG,CAACD,OAAO,GAAGvL,GAAG,KAAKmL,IAAI,GAAGK,OAAO,CAAC,CAAC;QAEtF,IAAIV,IAAI,GAAGD,OAAO,EAAE;UAClBA,OAAO,GAAGC,IAAI;UACdC,YAAY,GAAGtE,QAAQ,CAAC,CAAC;QAC3B;MACF;;MAEA3C,UAAU,CAAC6G,YAAY,EAAE,CAAC,GAAGI,YAAY;MACzCH,eAAe,GAAGG,YAAY,CAAC,CAAC;IAClC,CAAC,CAAC;;IAGFjH,UAAU,CAAC6G,YAAY,EAAE,CAAC,GAAG,IAAI,CAACjN,WAAW,CAACkH,GAAG,GAAG,CAAC,CAAC;IACtD6E,IAAI,CAAClN,MAAM,GAAGoO,YAAY;IAC1BlB,IAAI,CAAClI,QAAQ,GAAGuC,UAAU;IAC1B2F,IAAI,CAAC/L,WAAW,GAAGjC,sBAAsB;IACzC,OAAOgO,IAAI;EACb,CAAC;EACD;AACF;AACA;EACE;;EAGAtN,IAAI,CAACmD,SAAS,CAACmM,YAAY,GAAG,UAAUzL,GAAG,EAAE;IAC3C,IAAI3D,SAAS,GAAG,IAAI,CAACA,SAAS;IAC9B,IAAIoH,QAAQ,GAAG,IAAI,CAACmE,cAAc,CAAC5H,GAAG,CAAC;IACvC,OAAO,IAAI3G,KAAK,CAACoK,QAAQ,EAAEpH,SAAS,EAAEA,SAAS,IAAIA,SAAS,CAACqP,OAAO,CAAC;EACvE,CAAC;EACD;AACF;AACA;;EAGEvP,IAAI,CAACmD,SAAS,CAACmI,IAAI,GAAG,UAAUkE,SAAS,EAAE;IACzC,IAAIC,QAAQ,GAAG,IAAI;IACnB,OAAO,IAAItS,UAAU,CAACqS,SAAS,GAAGA,SAAS,CAAC9H,UAAU,EAAE,GAAG,EAAE,EAAE,IAAI,CAACA,UAAU,EAAE,EAAE,UAAU7D,GAAG,EAAE;MAC/F,OAAOtE,KAAK,CAACiQ,SAAS,EAAE3L,GAAG,CAAC;IAC9B,CAAC,EAAE,UAAUA,GAAG,EAAE;MAChB,OAAOtE,KAAK,CAACkQ,QAAQ,EAAE5L,GAAG,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC;EACD;AACF;AACA;;EAGE7D,IAAI,CAACmD,SAAS,CAACuM,SAAS,GAAG,UAAUnG,GAAG,EAAE;IACxC,IAAIoG,MAAM,GAAG,IAAI,CAACjP,OAAO;IACzB,OAAOiP,MAAM,IAAIA,MAAM,CAACpG,GAAG,CAAC;EAC9B,CAAC;EAEDvJ,IAAI,CAACmD,SAAS,CAACyM,SAAS,GAAG,UAAUC,KAAK,EAAE7I,GAAG,EAAE;IAC/C,IAAI,CAACtG,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,CAAC,CAAC;IAEjC,IAAIzC,QAAQ,CAAC4R,KAAK,CAAC,EAAE;MACnB5S,MAAM,CAACwM,MAAM,CAAC,IAAI,CAAC/I,OAAO,EAAEmP,KAAK,CAAC;IACpC,CAAC,MAAM;MACL,IAAI,CAACnP,OAAO,CAACmP,KAAK,CAAC,GAAG7I,GAAG;IAC3B;EACF,CAAC;EACD;AACF;AACA;EACE;;EAGAhH,IAAI,CAACmD,SAAS,CAAC2M,aAAa,GAAG,UAAUjM,GAAG,EAAE0F,GAAG,EAAE;IACjD,IAAIwG,UAAU,GAAG,IAAI,CAACnP,YAAY,CAACiD,GAAG,CAAC;IACvC,IAAImD,GAAG,GAAG+I,UAAU,IAAIA,UAAU,CAACxG,GAAG,CAAC;IAEvC,IAAIvC,GAAG,IAAI,IAAI,EAAE;MACf;MACA,OAAO,IAAI,CAAC0I,SAAS,CAACnG,GAAG,CAAC;IAC5B;IAEA,OAAOvC,GAAG;EACZ,CAAC;EACD;AACF;AACA;;EAGEhH,IAAI,CAACmD,SAAS,CAAC6M,aAAa,GAAG,YAAY;IACzC,OAAO,IAAI,CAACpP,YAAY,CAACgB,MAAM,GAAG,CAAC;EACrC,CAAC;EACD;AACF;AACA;EACE;;EAGA5B,IAAI,CAACmD,SAAS,CAAC8M,sBAAsB,GAAG,UAAUpM,GAAG,EAAE0F,GAAG,EAAE;IAC1D,IAAI2G,WAAW,GAAG,IAAI,CAACtP,YAAY;IACnC,IAAImP,UAAU,GAAGG,WAAW,CAACrM,GAAG,CAAC;IAEjC,IAAI,CAACkM,UAAU,EAAE;MACfA,UAAU,GAAGG,WAAW,CAACrM,GAAG,CAAC,GAAG,CAAC,CAAC;IACpC;IAEA,IAAImD,GAAG,GAAG+I,UAAU,CAACxG,GAAG,CAAC;IAEzB,IAAIvC,GAAG,IAAI,IAAI,EAAE;MACfA,GAAG,GAAG,IAAI,CAAC0I,SAAS,CAACnG,GAAG,CAAC,CAAC,CAAC;;MAE3B,IAAItM,MAAM,CAACuL,OAAO,CAACxB,GAAG,CAAC,EAAE;QACvBA,GAAG,GAAGA,GAAG,CAACrD,KAAK,EAAE;MACnB,CAAC,MAAM,IAAI1F,QAAQ,CAAC+I,GAAG,CAAC,EAAE;QACxBA,GAAG,GAAG/J,MAAM,CAACwM,MAAM,CAAC,CAAC,CAAC,EAAEzC,GAAG,CAAC;MAC9B;MAEA+I,UAAU,CAACxG,GAAG,CAAC,GAAGvC,GAAG;IACvB;IAEA,OAAOA,GAAG;EACZ,CAAC,CAAC,CAAC;;EAGHhH,IAAI,CAACmD,SAAS,CAACgN,aAAa,GAAG,UAAUtM,GAAG,EAAE0F,GAAG,EAAEL,KAAK,EAAE;IACxD,IAAI6G,UAAU,GAAG,IAAI,CAACnP,YAAY,CAACiD,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7C,IAAI,CAACjD,YAAY,CAACiD,GAAG,CAAC,GAAGkM,UAAU;IAEnC,IAAI9R,QAAQ,CAACsL,GAAG,CAAC,EAAE;MACjBtM,MAAM,CAACwM,MAAM,CAACsG,UAAU,EAAExG,GAAG,CAAC;IAChC,CAAC,MAAM;MACLwG,UAAU,CAACxG,GAAG,CAAC,GAAGL,KAAK;IACzB;EACF,CAAC;EACD;AACF;AACA;;EAGElJ,IAAI,CAACmD,SAAS,CAACiN,cAAc,GAAG,YAAY;IAC1C,IAAI,CAAC1P,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACE,YAAY,GAAG,EAAE;EACxB,CAAC;EAEDZ,IAAI,CAACmD,SAAS,CAACkN,SAAS,GAAG,UAAU9G,GAAG,EAAEvC,GAAG,EAAE;IAC7C,IAAI/I,QAAQ,CAACsL,GAAG,CAAC,EAAE;MACjB,KAAK,IAAI+G,MAAM,IAAI/G,GAAG,EAAE;QACtB,IAAIA,GAAG,CAAChG,cAAc,CAAC+M,MAAM,CAAC,EAAE;UAC9B,IAAI,CAACD,SAAS,CAACC,MAAM,EAAE/G,GAAG,CAAC+G,MAAM,CAAC,CAAC;QACrC;MACF;MAEA;IACF;IAEA,IAAI,CAAC3P,OAAO,CAAC4I,GAAG,CAAC,GAAGvC,GAAG;EACzB,CAAC;EACD;AACF;AACA;;EAGEhH,IAAI,CAACmD,SAAS,CAACoN,SAAS,GAAG,UAAUhH,GAAG,EAAE;IACxC,OAAO,IAAI,CAAC5I,OAAO,CAAC4I,GAAG,CAAC;EAC1B,CAAC;EACD;AACF;AACA;;EAGEvJ,IAAI,CAACmD,SAAS,CAACqN,aAAa,GAAG,UAAU3M,GAAG,EAAE;IAC5C,OAAO,IAAI,CAAChD,YAAY,CAACgD,GAAG,CAAC;EAC/B,CAAC;EACD;AACF;AACA;;EAGE7D,IAAI,CAACmD,SAAS,CAACsN,aAAa,GAAG,UAAU5M,GAAG,EAAE6M,MAAM,EAAEC,KAAK,EAAE;IAC3D,IAAI,CAAC9P,YAAY,CAACgD,GAAG,CAAC,GAAG8M,KAAK,GAAG1T,MAAM,CAACwM,MAAM,CAAC,IAAI,CAAC5I,YAAY,CAACgD,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE6M,MAAM,CAAC,GAAGA,MAAM;EAC/F,CAAC;EACD;AACF;AACA;;EAGE1Q,IAAI,CAACmD,SAAS,CAACyN,gBAAgB,GAAG,YAAY;IAC5C,IAAI,CAAC/P,YAAY,CAACe,MAAM,GAAG,CAAC;EAC9B,CAAC;EACD;AACF;AACA;;EAGE5B,IAAI,CAACmD,SAAS,CAAC0N,gBAAgB,GAAG,UAAUhN,GAAG,EAAEiN,EAAE,EAAE;IACnD,IAAI5Q,SAAS,GAAG,IAAI,CAACA,SAAS;IAE9B,IAAI4Q,EAAE,EAAE;MACN,IAAIC,MAAM,GAAGpT,SAAS,CAACmT,EAAE,CAAC,CAAC,CAAC;MAC5B;;MAEAC,MAAM,CAAC1F,SAAS,GAAGxH,GAAG;MACtBkN,MAAM,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC/BD,MAAM,CAACE,WAAW,GAAG/Q,SAAS,IAAIA,SAAS,CAAC+Q,WAAW,CAAC,CAAC;;MAEzD,IAAIH,EAAE,CAAC3Q,IAAI,KAAK,OAAO,EAAE;QACvB2Q,EAAE,CAACI,QAAQ,CAACpR,yBAAyB,EAAEgR,EAAE,CAAC;MAC5C;IACF;IAEA,IAAI,CAAChQ,WAAW,CAAC+C,GAAG,CAAC,GAAGiN,EAAE;EAC5B,CAAC;EAED9Q,IAAI,CAACmD,SAAS,CAACgO,gBAAgB,GAAG,UAAUtN,GAAG,EAAE;IAC/C,OAAO,IAAI,CAAC/C,WAAW,CAAC+C,GAAG,CAAC;EAC9B,CAAC;EAED7D,IAAI,CAACmD,SAAS,CAACiO,iBAAiB,GAAG,UAAU1F,EAAE,EAAE2F,OAAO,EAAE;IACxDpU,MAAM,CAAC6M,IAAI,CAAC,IAAI,CAAChJ,WAAW,EAAE,UAAUgQ,EAAE,EAAEjN,GAAG,EAAE;MAC/C,IAAIiN,EAAE,EAAE;QACNpF,EAAE,IAAIA,EAAE,CAACS,IAAI,CAACkF,OAAO,EAAEP,EAAE,EAAEjN,GAAG,CAAC;MACjC;IACF,CAAC,CAAC;EACJ,CAAC;EACD;AACF;AACA;AACA;;EAGE7D,IAAI,CAACmD,SAAS,CAACmO,YAAY,GAAG,UAAUhE,IAAI,EAAE;IAC5C,IAAI,CAACA,IAAI,EAAE;MACT,IAAIiE,iBAAiB,GAAGrT,GAAG,CAAC,IAAI,CAAC+B,UAAU,EAAE,IAAI,CAACuD,gBAAgB,EAAE,IAAI,CAAC;MACzE8J,IAAI,GAAG,IAAItN,IAAI,CAACuR,iBAAiB,EAAE,IAAI,CAACrR,SAAS,CAAC;IACpD,CAAC,CAAC;;IAGFoN,IAAI,CAAChN,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC7BgN,IAAI,CAAC/M,WAAW,GAAG,IAAI,CAACA,WAAW;IACnCR,kBAAkB,CAACuN,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEhC,IAAI,IAAI,CAAClI,QAAQ,EAAE;MACjB,IAAIyC,IAAI,GAAG,IAAI,CAACzC,QAAQ,CAAC0C,WAAW;MAEpC,IAAID,IAAI,KAAKrJ,KAAK,EAAE;QAClB,IAAIuJ,SAAS,GAAG,IAAI,CAAC3C,QAAQ,CAACxD,MAAM;QACpC0L,IAAI,CAAClI,QAAQ,GAAG,IAAIyC,IAAI,CAACE,SAAS,CAAC;QAEnC,KAAK,IAAIpG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoG,SAAS,EAAEpG,CAAC,EAAE,EAAE;UAClC2L,IAAI,CAAClI,QAAQ,CAACzD,CAAC,CAAC,GAAG,IAAI,CAACyD,QAAQ,CAACzD,CAAC,CAAC;QACrC;MACF,CAAC,MAAM;QACL2L,IAAI,CAAClI,QAAQ,GAAG,IAAIyC,IAAI,CAAC,IAAI,CAACzC,QAAQ,CAAC;MACzC;IACF,CAAC,MAAM;MACLkI,IAAI,CAAClI,QAAQ,GAAG,IAAI;IACtB;IAEAkI,IAAI,CAAC/L,WAAW,GAAG+L,IAAI,CAAClI,QAAQ,GAAG9F,sBAAsB,GAAGD,yBAAyB;IACrF,OAAOiO,IAAI;EACb,CAAC;EACD;AACF;AACA;;EAGEtN,IAAI,CAACmD,SAAS,CAACqO,UAAU,GAAG,UAAUC,UAAU,EAAEC,cAAc,EAAE;IAChE,IAAIC,cAAc,GAAG,IAAI,CAACF,UAAU,CAAC;IAErC,IAAI,OAAOE,cAAc,KAAK,UAAU,EAAE;MACxC;IACF;IAEA,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,IAAI,EAAE;IAEnD,IAAI,CAACA,gBAAgB,CAACvP,IAAI,CAACoP,UAAU,CAAC;IAEtC,IAAI,CAACA,UAAU,CAAC,GAAG,YAAY;MAC7B,IAAII,GAAG,GAAGF,cAAc,CAACtF,KAAK,CAAC,IAAI,EAAEgB,SAAS,CAAC;MAC/C,OAAOqE,cAAc,CAACrF,KAAK,CAAC,IAAI,EAAE,CAACwF,GAAG,CAAC,CAACC,MAAM,CAAC7U,MAAM,CAAC0G,KAAK,CAAC0J,SAAS,CAAC,CAAC,CAAC;IAC1E,CAAC;EACH,CAAC,CAAC,CAAC;EACH;EACA;;EAGArN,IAAI,CAAC+R,aAAa,GAAG,YAAY;IAC/B9S,sBAAsB,GAAG;MACvB0G,SAAS,EAAEqM,iBAAiB;MAC5BC,UAAU,EAAE,UAAU3K,QAAQ,EAAE4E,OAAO,EAAEb,SAAS,EAAEoC,QAAQ,EAAE;QAC5D,OAAO7P,cAAc,CAAC0J,QAAQ,CAAC4E,OAAO,CAAC,EAAE,IAAI,CAACnJ,eAAe,CAACmJ,OAAO,CAAC,CAAC;MACzE,CAAC;MACDgG,YAAY,EAAEF,iBAAiB;MAC/BG,QAAQ,EAAE,UAAU7K,QAAQ,EAAE4E,OAAO,EAAEb,SAAS,EAAEoC,QAAQ,EAAE;QAC1D;QACA;QACA;QACA;QACA,IAAIvE,KAAK,GAAG5B,QAAQ,KAAKA,QAAQ,CAAC4B,KAAK,IAAI,IAAI,GAAG5B,QAAQ,GAAGA,QAAQ,CAAC4B,KAAK,CAAC,CAAC,CAAC;;QAE9E,IAAI,CAAC,IAAI,CAACjE,QAAQ,CAACY,IAAI,IAAIpI,gBAAgB,CAAC6J,QAAQ,CAAC,EAAE;UACrD,IAAI,CAACnG,aAAa,GAAG,IAAI;QAC3B;QAEA,OAAOvD,cAAc,CAACsL,KAAK,YAAY1K,KAAK,GAAG0K,KAAK,CAACuE,QAAQ,CAAC,CAAC;QAAA,EAC7DvE,KAAK,EAAE,IAAI,CAACnG,eAAe,CAACmJ,OAAO,CAAC,CAAC;MACzC,CAAC;MACDkG,UAAU,EAAE,UAAU9K,QAAQ,EAAE4E,OAAO,EAAEb,SAAS,EAAEoC,QAAQ,EAAE;QAC5D,OAAOnG,QAAQ,CAACmG,QAAQ,CAAC;MAC3B;IACF,CAAC;IAED,SAASuE,iBAAiB,CAAC1K,QAAQ,EAAE4E,OAAO,EAAEb,SAAS,EAAEoC,QAAQ,EAAE;MACjE,OAAO7P,cAAc,CAAC0J,QAAQ,CAACmG,QAAQ,CAAC,EAAE,IAAI,CAAC1K,eAAe,CAACmJ,OAAO,CAAC,CAAC;IAC1E;IAEAhN,oBAAoB,GAAG,UAAUoO,IAAI,EAAE;MACrC,IAAI5L,kBAAkB,GAAG4L,IAAI,CAACrK,mBAAmB;MACjDhG,MAAM,CAAC6M,IAAI,CAACpI,kBAAkB,EAAE,UAAU0I,eAAe,EAAE/G,GAAG,EAAE;QAC9D,IAAIgP,OAAO,GAAG/E,IAAI,CAACvK,eAAe,CAACM,GAAG,CAAC,CAAC,CAAC;;QAEzC,IAAIV,WAAW,GAAG0P,OAAO,CAAC1P,WAAW;QAErC,IAAIA,WAAW,EAAE;UACfyH,eAAe,GAAG1I,kBAAkB,CAAC2B,GAAG,CAAC,GAAG,IAAIzE,cAAc,CAAC+D,WAAW,CAAC2P,UAAU,CAAC1Q,MAAM,CAAC,CAAC,CAAC;UAC/F;;UAEA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyI,eAAe,CAACxI,MAAM,EAAED,CAAC,EAAE,EAAE;YAC/CyI,eAAe,CAACzI,CAAC,CAAC,GAAGvD,eAAe;UACtC;UAEA,KAAK,IAAIuD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2L,IAAI,CAAClN,MAAM,EAAEuB,CAAC,EAAE,EAAE;YACpC;YACAyI,eAAe,CAACkD,IAAI,CAAClF,GAAG,CAAC/E,GAAG,EAAE1B,CAAC,CAAC,CAAC,GAAGA,CAAC;UACvC;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAEDnC,kBAAkB,GAAG,UAAU8N,IAAI,EAAEvG,MAAM,EAAEpE,WAAW,EAAE2H,QAAQ,EAAE;MAClE,IAAItD,GAAG;MACP,IAAIuL,KAAK,GAAGjF,IAAI,CAAC/M,WAAW,CAACwG,MAAM,CAAC;MAEpC,IAAIwL,KAAK,EAAE;QACTvL,GAAG,GAAGuL,KAAK,CAACjI,QAAQ,CAAC;QAErB,IAAI3H,WAAW,IAAIA,WAAW,CAAC2P,UAAU,CAAC1Q,MAAM,EAAE;UAChDoF,GAAG,GAAGrE,WAAW,CAAC2P,UAAU,CAACtL,GAAG,CAAC;QACnC;MACF;MAEA,OAAOtJ,mBAAmB,CAACsJ,GAAG,EAAE,IAAI,CAAC;IACvC,CAAC;IAED7H,cAAc,GAAG,UAAUmO,IAAI,EAAE;MAC/B;MACA,OAAOA,IAAI,CAACjN,SAAS,GAAG,KAAK,GAAG3B,eAAe,GAAGG,eAAe;IACnE,CAAC;IAEDO,cAAc,GAAG,UAAUmH,OAAO,EAAE8L,OAAO,EAAEnM,GAAG,EAAEgB,MAAM,EAAE;MACxD,IAAIsL,QAAQ,GAAGlU,SAAS,CAAC+T,OAAO,CAAClS,IAAI,CAAC;MACtC,IAAIkD,GAAG,GAAGgP,OAAO,CAACrQ,IAAI;MAEtB,IAAIkF,MAAM,EAAE;QACV,IAAIuL,QAAQ,GAAGlM,OAAO,CAAClD,GAAG,CAAC;QAC3B,IAAIqP,MAAM,GAAGD,QAAQ,IAAIA,QAAQ,CAAC7Q,MAAM;QAExC,IAAI,EAAE8Q,MAAM,KAAKxM,GAAG,CAAC,EAAE;UACrB,IAAIyM,QAAQ,GAAG,IAAIH,QAAQ,CAACtM,GAAG,CAAC,CAAC,CAAC;UAClC;;UAEA,KAAK,IAAI0M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAEE,CAAC,EAAE,EAAE;YAC/BD,QAAQ,CAACC,CAAC,CAAC,GAAGH,QAAQ,CAACG,CAAC,CAAC;UAC3B;UAEArM,OAAO,CAAClD,GAAG,CAAC,GAAGsP,QAAQ;QACzB;MACF,CAAC,MAAM;QACLpM,OAAO,CAAClD,GAAG,CAAC,GAAG,IAAImP,QAAQ,CAACtM,GAAG,CAAC;MAClC;IACF,CAAC;IAED7G,yBAAyB,GAAG,UAAUwE,GAAG,EAAE;MACzC,OAAOA,GAAG;IACZ,CAAC;IAEDvE,sBAAsB,GAAG,UAAUuE,GAAG,EAAE;MACtC,IAAIA,GAAG,GAAG,IAAI,CAACzD,MAAM,IAAIyD,GAAG,IAAI,CAAC,EAAE;QACjC,OAAO,IAAI,CAACuB,QAAQ,CAACvB,GAAG,CAAC;MAC3B;MAEA,OAAO,CAAC,CAAC;IACX,CAAC;IACD;AACJ;AACA;;IAGItE,KAAK,GAAG,UAAU+N,IAAI,EAAEhD,QAAQ,EAAE;MAChC,IAAI9C,EAAE,GAAG8F,IAAI,CAAC7M,OAAO,CAAC6J,QAAQ,CAAC;MAE/B,IAAI9C,EAAE,IAAI,IAAI,IAAI8F,IAAI,CAACzK,SAAS,IAAI,IAAI,EAAE;QACxC2E,EAAE,GAAGhI,kBAAkB,CAAC8N,IAAI,EAAEA,IAAI,CAACzK,SAAS,EAAEyK,IAAI,CAACxK,cAAc,EAAEwH,QAAQ,CAAC;MAC9E;MAEA,IAAI9C,EAAE,IAAI,IAAI,EAAE;QACdA,EAAE,GAAGnJ,SAAS,GAAGiM,QAAQ;MAC3B;MAEA,OAAO9C,EAAE;IACX,CAAC;IAED9H,mBAAmB,GAAG,UAAUO,UAAU,EAAE;MAC1C,IAAI,CAAChD,MAAM,CAACuL,OAAO,CAACvI,UAAU,CAAC,EAAE;QAC/BA,UAAU,GAAGA,UAAU,IAAI,IAAI,GAAG,CAACA,UAAU,CAAC,GAAG,EAAE;MACrD;MAEA,OAAOA,UAAU;IACnB,CAAC;IAEDN,kBAAkB,GAAG,UAAU2N,IAAI,EAAEtJ,IAAI,EAAE;MACzC,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqC,IAAI,CAACpC,MAAM,EAAED,CAAC,EAAE,EAAE;QACpC;QACA;QACA,IAAI,CAAC2L,IAAI,CAACvK,eAAe,CAACiB,IAAI,CAACrC,CAAC,CAAC,CAAC,EAAE;UAClCkR,OAAO,CAACC,KAAK,CAAC,mBAAmB,GAAG9O,IAAI,CAACrC,CAAC,CAAC,CAAC;QAC9C;MACF;IACF,CAAC,CAAC,CAAC;;IAGH/B,wBAAwB,GAAG,UAAUuS,QAAQ,EAAEY,iBAAiB,EAAE;MAChE,IAAIC,aAAa,GAAGb,QAAQ,CAAClS,UAAU;MACvC,IAAIqN,IAAI,GAAG,IAAItN,IAAI,CAAC9B,GAAG,CAAC8U,aAAa,EAAEb,QAAQ,CAAC3O,gBAAgB,EAAE2O,QAAQ,CAAC,EAAEA,QAAQ,CAACjS,SAAS,CAAC,CAAC,CAAC;;MAElGH,kBAAkB,CAACuN,IAAI,EAAE6E,QAAQ,CAAC;MAClC,IAAI5L,OAAO,GAAG+G,IAAI,CAAChN,QAAQ,GAAG,CAAC,CAAC;MAChC,IAAI2S,eAAe,GAAGd,QAAQ,CAAC7R,QAAQ;MACvC,IAAIsG,UAAU,GAAG0G,IAAI,CAAC/M,WAAW,GAAG,EAAE,CAAC,CAAC;;MAExC,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqR,aAAa,CAACpR,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,IAAI0B,GAAG,GAAG2P,aAAa,CAACrR,CAAC,CAAC;QAE1B,IAAIsR,eAAe,CAAC5P,GAAG,CAAC,EAAE;UACxB;UACA;UACA,IAAIpG,MAAM,CAACiW,OAAO,CAACH,iBAAiB,EAAE1P,GAAG,CAAC,IAAI,CAAC,EAAE;YAC/CkD,OAAO,CAAClD,GAAG,CAAC,GAAG8P,UAAU,CAACF,eAAe,CAAC5P,GAAG,CAAC,CAAC;YAC/CiK,IAAI,CAACvM,UAAU,CAACsC,GAAG,CAAC,GAAGxD,gBAAgB,EAAE;YACzCyN,IAAI,CAACtM,OAAO,CAACqC,GAAG,CAAC,GAAG,IAAI;UAC1B,CAAC,MAAM;YACL;YACAkD,OAAO,CAAClD,GAAG,CAAC,GAAG4P,eAAe,CAAC5P,GAAG,CAAC;UACrC;UAEAuD,UAAU,CAACvE,IAAI,CAACkE,OAAO,CAAClD,GAAG,CAAC,CAAC;QAC/B;MACF;MAEA,OAAOiK,IAAI;IACb,CAAC;IAED,SAAS6F,UAAU,CAACC,aAAa,EAAE;MACjC,IAAIvL,IAAI,GAAGuL,aAAa,CAACtL,WAAW,CAAC,CAAC;;MAEtC,OAAOD,IAAI,KAAKrJ,KAAK,GAAG4U,aAAa,CAACzP,KAAK,EAAE,GAAG,IAAIkE,IAAI,CAACuL,aAAa,CAAC;IACzE;IAEAvT,gBAAgB,GAAG,YAAY;MAC7B,OAAO,CAACoL,QAAQ,EAAE,CAACA,QAAQ,CAAC;IAC9B,CAAC;IAEDnL,yBAAyB,GAAG,UAAUuT,KAAK,EAAE;MAC3C,IAAIC,WAAW,GAAG3V,SAAS,CAAC0V,KAAK,CAAC;MAClC,IAAIE,UAAU,GAAG5V,SAAS,CAAC,IAAI,CAAC;MAChC2V,WAAW,CAACrC,WAAW,GAAGsC,UAAU,CAACtC,WAAW;MAChDqC,WAAW,CAACjI,SAAS,GAAGkI,UAAU,CAAClI,SAAS;MAC5CiI,WAAW,CAACtC,QAAQ,GAAGuC,UAAU,CAACvC,QAAQ;IAC5C,CAAC;IAEDjR,kBAAkB,GAAG,UAAUyT,MAAM,EAAEC,MAAM,EAAE;MAC7CxW,MAAM,CAAC6M,IAAI,CAAC/K,uBAAuB,CAAC+S,MAAM,CAAC2B,MAAM,CAAC7B,gBAAgB,IAAI,EAAE,CAAC,EAAE,UAAU8B,QAAQ,EAAE;QAC7F,IAAID,MAAM,CAAClQ,cAAc,CAACmQ,QAAQ,CAAC,EAAE;UACnCF,MAAM,CAACE,QAAQ,CAAC,GAAGD,MAAM,CAACC,QAAQ,CAAC;QACrC;MACF,CAAC,CAAC;MACFF,MAAM,CAAC5B,gBAAgB,GAAG6B,MAAM,CAAC7B,gBAAgB;MACjD3U,MAAM,CAAC6M,IAAI,CAAC9K,gBAAgB,EAAE,UAAU0U,QAAQ,EAAE;QAChDF,MAAM,CAACE,QAAQ,CAAC,GAAGzW,MAAM,CAAC0W,KAAK,CAACF,MAAM,CAACC,QAAQ,CAAC,CAAC;MACnD,CAAC,CAAC;MACFF,MAAM,CAACtS,gBAAgB,GAAGjE,MAAM,CAACwM,MAAM,CAAC,CAAC,CAAC,EAAEgK,MAAM,CAACvS,gBAAgB,CAAC;IACtE,CAAC;IAEDzB,cAAc,GAAG,UAAU6N,IAAI,EAAEzJ,GAAG,EAAE;MACpC,IAAIQ,QAAQ,GAAGiJ,IAAI,CAAC9M,SAAS;MAC7B,IAAI4G,MAAM,GAAGkG,IAAI,CAAC7M,OAAO;MACzB,IAAImT,UAAU,GAAGtG,IAAI,CAAC7K,WAAW;MACjC,IAAIoR,QAAQ,GAAGvG,IAAI,CAACzK,SAAS;MAC7B,IAAIb,IAAI,GAAGqC,QAAQ,CAACR,GAAG,CAAC;MACxB,IAAI2D,EAAE,GAAGJ,MAAM,CAACvD,GAAG,CAAC;MAEpB,IAAI7B,IAAI,IAAI,IAAI,IAAI4R,UAAU,IAAI,IAAI,EAAE;QACtCvP,QAAQ,CAACR,GAAG,CAAC,GAAG7B,IAAI,GAAGxC,kBAAkB,CAAC8N,IAAI,EAAEsG,UAAU,EAAEtG,IAAI,CAAC5K,gBAAgB,EAAEmB,GAAG,CAAC;MACzF;MAEA,IAAI2D,EAAE,IAAI,IAAI,IAAIqM,QAAQ,IAAI,IAAI,EAAE;QAClCzM,MAAM,CAACvD,GAAG,CAAC,GAAG2D,EAAE,GAAGhI,kBAAkB,CAAC8N,IAAI,EAAEuG,QAAQ,EAAEvG,IAAI,CAACxK,cAAc,EAAEe,GAAG,CAAC;MACjF;MAEA,IAAI2D,EAAE,IAAI,IAAI,IAAIxF,IAAI,IAAI,IAAI,EAAE;QAC9B,IAAI8R,eAAe,GAAGxG,IAAI,CAAC/H,gBAAgB;QAC3C,IAAIwO,KAAK,GAAGD,eAAe,CAAC9R,IAAI,CAAC,GAAG,CAAC8R,eAAe,CAAC9R,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACpEwF,EAAE,GAAGxF,IAAI;QAET,IAAI+R,KAAK,GAAG,CAAC,EAAE;UACbvM,EAAE,IAAI,QAAQ,GAAGuM,KAAK;QACxB;QAEA3M,MAAM,CAACvD,GAAG,CAAC,GAAG2D,EAAE;MAClB;IACF,CAAC;EACH,CAAC,EAAE;EAEH,OAAOxH,IAAI;AACb,CAAC,EAAE;AAEH,eAAeA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}
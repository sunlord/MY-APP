{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nimport { isObject, each, indexOf, retrieve3 } from 'zrender/lib/core/util';\nimport { getLayoutRect } from '../../util/layout';\nimport { createScaleByModel, ifAxisCrossZero, niceScaleExtent, estimateLabelUnionRect, getDataDimensionsOnAxis } from '../../coord/axisHelper';\nimport Cartesian2D, { cartesian2DDimensions } from './Cartesian2D';\nimport Axis2D from './Axis2D';\nimport { SINGLE_REFERRING } from '../../util/model';\nimport { isCartesian2DSeries, findAxisModels } from './cartesianAxisHelper';\nvar Grid = /** @class */\nfunction () {\n  function Grid(gridModel, ecModel, api) {\n    // FIXME:TS where used (different from registered type 'cartesian2d')?\n    this.type = 'grid';\n    this._coordsMap = {};\n    this._coordsList = [];\n    this._axesMap = {};\n    this._axesList = [];\n    this.axisPointerEnabled = true;\n    this.dimensions = cartesian2DDimensions;\n    this._initCartesian(gridModel, ecModel, api);\n    this.model = gridModel;\n  }\n  Grid.prototype.getRect = function () {\n    return this._rect;\n  };\n  Grid.prototype.update = function (ecModel, api) {\n    var axesMap = this._axesMap;\n    this._updateScale(ecModel, this.model);\n    each(axesMap.x, function (xAxis) {\n      niceScaleExtent(xAxis.scale, xAxis.model);\n    });\n    each(axesMap.y, function (yAxis) {\n      niceScaleExtent(yAxis.scale, yAxis.model);\n    }); // Key: axisDim_axisIndex, value: boolean, whether onZero target.\n\n    var onZeroRecords = {};\n    each(axesMap.x, function (xAxis) {\n      fixAxisOnZero(axesMap, 'y', xAxis, onZeroRecords);\n    });\n    each(axesMap.y, function (yAxis) {\n      fixAxisOnZero(axesMap, 'x', yAxis, onZeroRecords);\n    }); // Resize again if containLabel is enabled\n    // FIXME It may cause getting wrong grid size in data processing stage\n\n    this.resize(this.model, api);\n  };\n  /**\n   * Resize the grid\n   */\n\n  Grid.prototype.resize = function (gridModel, api, ignoreContainLabel) {\n    var boxLayoutParams = gridModel.getBoxLayoutParams();\n    var isContainLabel = !ignoreContainLabel && gridModel.get('containLabel');\n    var gridRect = getLayoutRect(boxLayoutParams, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n    this._rect = gridRect;\n    var axesList = this._axesList;\n    adjustAxes(); // Minus label size\n\n    if (isContainLabel) {\n      each(axesList, function (axis) {\n        if (!axis.model.get(['axisLabel', 'inside'])) {\n          var labelUnionRect = estimateLabelUnionRect(axis);\n          if (labelUnionRect) {\n            var dim = axis.isHorizontal() ? 'height' : 'width';\n            var margin = axis.model.get(['axisLabel', 'margin']);\n            gridRect[dim] -= labelUnionRect[dim] + margin;\n            if (axis.position === 'top') {\n              gridRect.y += labelUnionRect.height + margin;\n            } else if (axis.position === 'left') {\n              gridRect.x += labelUnionRect.width + margin;\n            }\n          }\n        }\n      });\n      adjustAxes();\n    }\n    each(this._coordsList, function (coord) {\n      // Calculate affine matrix to accelerate the data to point transform.\n      // If all the axes scales are time or value.\n      coord.calcAffineTransform();\n    });\n    function adjustAxes() {\n      each(axesList, function (axis) {\n        var isHorizontal = axis.isHorizontal();\n        var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n        var idx = axis.inverse ? 1 : 0;\n        axis.setExtent(extent[idx], extent[1 - idx]);\n        updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);\n      });\n    }\n  };\n  Grid.prototype.getAxis = function (dim, axisIndex) {\n    var axesMapOnDim = this._axesMap[dim];\n    if (axesMapOnDim != null) {\n      return axesMapOnDim[axisIndex || 0]; // if (axisIndex == null) {\n      //     Find first axis\n      //     for (let name in axesMapOnDim) {\n      //         if (axesMapOnDim.hasOwnProperty(name)) {\n      //             return axesMapOnDim[name];\n      //         }\n      //     }\n      // }\n      // return axesMapOnDim[axisIndex];\n    }\n  };\n\n  Grid.prototype.getAxes = function () {\n    return this._axesList.slice();\n  };\n  Grid.prototype.getCartesian = function (xAxisIndex, yAxisIndex) {\n    if (xAxisIndex != null && yAxisIndex != null) {\n      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n      return this._coordsMap[key];\n    }\n    if (isObject(xAxisIndex)) {\n      yAxisIndex = xAxisIndex.yAxisIndex;\n      xAxisIndex = xAxisIndex.xAxisIndex;\n    }\n    for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n      if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {\n        return coordList[i];\n      }\n    }\n  };\n  Grid.prototype.getCartesians = function () {\n    return this._coordsList.slice();\n  };\n  /**\n   * @implements\n   */\n\n  Grid.prototype.convertToPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n    return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;\n  };\n  /**\n   * @implements\n   */\n\n  Grid.prototype.convertFromPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n    return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;\n  };\n  Grid.prototype._findConvertTarget = function (finder) {\n    var seriesModel = finder.seriesModel;\n    var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis', SINGLE_REFERRING).models[0];\n    var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis', SINGLE_REFERRING).models[0];\n    var gridModel = finder.gridModel;\n    var coordsList = this._coordsList;\n    var cartesian;\n    var axis;\n    if (seriesModel) {\n      cartesian = seriesModel.coordinateSystem;\n      indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n    } else if (xAxisModel && yAxisModel) {\n      cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    } else if (xAxisModel) {\n      axis = this.getAxis('x', xAxisModel.componentIndex);\n    } else if (yAxisModel) {\n      axis = this.getAxis('y', yAxisModel.componentIndex);\n    } // Lowest priority.\n    else if (gridModel) {\n      var grid = gridModel.coordinateSystem;\n      if (grid === this) {\n        cartesian = this._coordsList[0];\n      }\n    }\n    return {\n      cartesian: cartesian,\n      axis: axis\n    };\n  };\n  /**\n   * @implements\n   */\n\n  Grid.prototype.containPoint = function (point) {\n    var coord = this._coordsList[0];\n    if (coord) {\n      return coord.containPoint(point);\n    }\n  };\n  /**\n   * Initialize cartesian coordinate systems\n   */\n\n  Grid.prototype._initCartesian = function (gridModel, ecModel, api) {\n    var _this = this;\n    var grid = this;\n    var axisPositionUsed = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    var axesMap = {\n      x: {},\n      y: {}\n    };\n    var axesCount = {\n      x: 0,\n      y: 0\n    }; /// Create axis\n\n    ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n    ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n    if (!axesCount.x || !axesCount.y) {\n      // Roll back when there no either x or y axis\n      this._axesMap = {};\n      this._axesList = [];\n      return;\n    }\n    this._axesMap = axesMap; /// Create cartesian2d\n\n    each(axesMap.x, function (xAxis, xAxisIndex) {\n      each(axesMap.y, function (yAxis, yAxisIndex) {\n        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n        var cartesian = new Cartesian2D(key);\n        cartesian.master = _this;\n        cartesian.model = gridModel;\n        _this._coordsMap[key] = cartesian;\n        _this._coordsList.push(cartesian);\n        cartesian.addAxis(xAxis);\n        cartesian.addAxis(yAxis);\n      });\n    });\n    function createAxisCreator(dimName) {\n      return function (axisModel, idx) {\n        if (!isAxisUsedInTheGrid(axisModel, gridModel)) {\n          return;\n        }\n        var axisPosition = axisModel.get('position');\n        if (dimName === 'x') {\n          // Fix position\n          if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n            // Default bottom of X\n            axisPosition = axisPositionUsed.bottom ? 'top' : 'bottom';\n          }\n        } else {\n          // Fix position\n          if (axisPosition !== 'left' && axisPosition !== 'right') {\n            // Default left of Y\n            axisPosition = axisPositionUsed.left ? 'right' : 'left';\n          }\n        }\n        axisPositionUsed[axisPosition] = true;\n        var axis = new Axis2D(dimName, createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);\n        var isCategory = axis.type === 'category';\n        axis.onBand = isCategory && axisModel.get('boundaryGap');\n        axis.inverse = axisModel.get('inverse'); // Inject axis into axisModel\n\n        axisModel.axis = axis; // Inject axisModel into axis\n\n        axis.model = axisModel; // Inject grid info axis\n\n        axis.grid = grid; // Index of axis, can be used as key\n\n        axis.index = idx;\n        grid._axesList.push(axis);\n        axesMap[dimName][idx] = axis;\n        axesCount[dimName]++;\n      };\n    }\n  };\n  /**\n   * Update cartesian properties from series.\n   */\n\n  Grid.prototype._updateScale = function (ecModel, gridModel) {\n    // Reset scale\n    each(this._axesList, function (axis) {\n      axis.scale.setExtent(Infinity, -Infinity);\n      if (axis.type === 'category') {\n        var categorySortInfo = axis.model.get('categorySortInfo');\n        axis.scale.setSortInfo(categorySortInfo);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (isCartesian2DSeries(seriesModel)) {\n        var axesModelMap = findAxisModels(seriesModel);\n        var xAxisModel = axesModelMap.xAxisModel;\n        var yAxisModel = axesModelMap.yAxisModel;\n        if (!isAxisUsedInTheGrid(xAxisModel, gridModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel)) {\n          return;\n        }\n        var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        var data = seriesModel.getData();\n        var xAxis = cartesian.getAxis('x');\n        var yAxis = cartesian.getAxis('y');\n        if (data.type === 'list') {\n          unionExtent(data, xAxis);\n          unionExtent(data, yAxis);\n        }\n      }\n    }, this);\n    function unionExtent(data, axis) {\n      each(getDataDimensionsOnAxis(data, axis.dim), function (dim) {\n        axis.scale.unionExtentFromData(data, dim);\n      });\n    }\n  };\n  /**\n   * @param dim 'x' or 'y' or 'auto' or null/undefined\n   */\n\n  Grid.prototype.getTooltipAxes = function (dim) {\n    var baseAxes = [];\n    var otherAxes = [];\n    each(this.getCartesians(), function (cartesian) {\n      var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n      var otherAxis = cartesian.getOtherAxis(baseAxis);\n      indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n      indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n    });\n    return {\n      baseAxes: baseAxes,\n      otherAxes: otherAxes\n    };\n  };\n  Grid.create = function (ecModel, api) {\n    var grids = [];\n    ecModel.eachComponent('grid', function (gridModel, idx) {\n      var grid = new Grid(gridModel, ecModel, api);\n      grid.name = 'grid_' + idx; // dataSampling requires axis extent, so resize\n      // should be performed in create stage.\n\n      grid.resize(gridModel, api, true);\n      gridModel.coordinateSystem = grid;\n      grids.push(grid);\n    }); // Inject the coordinateSystems into seriesModel\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (!isCartesian2DSeries(seriesModel)) {\n        return;\n      }\n      var axesModelMap = findAxisModels(seriesModel);\n      var xAxisModel = axesModelMap.xAxisModel;\n      var yAxisModel = axesModelMap.yAxisModel;\n      var gridModel = xAxisModel.getCoordSysModel();\n      if (process.env.NODE_ENV !== 'production') {\n        if (!gridModel) {\n          throw new Error('Grid \"' + retrieve3(xAxisModel.get('gridIndex'), xAxisModel.get('gridId'), 0) + '\" not found');\n        }\n        if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n          throw new Error('xAxis and yAxis must use the same grid');\n        }\n      }\n      var grid = gridModel.coordinateSystem;\n      seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    });\n    return grids;\n  }; // For deciding which dimensions to use when creating list data\n\n  Grid.dimensions = cartesian2DDimensions;\n  return Grid;\n}();\n/**\n * Check if the axis is used in the specified grid.\n */\n\nfunction isAxisUsedInTheGrid(axisModel, gridModel) {\n  return axisModel.getCoordSysModel() === gridModel;\n}\nfunction fixAxisOnZero(axesMap, otherAxisDim, axis,\n// Key: see `getOnZeroRecordKey`\nonZeroRecords) {\n  axis.getAxesOnZeroOf = function () {\n    // TODO: onZero of multiple axes.\n    return otherAxisOnZeroOf ? [otherAxisOnZeroOf] : [];\n  }; // onZero can not be enabled in these two situations:\n  // 1. When any other axis is a category axis.\n  // 2. When no axis is cross 0 point.\n\n  var otherAxes = axesMap[otherAxisDim];\n  var otherAxisOnZeroOf;\n  var axisModel = axis.model;\n  var onZero = axisModel.get(['axisLine', 'onZero']);\n  var onZeroAxisIndex = axisModel.get(['axisLine', 'onZeroAxisIndex']);\n  if (!onZero) {\n    return;\n  } // If target axis is specified.\n\n  if (onZeroAxisIndex != null) {\n    if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {\n      otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];\n    }\n  } else {\n    // Find the first available other axis.\n    for (var idx in otherAxes) {\n      if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx]) // Consider that two Y axes on one value axis,\n      // if both onZero, the two Y axes overlap.\n      && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {\n        otherAxisOnZeroOf = otherAxes[idx];\n        break;\n      }\n    }\n  }\n  if (otherAxisOnZeroOf) {\n    onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;\n  }\n  function getOnZeroRecordKey(axis) {\n    return axis.dim + '_' + axis.index;\n  }\n}\nfunction canOnZeroToAxis(axis) {\n  return axis && axis.type !== 'category' && axis.type !== 'time' && ifAxisCrossZero(axis);\n}\nfunction updateAxisTransform(axis, coordBase) {\n  var axisExtent = axis.getExtent();\n  var axisExtentSum = axisExtent[0] + axisExtent[1]; // Fast transform\n\n  axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {\n    return coord + coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n  axis.toLocalCoord = axis.dim === 'x' ? function (coord) {\n    return coord - coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n}\nexport default Grid;","map":{"version":3,"names":["isObject","each","indexOf","retrieve3","getLayoutRect","createScaleByModel","ifAxisCrossZero","niceScaleExtent","estimateLabelUnionRect","getDataDimensionsOnAxis","Cartesian2D","cartesian2DDimensions","Axis2D","SINGLE_REFERRING","isCartesian2DSeries","findAxisModels","Grid","gridModel","ecModel","api","type","_coordsMap","_coordsList","_axesMap","_axesList","axisPointerEnabled","dimensions","_initCartesian","model","prototype","getRect","_rect","update","axesMap","_updateScale","x","xAxis","scale","y","yAxis","onZeroRecords","fixAxisOnZero","resize","ignoreContainLabel","boxLayoutParams","getBoxLayoutParams","isContainLabel","get","gridRect","width","getWidth","height","getHeight","axesList","adjustAxes","axis","labelUnionRect","dim","isHorizontal","margin","position","coord","calcAffineTransform","extent","idx","inverse","setExtent","updateAxisTransform","getAxis","axisIndex","axesMapOnDim","getAxes","slice","getCartesian","xAxisIndex","yAxisIndex","key","i","coordList","length","index","getCartesians","convertToPixel","finder","value","target","_findConvertTarget","cartesian","dataToPoint","toGlobalCoord","dataToCoord","convertFromPixel","pointToData","coordToData","toLocalCoord","seriesModel","xAxisModel","getReferringComponents","models","yAxisModel","coordsList","coordinateSystem","componentIndex","grid","containPoint","point","_this","axisPositionUsed","left","right","top","bottom","axesCount","eachComponent","createAxisCreator","master","push","addAxis","dimName","axisModel","isAxisUsedInTheGrid","axisPosition","isCategory","onBand","Infinity","categorySortInfo","setSortInfo","eachSeries","axesModelMap","data","getData","unionExtent","unionExtentFromData","getTooltipAxes","baseAxes","otherAxes","baseAxis","getBaseAxis","otherAxis","getOtherAxis","create","grids","name","getCoordSysModel","process","env","NODE_ENV","Error","otherAxisDim","getAxesOnZeroOf","otherAxisOnZeroOf","onZero","onZeroAxisIndex","canOnZeroToAxis","hasOwnProperty","getOnZeroRecordKey","coordBase","axisExtent","getExtent","axisExtentSum"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/coord/cartesian/Grid.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nimport { isObject, each, indexOf, retrieve3 } from 'zrender/lib/core/util';\nimport { getLayoutRect } from '../../util/layout';\nimport { createScaleByModel, ifAxisCrossZero, niceScaleExtent, estimateLabelUnionRect, getDataDimensionsOnAxis } from '../../coord/axisHelper';\nimport Cartesian2D, { cartesian2DDimensions } from './Cartesian2D';\nimport Axis2D from './Axis2D';\nimport { SINGLE_REFERRING } from '../../util/model';\nimport { isCartesian2DSeries, findAxisModels } from './cartesianAxisHelper';\n\nvar Grid =\n/** @class */\nfunction () {\n  function Grid(gridModel, ecModel, api) {\n    // FIXME:TS where used (different from registered type 'cartesian2d')?\n    this.type = 'grid';\n    this._coordsMap = {};\n    this._coordsList = [];\n    this._axesMap = {};\n    this._axesList = [];\n    this.axisPointerEnabled = true;\n    this.dimensions = cartesian2DDimensions;\n\n    this._initCartesian(gridModel, ecModel, api);\n\n    this.model = gridModel;\n  }\n\n  Grid.prototype.getRect = function () {\n    return this._rect;\n  };\n\n  Grid.prototype.update = function (ecModel, api) {\n    var axesMap = this._axesMap;\n\n    this._updateScale(ecModel, this.model);\n\n    each(axesMap.x, function (xAxis) {\n      niceScaleExtent(xAxis.scale, xAxis.model);\n    });\n    each(axesMap.y, function (yAxis) {\n      niceScaleExtent(yAxis.scale, yAxis.model);\n    }); // Key: axisDim_axisIndex, value: boolean, whether onZero target.\n\n    var onZeroRecords = {};\n    each(axesMap.x, function (xAxis) {\n      fixAxisOnZero(axesMap, 'y', xAxis, onZeroRecords);\n    });\n    each(axesMap.y, function (yAxis) {\n      fixAxisOnZero(axesMap, 'x', yAxis, onZeroRecords);\n    }); // Resize again if containLabel is enabled\n    // FIXME It may cause getting wrong grid size in data processing stage\n\n    this.resize(this.model, api);\n  };\n  /**\n   * Resize the grid\n   */\n\n\n  Grid.prototype.resize = function (gridModel, api, ignoreContainLabel) {\n    var boxLayoutParams = gridModel.getBoxLayoutParams();\n    var isContainLabel = !ignoreContainLabel && gridModel.get('containLabel');\n    var gridRect = getLayoutRect(boxLayoutParams, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n    this._rect = gridRect;\n    var axesList = this._axesList;\n    adjustAxes(); // Minus label size\n\n    if (isContainLabel) {\n      each(axesList, function (axis) {\n        if (!axis.model.get(['axisLabel', 'inside'])) {\n          var labelUnionRect = estimateLabelUnionRect(axis);\n\n          if (labelUnionRect) {\n            var dim = axis.isHorizontal() ? 'height' : 'width';\n            var margin = axis.model.get(['axisLabel', 'margin']);\n            gridRect[dim] -= labelUnionRect[dim] + margin;\n\n            if (axis.position === 'top') {\n              gridRect.y += labelUnionRect.height + margin;\n            } else if (axis.position === 'left') {\n              gridRect.x += labelUnionRect.width + margin;\n            }\n          }\n        }\n      });\n      adjustAxes();\n    }\n\n    each(this._coordsList, function (coord) {\n      // Calculate affine matrix to accelerate the data to point transform.\n      // If all the axes scales are time or value.\n      coord.calcAffineTransform();\n    });\n\n    function adjustAxes() {\n      each(axesList, function (axis) {\n        var isHorizontal = axis.isHorizontal();\n        var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n        var idx = axis.inverse ? 1 : 0;\n        axis.setExtent(extent[idx], extent[1 - idx]);\n        updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);\n      });\n    }\n  };\n\n  Grid.prototype.getAxis = function (dim, axisIndex) {\n    var axesMapOnDim = this._axesMap[dim];\n\n    if (axesMapOnDim != null) {\n      return axesMapOnDim[axisIndex || 0]; // if (axisIndex == null) {\n      //     Find first axis\n      //     for (let name in axesMapOnDim) {\n      //         if (axesMapOnDim.hasOwnProperty(name)) {\n      //             return axesMapOnDim[name];\n      //         }\n      //     }\n      // }\n      // return axesMapOnDim[axisIndex];\n    }\n  };\n\n  Grid.prototype.getAxes = function () {\n    return this._axesList.slice();\n  };\n\n  Grid.prototype.getCartesian = function (xAxisIndex, yAxisIndex) {\n    if (xAxisIndex != null && yAxisIndex != null) {\n      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n      return this._coordsMap[key];\n    }\n\n    if (isObject(xAxisIndex)) {\n      yAxisIndex = xAxisIndex.yAxisIndex;\n      xAxisIndex = xAxisIndex.xAxisIndex;\n    }\n\n    for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n      if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {\n        return coordList[i];\n      }\n    }\n  };\n\n  Grid.prototype.getCartesians = function () {\n    return this._coordsList.slice();\n  };\n  /**\n   * @implements\n   */\n\n\n  Grid.prototype.convertToPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n\n    return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;\n  };\n  /**\n   * @implements\n   */\n\n\n  Grid.prototype.convertFromPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n\n    return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;\n  };\n\n  Grid.prototype._findConvertTarget = function (finder) {\n    var seriesModel = finder.seriesModel;\n    var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis', SINGLE_REFERRING).models[0];\n    var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis', SINGLE_REFERRING).models[0];\n    var gridModel = finder.gridModel;\n    var coordsList = this._coordsList;\n    var cartesian;\n    var axis;\n\n    if (seriesModel) {\n      cartesian = seriesModel.coordinateSystem;\n      indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n    } else if (xAxisModel && yAxisModel) {\n      cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    } else if (xAxisModel) {\n      axis = this.getAxis('x', xAxisModel.componentIndex);\n    } else if (yAxisModel) {\n      axis = this.getAxis('y', yAxisModel.componentIndex);\n    } // Lowest priority.\n    else if (gridModel) {\n        var grid = gridModel.coordinateSystem;\n\n        if (grid === this) {\n          cartesian = this._coordsList[0];\n        }\n      }\n\n    return {\n      cartesian: cartesian,\n      axis: axis\n    };\n  };\n  /**\n   * @implements\n   */\n\n\n  Grid.prototype.containPoint = function (point) {\n    var coord = this._coordsList[0];\n\n    if (coord) {\n      return coord.containPoint(point);\n    }\n  };\n  /**\n   * Initialize cartesian coordinate systems\n   */\n\n\n  Grid.prototype._initCartesian = function (gridModel, ecModel, api) {\n    var _this = this;\n\n    var grid = this;\n    var axisPositionUsed = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    var axesMap = {\n      x: {},\n      y: {}\n    };\n    var axesCount = {\n      x: 0,\n      y: 0\n    }; /// Create axis\n\n    ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n    ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n    if (!axesCount.x || !axesCount.y) {\n      // Roll back when there no either x or y axis\n      this._axesMap = {};\n      this._axesList = [];\n      return;\n    }\n\n    this._axesMap = axesMap; /// Create cartesian2d\n\n    each(axesMap.x, function (xAxis, xAxisIndex) {\n      each(axesMap.y, function (yAxis, yAxisIndex) {\n        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n        var cartesian = new Cartesian2D(key);\n        cartesian.master = _this;\n        cartesian.model = gridModel;\n        _this._coordsMap[key] = cartesian;\n\n        _this._coordsList.push(cartesian);\n\n        cartesian.addAxis(xAxis);\n        cartesian.addAxis(yAxis);\n      });\n    });\n\n    function createAxisCreator(dimName) {\n      return function (axisModel, idx) {\n        if (!isAxisUsedInTheGrid(axisModel, gridModel)) {\n          return;\n        }\n\n        var axisPosition = axisModel.get('position');\n\n        if (dimName === 'x') {\n          // Fix position\n          if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n            // Default bottom of X\n            axisPosition = axisPositionUsed.bottom ? 'top' : 'bottom';\n          }\n        } else {\n          // Fix position\n          if (axisPosition !== 'left' && axisPosition !== 'right') {\n            // Default left of Y\n            axisPosition = axisPositionUsed.left ? 'right' : 'left';\n          }\n        }\n\n        axisPositionUsed[axisPosition] = true;\n        var axis = new Axis2D(dimName, createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);\n        var isCategory = axis.type === 'category';\n        axis.onBand = isCategory && axisModel.get('boundaryGap');\n        axis.inverse = axisModel.get('inverse'); // Inject axis into axisModel\n\n        axisModel.axis = axis; // Inject axisModel into axis\n\n        axis.model = axisModel; // Inject grid info axis\n\n        axis.grid = grid; // Index of axis, can be used as key\n\n        axis.index = idx;\n\n        grid._axesList.push(axis);\n\n        axesMap[dimName][idx] = axis;\n        axesCount[dimName]++;\n      };\n    }\n  };\n  /**\n   * Update cartesian properties from series.\n   */\n\n\n  Grid.prototype._updateScale = function (ecModel, gridModel) {\n    // Reset scale\n    each(this._axesList, function (axis) {\n      axis.scale.setExtent(Infinity, -Infinity);\n\n      if (axis.type === 'category') {\n        var categorySortInfo = axis.model.get('categorySortInfo');\n        axis.scale.setSortInfo(categorySortInfo);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (isCartesian2DSeries(seriesModel)) {\n        var axesModelMap = findAxisModels(seriesModel);\n        var xAxisModel = axesModelMap.xAxisModel;\n        var yAxisModel = axesModelMap.yAxisModel;\n\n        if (!isAxisUsedInTheGrid(xAxisModel, gridModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel)) {\n          return;\n        }\n\n        var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        var data = seriesModel.getData();\n        var xAxis = cartesian.getAxis('x');\n        var yAxis = cartesian.getAxis('y');\n\n        if (data.type === 'list') {\n          unionExtent(data, xAxis);\n          unionExtent(data, yAxis);\n        }\n      }\n    }, this);\n\n    function unionExtent(data, axis) {\n      each(getDataDimensionsOnAxis(data, axis.dim), function (dim) {\n        axis.scale.unionExtentFromData(data, dim);\n      });\n    }\n  };\n  /**\n   * @param dim 'x' or 'y' or 'auto' or null/undefined\n   */\n\n\n  Grid.prototype.getTooltipAxes = function (dim) {\n    var baseAxes = [];\n    var otherAxes = [];\n    each(this.getCartesians(), function (cartesian) {\n      var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n      var otherAxis = cartesian.getOtherAxis(baseAxis);\n      indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n      indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n    });\n    return {\n      baseAxes: baseAxes,\n      otherAxes: otherAxes\n    };\n  };\n\n  Grid.create = function (ecModel, api) {\n    var grids = [];\n    ecModel.eachComponent('grid', function (gridModel, idx) {\n      var grid = new Grid(gridModel, ecModel, api);\n      grid.name = 'grid_' + idx; // dataSampling requires axis extent, so resize\n      // should be performed in create stage.\n\n      grid.resize(gridModel, api, true);\n      gridModel.coordinateSystem = grid;\n      grids.push(grid);\n    }); // Inject the coordinateSystems into seriesModel\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (!isCartesian2DSeries(seriesModel)) {\n        return;\n      }\n\n      var axesModelMap = findAxisModels(seriesModel);\n      var xAxisModel = axesModelMap.xAxisModel;\n      var yAxisModel = axesModelMap.yAxisModel;\n      var gridModel = xAxisModel.getCoordSysModel();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!gridModel) {\n          throw new Error('Grid \"' + retrieve3(xAxisModel.get('gridIndex'), xAxisModel.get('gridId'), 0) + '\" not found');\n        }\n\n        if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n          throw new Error('xAxis and yAxis must use the same grid');\n        }\n      }\n\n      var grid = gridModel.coordinateSystem;\n      seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    });\n    return grids;\n  }; // For deciding which dimensions to use when creating list data\n\n\n  Grid.dimensions = cartesian2DDimensions;\n  return Grid;\n}();\n/**\n * Check if the axis is used in the specified grid.\n */\n\n\nfunction isAxisUsedInTheGrid(axisModel, gridModel) {\n  return axisModel.getCoordSysModel() === gridModel;\n}\n\nfunction fixAxisOnZero(axesMap, otherAxisDim, axis, // Key: see `getOnZeroRecordKey`\nonZeroRecords) {\n  axis.getAxesOnZeroOf = function () {\n    // TODO: onZero of multiple axes.\n    return otherAxisOnZeroOf ? [otherAxisOnZeroOf] : [];\n  }; // onZero can not be enabled in these two situations:\n  // 1. When any other axis is a category axis.\n  // 2. When no axis is cross 0 point.\n\n\n  var otherAxes = axesMap[otherAxisDim];\n  var otherAxisOnZeroOf;\n  var axisModel = axis.model;\n  var onZero = axisModel.get(['axisLine', 'onZero']);\n  var onZeroAxisIndex = axisModel.get(['axisLine', 'onZeroAxisIndex']);\n\n  if (!onZero) {\n    return;\n  } // If target axis is specified.\n\n\n  if (onZeroAxisIndex != null) {\n    if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {\n      otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];\n    }\n  } else {\n    // Find the first available other axis.\n    for (var idx in otherAxes) {\n      if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx]) // Consider that two Y axes on one value axis,\n      // if both onZero, the two Y axes overlap.\n      && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {\n        otherAxisOnZeroOf = otherAxes[idx];\n        break;\n      }\n    }\n  }\n\n  if (otherAxisOnZeroOf) {\n    onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;\n  }\n\n  function getOnZeroRecordKey(axis) {\n    return axis.dim + '_' + axis.index;\n  }\n}\n\nfunction canOnZeroToAxis(axis) {\n  return axis && axis.type !== 'category' && axis.type !== 'time' && ifAxisCrossZero(axis);\n}\n\nfunction updateAxisTransform(axis, coordBase) {\n  var axisExtent = axis.getExtent();\n  var axisExtentSum = axisExtent[0] + axisExtent[1]; // Fast transform\n\n  axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {\n    return coord + coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n  axis.toLocalCoord = axis.dim === 'x' ? function (coord) {\n    return coord - coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n}\n\nexport default Grid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends, __spreadArrays } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport env from 'zrender/lib/core/env';\nimport * as modelUtil from '../util/model';\nimport ComponentModel from './Component';\nimport { PaletteMixin } from './mixin/palette';\nimport { DataFormatMixin } from '../model/mixin/dataFormat';\nimport { getLayoutParams, mergeLayoutParam, fetchLayoutMode } from '../util/layout';\nimport { createTask } from '../core/task';\nimport { mountExtend } from '../util/clazz';\nimport { SourceManager } from '../data/helper/sourceManager';\nimport { defaultSeriesFormatTooltip } from '../component/tooltip/seriesFormatTooltip';\nvar inner = modelUtil.makeInner();\nfunction getSelectionKey(data, dataIndex) {\n  return data.getName(dataIndex) || data.getId(dataIndex);\n}\nvar SeriesModel = /** @class */\nfunction (_super) {\n  __extends(SeriesModel, _super);\n  function SeriesModel() {\n    // [Caution]: Becuase this class or desecendants can be used as `XXX.extend(subProto)`,\n    // the class members must not be initialized in constructor or declaration place.\n    // Otherwise there is bad case:\n    //   class A {xxx = 1;}\n    //   enableClassExtend(A);\n    //   class B extends A {}\n    //   var C = B.extend({xxx: 5});\n    //   var c = new C();\n    //   console.log(c.xxx); // expect 5 but always 1.\n    var _this = _super !== null && _super.apply(this, arguments) || this; // ---------------------------------------\n    // Props about data selection\n    // ---------------------------------------\n\n    _this._selectedDataIndicesMap = {};\n    return _this;\n  }\n  SeriesModel.prototype.init = function (option, parentModel, ecModel) {\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    var sourceManager = inner(this).sourceManager = new SourceManager(this);\n    sourceManager.prepareSource();\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(data, 'getInitialData returned invalid data.');\n    }\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n    this._initSelectedMapFromData(data);\n  };\n  /**\n   * Util for merge default and theme to option\n   */\n\n  SeriesModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n    var layoutMode = fetchLayoutMode(this);\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  };\n  SeriesModel.prototype.mergeOption = function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = fetchLayoutMode(this);\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n    var sourceManager = inner(this).sourceManager;\n    sourceManager.dirty();\n    sourceManager.prepareSource();\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n    this._initSelectedMapFromData(data);\n  };\n  SeriesModel.prototype.fillDataTextStyle = function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  };\n  /**\n   * Init a data structure from data related option in series\n   * Must be overriden.\n   */\n\n  SeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return;\n  };\n  /**\n   * Append data to list\n   */\n\n  SeriesModel.prototype.appendData = function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  };\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   */\n\n  SeriesModel.prototype.getData = function (dataType) {\n    var task = getCurrentTask(this);\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  };\n  SeriesModel.prototype.getAllData = function () {\n    var mainData = this.getData();\n    return mainData && mainData.getLinkedDataAll ? mainData.getLinkedDataAll() : [{\n      data: mainData\n    }];\n  };\n  SeriesModel.prototype.setData = function (data) {\n    var task = getCurrentTask(this);\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n      // FIXME:TS never used, so comment it\n      // if (context.data !== data && task.modifyOutputEnd) {\n      //     task.setOutputEnd(data.count());\n      // }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n    inner(this).data = data;\n  };\n  SeriesModel.prototype.getSource = function () {\n    return inner(this).sourceManager.getSource();\n  };\n  /**\n   * Get data before processed\n   */\n\n  SeriesModel.prototype.getRawData = function () {\n    return inner(this).dataBeforeProcessed;\n  };\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n\n  SeriesModel.prototype.getBaseAxis = function () {\n    var coordSys = this.coordinateSystem; // @ts-ignore\n\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  };\n  /**\n   * Default tooltip formatter\n   *\n   * @param dataIndex\n   * @param multipleSeries\n   * @param dataType\n   * @param renderMode valid values: 'html'(by default) and 'richText'.\n   *        'html' is used for rendering tooltip in extra DOM form, and the result\n   *        string is used as DOM HTML content.\n   *        'richText' is used for rendering tooltip in rich text form, for those where\n   *        DOM operation is not supported.\n   * @return formatted tooltip with `html` and `markers`\n   *        Notice: The override method can also return string\n   */\n\n  SeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    return defaultSeriesFormatTooltip({\n      series: this,\n      dataIndex: dataIndex,\n      multipleSeries: multipleSeries\n    });\n  };\n  SeriesModel.prototype.isAnimationEnabled = function () {\n    if (env.node) {\n      return false;\n    }\n    var animationEnabled = this.getShallow('animation');\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n    return !!animationEnabled;\n  };\n  SeriesModel.prototype.restoreData = function () {\n    this.dataTask.dirty();\n  };\n  SeriesModel.prototype.getColorFromPalette = function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = PaletteMixin.prototype.getColorFromPalette.call(this, name, scope, requestColorNum);\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n    return color;\n  };\n  /**\n   * Use `data.mapDimensionsAll(coordDim)` instead.\n   * @deprecated\n   */\n\n  SeriesModel.prototype.coordDimToDataDim = function (coordDim) {\n    return this.getRawData().mapDimensionsAll(coordDim);\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n  SeriesModel.prototype.getProgressive = function () {\n    return this.get('progressive');\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n  SeriesModel.prototype.getProgressiveThreshold = function () {\n    return this.get('progressiveThreshold');\n  }; // PENGING If selectedMode is null ?\n\n  SeriesModel.prototype.select = function (innerDataIndices, dataType) {\n    this._innerSelect(this.getData(dataType), innerDataIndices);\n  };\n  SeriesModel.prototype.unselect = function (innerDataIndices, dataType) {\n    var selectedMap = this.option.selectedMap;\n    if (!selectedMap) {\n      return;\n    }\n    var data = this.getData(dataType);\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      var dataIndex = innerDataIndices[i];\n      var nameOrId = getSelectionKey(data, dataIndex);\n      selectedMap[nameOrId] = false;\n      this._selectedDataIndicesMap[nameOrId] = -1;\n    }\n  };\n  SeriesModel.prototype.toggleSelect = function (innerDataIndices, dataType) {\n    var tmpArr = [];\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      tmpArr[0] = innerDataIndices[i];\n      this.isSelected(innerDataIndices[i], dataType) ? this.unselect(tmpArr, dataType) : this.select(tmpArr, dataType);\n    }\n  };\n  SeriesModel.prototype.getSelectedDataIndices = function () {\n    var selectedDataIndicesMap = this._selectedDataIndicesMap;\n    var nameOrIds = zrUtil.keys(selectedDataIndicesMap);\n    var dataIndices = [];\n    for (var i = 0; i < nameOrIds.length; i++) {\n      var dataIndex = selectedDataIndicesMap[nameOrIds[i]];\n      if (dataIndex >= 0) {\n        dataIndices.push(dataIndex);\n      }\n    }\n    return dataIndices;\n  };\n  SeriesModel.prototype.isSelected = function (dataIndex, dataType) {\n    var selectedMap = this.option.selectedMap;\n    if (!selectedMap) {\n      return false;\n    }\n    var data = this.getData(dataType);\n    var nameOrId = getSelectionKey(data, dataIndex);\n    return selectedMap[nameOrId] || false;\n  };\n  SeriesModel.prototype._innerSelect = function (data, innerDataIndices) {\n    var _a, _b;\n    var selectedMode = this.option.selectedMode;\n    var len = innerDataIndices.length;\n    if (!selectedMode || !len) {\n      return;\n    }\n    if (selectedMode === 'multiple') {\n      var selectedMap = this.option.selectedMap || (this.option.selectedMap = {});\n      for (var i = 0; i < len; i++) {\n        var dataIndex = innerDataIndices[i]; // TODO diffrent types of data share same object.\n\n        var nameOrId = getSelectionKey(data, dataIndex);\n        selectedMap[nameOrId] = true;\n        this._selectedDataIndicesMap[nameOrId] = data.getRawIndex(dataIndex);\n      }\n    } else if (selectedMode === 'single' || selectedMode === true) {\n      var lastDataIndex = innerDataIndices[len - 1];\n      var nameOrId = getSelectionKey(data, lastDataIndex);\n      this.option.selectedMap = (_a = {}, _a[nameOrId] = true, _a);\n      this._selectedDataIndicesMap = (_b = {}, _b[nameOrId] = data.getRawIndex(lastDataIndex), _b);\n    }\n  };\n  SeriesModel.prototype._initSelectedMapFromData = function (data) {\n    // Ignore select info in data if selectedMap exists.\n    // NOTE It's only for legacy usage. edge data is not supported.\n    if (this.option.selectedMap) {\n      return;\n    }\n    var dataIndices = [];\n    if (data.hasItemOption) {\n      data.each(function (idx) {\n        var rawItem = data.getRawDataItem(idx);\n        if (rawItem && rawItem.selected) {\n          dataIndices.push(idx);\n        }\n      });\n    }\n    if (dataIndices.length > 0) {\n      this._innerSelect(data, dataIndices);\n    }\n  }; // /**\n  //  * @see {module:echarts/stream/Scheduler}\n  //  */\n  // abstract pipeTask: null\n\n  SeriesModel.registerClass = function (clz) {\n    return ComponentModel.registerClass(clz);\n  };\n  SeriesModel.protoInitialize = function () {\n    var proto = SeriesModel.prototype;\n    proto.type = 'series.__base__';\n    proto.seriesIndex = 0;\n    proto.useColorPaletteOnData = false;\n    proto.ignoreStyleOnData = false;\n    proto.hasSymbolVisual = false;\n    proto.defaultSymbol = 'circle'; // Make sure the values can be accessed!\n\n    proto.visualStyleAccessPath = 'itemStyle';\n    proto.visualDrawType = 'fill';\n  }();\n  return SeriesModel;\n}(ComponentModel);\nzrUtil.mixin(SeriesModel, DataFormatMixin);\nzrUtil.mixin(SeriesModel, PaletteMixin);\nmountExtend(SeriesModel, ComponentModel);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimensionsAll('seriesName');\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(__spreadArrays(data.CHANGABLE_METHODS, data.DOWNSAMPLE_METHODS), function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataChange, seriesModel));\n  });\n}\nfunction onDataChange(seriesModel, newList) {\n  var task = getCurrentTask(seriesModel);\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd((newList || this).count());\n  }\n  return newList;\n}\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n    return task;\n  }\n}\nexport default SeriesModel;","map":{"version":3,"names":["__extends","__spreadArrays","zrUtil","env","modelUtil","ComponentModel","PaletteMixin","DataFormatMixin","getLayoutParams","mergeLayoutParam","fetchLayoutMode","createTask","mountExtend","SourceManager","defaultSeriesFormatTooltip","inner","makeInner","getSelectionKey","data","dataIndex","getName","getId","SeriesModel","_super","_this","apply","arguments","_selectedDataIndicesMap","prototype","init","option","parentModel","ecModel","seriesIndex","componentIndex","dataTask","count","dataTaskCount","reset","dataTaskReset","context","model","mergeDefaultAndTheme","sourceManager","prepareSource","getInitialData","wrapData","process","NODE_ENV","assert","dataBeforeProcessed","autoSeriesName","_initSelectedMapFromData","layoutMode","inputPositionParams","themeSubType","subType","hasClass","merge","getTheme","get","getDefaultOption","defaultEmphasis","fillDataTextStyle","mergeOption","newSeriesOption","dirty","isTypedArray","props","i","length","label","appendData","params","getRawData","getData","dataType","task","getCurrentTask","getLinkedData","getAllData","mainData","getLinkedDataAll","setData","outputData","getSource","getBaseAxis","coordSys","coordinateSystem","formatTooltip","multipleSeries","series","isAnimationEnabled","node","animationEnabled","getShallow","restoreData","getColorFromPalette","name","scope","requestColorNum","color","call","coordDimToDataDim","coordDim","mapDimensionsAll","getProgressive","getProgressiveThreshold","select","innerDataIndices","_innerSelect","unselect","selectedMap","nameOrId","toggleSelect","tmpArr","isSelected","getSelectedDataIndices","selectedDataIndicesMap","nameOrIds","keys","dataIndices","push","_a","_b","selectedMode","len","getRawIndex","lastDataIndex","hasItemOption","each","idx","rawItem","getRawDataItem","selected","registerClass","clz","protoInitialize","proto","type","useColorPaletteOnData","ignoreStyleOnData","hasSymbolVisual","defaultSymbol","visualStyleAccessPath","visualDrawType","mixin","seriesModel","isNameSpecified","getSeriesAutoName","dataDims","nameArr","dataDim","dimInfo","getDimensionInfo","displayName","join","cloneShallow","dataTaskProgress","param","end","CHANGABLE_METHODS","DOWNSAMPLE_METHODS","methodName","wrapMethod","curry","onDataChange","newList","setOutputEnd","scheduler","pipeline","getPipeline","uid","currentTask","agentStubMap"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/model/Series.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends, __spreadArrays } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport env from 'zrender/lib/core/env';\nimport * as modelUtil from '../util/model';\nimport ComponentModel from './Component';\nimport { PaletteMixin } from './mixin/palette';\nimport { DataFormatMixin } from '../model/mixin/dataFormat';\nimport { getLayoutParams, mergeLayoutParam, fetchLayoutMode } from '../util/layout';\nimport { createTask } from '../core/task';\nimport { mountExtend } from '../util/clazz';\nimport { SourceManager } from '../data/helper/sourceManager';\nimport { defaultSeriesFormatTooltip } from '../component/tooltip/seriesFormatTooltip';\nvar inner = modelUtil.makeInner();\n\nfunction getSelectionKey(data, dataIndex) {\n  return data.getName(dataIndex) || data.getId(dataIndex);\n}\n\nvar SeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(SeriesModel, _super);\n\n  function SeriesModel() {\n    // [Caution]: Becuase this class or desecendants can be used as `XXX.extend(subProto)`,\n    // the class members must not be initialized in constructor or declaration place.\n    // Otherwise there is bad case:\n    //   class A {xxx = 1;}\n    //   enableClassExtend(A);\n    //   class B extends A {}\n    //   var C = B.extend({xxx: 5});\n    //   var c = new C();\n    //   console.log(c.xxx); // expect 5 but always 1.\n    var _this = _super !== null && _super.apply(this, arguments) || this; // ---------------------------------------\n    // Props about data selection\n    // ---------------------------------------\n\n\n    _this._selectedDataIndicesMap = {};\n    return _this;\n  }\n\n  SeriesModel.prototype.init = function (option, parentModel, ecModel) {\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    var sourceManager = inner(this).sourceManager = new SourceManager(this);\n    sourceManager.prepareSource();\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(data, 'getInitialData returned invalid data.');\n    }\n\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n  /**\n   * Util for merge default and theme to option\n   */\n\n\n  SeriesModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n    var layoutMode = fetchLayoutMode(this);\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  };\n\n  SeriesModel.prototype.mergeOption = function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = fetchLayoutMode(this);\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    var sourceManager = inner(this).sourceManager;\n    sourceManager.dirty();\n    sourceManager.prepareSource();\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n\n  SeriesModel.prototype.fillDataTextStyle = function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  };\n  /**\n   * Init a data structure from data related option in series\n   * Must be overriden.\n   */\n\n\n  SeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return;\n  };\n  /**\n   * Append data to list\n   */\n\n\n  SeriesModel.prototype.appendData = function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  };\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   */\n\n\n  SeriesModel.prototype.getData = function (dataType) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  };\n\n  SeriesModel.prototype.getAllData = function () {\n    var mainData = this.getData();\n    return mainData && mainData.getLinkedDataAll ? mainData.getLinkedDataAll() : [{\n      data: mainData\n    }];\n  };\n\n  SeriesModel.prototype.setData = function (data) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n      // FIXME:TS never used, so comment it\n      // if (context.data !== data && task.modifyOutputEnd) {\n      //     task.setOutputEnd(data.count());\n      // }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n\n    inner(this).data = data;\n  };\n\n  SeriesModel.prototype.getSource = function () {\n    return inner(this).sourceManager.getSource();\n  };\n  /**\n   * Get data before processed\n   */\n\n\n  SeriesModel.prototype.getRawData = function () {\n    return inner(this).dataBeforeProcessed;\n  };\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n\n\n  SeriesModel.prototype.getBaseAxis = function () {\n    var coordSys = this.coordinateSystem; // @ts-ignore\n\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  };\n  /**\n   * Default tooltip formatter\n   *\n   * @param dataIndex\n   * @param multipleSeries\n   * @param dataType\n   * @param renderMode valid values: 'html'(by default) and 'richText'.\n   *        'html' is used for rendering tooltip in extra DOM form, and the result\n   *        string is used as DOM HTML content.\n   *        'richText' is used for rendering tooltip in rich text form, for those where\n   *        DOM operation is not supported.\n   * @return formatted tooltip with `html` and `markers`\n   *        Notice: The override method can also return string\n   */\n\n\n  SeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    return defaultSeriesFormatTooltip({\n      series: this,\n      dataIndex: dataIndex,\n      multipleSeries: multipleSeries\n    });\n  };\n\n  SeriesModel.prototype.isAnimationEnabled = function () {\n    if (env.node) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return !!animationEnabled;\n  };\n\n  SeriesModel.prototype.restoreData = function () {\n    this.dataTask.dirty();\n  };\n\n  SeriesModel.prototype.getColorFromPalette = function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = PaletteMixin.prototype.getColorFromPalette.call(this, name, scope, requestColorNum);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n\n    return color;\n  };\n  /**\n   * Use `data.mapDimensionsAll(coordDim)` instead.\n   * @deprecated\n   */\n\n\n  SeriesModel.prototype.coordDimToDataDim = function (coordDim) {\n    return this.getRawData().mapDimensionsAll(coordDim);\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressive = function () {\n    return this.get('progressive');\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressiveThreshold = function () {\n    return this.get('progressiveThreshold');\n  }; // PENGING If selectedMode is null ?\n\n\n  SeriesModel.prototype.select = function (innerDataIndices, dataType) {\n    this._innerSelect(this.getData(dataType), innerDataIndices);\n  };\n\n  SeriesModel.prototype.unselect = function (innerDataIndices, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return;\n    }\n\n    var data = this.getData(dataType);\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      var dataIndex = innerDataIndices[i];\n      var nameOrId = getSelectionKey(data, dataIndex);\n      selectedMap[nameOrId] = false;\n      this._selectedDataIndicesMap[nameOrId] = -1;\n    }\n  };\n\n  SeriesModel.prototype.toggleSelect = function (innerDataIndices, dataType) {\n    var tmpArr = [];\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      tmpArr[0] = innerDataIndices[i];\n      this.isSelected(innerDataIndices[i], dataType) ? this.unselect(tmpArr, dataType) : this.select(tmpArr, dataType);\n    }\n  };\n\n  SeriesModel.prototype.getSelectedDataIndices = function () {\n    var selectedDataIndicesMap = this._selectedDataIndicesMap;\n    var nameOrIds = zrUtil.keys(selectedDataIndicesMap);\n    var dataIndices = [];\n\n    for (var i = 0; i < nameOrIds.length; i++) {\n      var dataIndex = selectedDataIndicesMap[nameOrIds[i]];\n\n      if (dataIndex >= 0) {\n        dataIndices.push(dataIndex);\n      }\n    }\n\n    return dataIndices;\n  };\n\n  SeriesModel.prototype.isSelected = function (dataIndex, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return false;\n    }\n\n    var data = this.getData(dataType);\n    var nameOrId = getSelectionKey(data, dataIndex);\n    return selectedMap[nameOrId] || false;\n  };\n\n  SeriesModel.prototype._innerSelect = function (data, innerDataIndices) {\n    var _a, _b;\n\n    var selectedMode = this.option.selectedMode;\n    var len = innerDataIndices.length;\n\n    if (!selectedMode || !len) {\n      return;\n    }\n\n    if (selectedMode === 'multiple') {\n      var selectedMap = this.option.selectedMap || (this.option.selectedMap = {});\n\n      for (var i = 0; i < len; i++) {\n        var dataIndex = innerDataIndices[i]; // TODO diffrent types of data share same object.\n\n        var nameOrId = getSelectionKey(data, dataIndex);\n        selectedMap[nameOrId] = true;\n        this._selectedDataIndicesMap[nameOrId] = data.getRawIndex(dataIndex);\n      }\n    } else if (selectedMode === 'single' || selectedMode === true) {\n      var lastDataIndex = innerDataIndices[len - 1];\n      var nameOrId = getSelectionKey(data, lastDataIndex);\n      this.option.selectedMap = (_a = {}, _a[nameOrId] = true, _a);\n      this._selectedDataIndicesMap = (_b = {}, _b[nameOrId] = data.getRawIndex(lastDataIndex), _b);\n    }\n  };\n\n  SeriesModel.prototype._initSelectedMapFromData = function (data) {\n    // Ignore select info in data if selectedMap exists.\n    // NOTE It's only for legacy usage. edge data is not supported.\n    if (this.option.selectedMap) {\n      return;\n    }\n\n    var dataIndices = [];\n\n    if (data.hasItemOption) {\n      data.each(function (idx) {\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem.selected) {\n          dataIndices.push(idx);\n        }\n      });\n    }\n\n    if (dataIndices.length > 0) {\n      this._innerSelect(data, dataIndices);\n    }\n  }; // /**\n  //  * @see {module:echarts/stream/Scheduler}\n  //  */\n  // abstract pipeTask: null\n\n\n  SeriesModel.registerClass = function (clz) {\n    return ComponentModel.registerClass(clz);\n  };\n\n  SeriesModel.protoInitialize = function () {\n    var proto = SeriesModel.prototype;\n    proto.type = 'series.__base__';\n    proto.seriesIndex = 0;\n    proto.useColorPaletteOnData = false;\n    proto.ignoreStyleOnData = false;\n    proto.hasSymbolVisual = false;\n    proto.defaultSymbol = 'circle'; // Make sure the values can be accessed!\n\n    proto.visualStyleAccessPath = 'itemStyle';\n    proto.visualDrawType = 'fill';\n  }();\n\n  return SeriesModel;\n}(ComponentModel);\n\nzrUtil.mixin(SeriesModel, DataFormatMixin);\nzrUtil.mixin(SeriesModel, PaletteMixin);\nmountExtend(SeriesModel, ComponentModel);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\n\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimensionsAll('seriesName');\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\n\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\n\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\n\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(__spreadArrays(data.CHANGABLE_METHODS, data.DOWNSAMPLE_METHODS), function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataChange, seriesModel));\n  });\n}\n\nfunction onDataChange(seriesModel, newList) {\n  var task = getCurrentTask(seriesModel);\n\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd((newList || this).count());\n  }\n\n  return newList;\n}\n\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n\n    return task;\n  }\n}\n\nexport default SeriesModel;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
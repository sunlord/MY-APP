{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport OrdinalScale from '../scale/Ordinal';\nimport IntervalScale from '../scale/Interval';\nimport Scale from '../scale/Scale';\nimport { prepareLayoutBarSeries, makeColumnLayout, retrieveColumnLayout } from '../layout/barGrid';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport TimeScale from '../scale/Time';\nimport LogScale from '../scale/Log';\nimport { getStackedDimension } from '../data/helper/dataStackHelper';\nimport { ensureScaleRawExtentInfo } from './scaleRawExtentInfo';\n/**\n * Get axis scale extent before niced.\n * Item of returned array can only be number (including Infinity and NaN).\n *\n * Caution:\n * Precondition of calling this method:\n * The scale extent has been initialized using series data extent via\n * `scale.setExtent` or `scale.unionExtentFromData`;\n */\n\nexport function getScaleExtent(scale, model) {\n  var scaleType = scale.type;\n  var rawExtentResult = ensureScaleRawExtentInfo(scale, model, scale.getExtent()).calculate();\n  scale.setBlank(rawExtentResult.isBlank);\n  var min = rawExtentResult.min;\n  var max = rawExtentResult.max; // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis\n  // is base axis\n  // FIXME\n  // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.\n  // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?\n  //     Should not depend on series type `bar`?\n  // (3) Fix that might overlap when using dataZoom.\n  // (4) Consider other chart types using `barGrid`?\n  // See #6728, #4862, `test/bar-overflow-time-plot.html`\n\n  var ecModel = model.ecModel;\n  if (ecModel && scaleType === 'time'\n  /*|| scaleType === 'interval' */) {\n    var barSeriesModels = prepareLayoutBarSeries('bar', ecModel);\n    var isBaseAxisAndHasBarSeries_1 = false;\n    zrUtil.each(barSeriesModels, function (seriesModel) {\n      isBaseAxisAndHasBarSeries_1 = isBaseAxisAndHasBarSeries_1 || seriesModel.getBaseAxis() === model.axis;\n    });\n    if (isBaseAxisAndHasBarSeries_1) {\n      // Calculate placement of bars on axis. TODO should be decoupled\n      // with barLayout\n      var barWidthAndOffset = makeColumnLayout(barSeriesModels); // Adjust axis min and max to account for overflow\n\n      var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);\n      min = adjustedScale.min;\n      max = adjustedScale.max;\n    }\n  }\n  return {\n    extent: [min, max],\n    // \"fix\" means \"fixed\", the value should not be\n    // changed in the subsequent steps.\n    fixMin: rawExtentResult.minFixed,\n    fixMax: rawExtentResult.maxFixed\n  };\n}\nfunction adjustScaleForOverflow(min, max, model,\n// Only support cartesian coord yet.\nbarWidthAndOffset) {\n  // Get Axis Length\n  var axisExtent = model.axis.getExtent();\n  var axisLength = axisExtent[1] - axisExtent[0]; // Get bars on current base axis and calculate min and max overflow\n\n  var barsOnCurrentAxis = retrieveColumnLayout(barWidthAndOffset, model.axis);\n  if (barsOnCurrentAxis === undefined) {\n    return {\n      min: min,\n      max: max\n    };\n  }\n  var minOverflow = Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    minOverflow = Math.min(item.offset, minOverflow);\n  });\n  var maxOverflow = -Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    maxOverflow = Math.max(item.offset + item.width, maxOverflow);\n  });\n  minOverflow = Math.abs(minOverflow);\n  maxOverflow = Math.abs(maxOverflow);\n  var totalOverFlow = minOverflow + maxOverflow; // Calculate required buffer based on old range and overflow\n\n  var oldRange = max - min;\n  var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;\n  var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;\n  max += overflowBuffer * (maxOverflow / totalOverFlow);\n  min -= overflowBuffer * (minOverflow / totalOverFlow);\n  return {\n    min: min,\n    max: max\n  };\n} // Precondition of calling this method:\n// The scale extent has been initailized using series data extent via\n// `scale.setExtent` or `scale.unionExtentFromData`;\n\nexport function niceScaleExtent(scale, model) {\n  var extentInfo = getScaleExtent(scale, model);\n  var extent = extentInfo.extent;\n  var splitNumber = model.get('splitNumber');\n  if (scale instanceof LogScale) {\n    scale.base = model.get('logBase');\n  }\n  var scaleType = scale.type;\n  scale.setExtent(extent[0], extent[1]);\n  scale.niceExtent({\n    splitNumber: splitNumber,\n    fixMin: extentInfo.fixMin,\n    fixMax: extentInfo.fixMax,\n    minInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('minInterval') : null,\n    maxInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('maxInterval') : null\n  }); // If some one specified the min, max. And the default calculated interval\n  // is not good enough. He can specify the interval. It is often appeared\n  // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n  // to be 60.\n  // FIXME\n\n  var interval = model.get('interval');\n  if (interval != null) {\n    scale.setInterval && scale.setInterval(interval);\n  }\n}\n/**\n * @param axisType Default retrieve from model.type\n */\n\nexport function createScaleByModel(model, axisType) {\n  axisType = axisType || model.get('type');\n  if (axisType) {\n    switch (axisType) {\n      // Buildin scale\n      case 'category':\n        return new OrdinalScale({\n          ordinalMeta: model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(),\n          extent: [Infinity, -Infinity]\n        });\n      case 'time':\n        return new TimeScale({\n          locale: model.ecModel.getLocaleModel(),\n          useUTC: model.ecModel.get('useUTC')\n        });\n      default:\n        // case 'value'/'interval', 'log', or others.\n        return new (Scale.getClass(axisType) || IntervalScale)();\n    }\n  }\n}\n/**\n * Check if the axis cross 0\n */\n\nexport function ifAxisCrossZero(axis) {\n  var dataExtent = axis.scale.getExtent();\n  var min = dataExtent[0];\n  var max = dataExtent[1];\n  return !(min > 0 && max > 0 || min < 0 && max < 0);\n}\n/**\n * @param axis\n * @return Label formatter function.\n *         param: {number} tickValue,\n *         param: {number} idx, the index in all ticks.\n *                         If category axis, this param is not required.\n *         return: {string} label string.\n */\n\nexport function makeLabelFormatter(axis) {\n  var labelFormatter = axis.getLabelModel().get('formatter');\n  var categoryTickStart = axis.type === 'category' ? axis.scale.getExtent()[0] : null;\n  if (axis.scale.type === 'time') {\n    return function (tpl) {\n      return function (tick, idx) {\n        return axis.scale.getFormattedLabel(tick, idx, tpl);\n      };\n    }(labelFormatter);\n  } else if (typeof labelFormatter === 'string') {\n    return function (tpl) {\n      return function (tick) {\n        // For category axis, get raw value; for numeric axis,\n        // get formatted label like '1,333,444'.\n        var label = axis.scale.getLabel(tick);\n        var text = tpl.replace('{value}', label != null ? label : '');\n        return text;\n      };\n    }(labelFormatter);\n  } else if (typeof labelFormatter === 'function') {\n    return function (cb) {\n      return function (tick, idx) {\n        // The original intention of `idx` is \"the index of the tick in all ticks\".\n        // But the previous implementation of category axis do not consider the\n        // `axisLabel.interval`, which cause that, for example, the `interval` is\n        // `1`, then the ticks \"name5\", \"name7\", \"name9\" are displayed, where the\n        // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep\n        // the definition here for back compatibility.\n        if (categoryTickStart != null) {\n          idx = tick.value - categoryTickStart;\n        }\n        return cb(getAxisRawValue(axis, tick), idx, tick.level != null ? {\n          level: tick.level\n        } : null);\n      };\n    }(labelFormatter);\n  } else {\n    return function (tick) {\n      return axis.scale.getLabel(tick);\n    };\n  }\n}\nexport function getAxisRawValue(axis, tick) {\n  // In category axis with data zoom, tick is not the original\n  // index of axis.data. So tick should not be exposed to user\n  // in category axis.\n  return axis.type === 'category' ? axis.scale.getLabel(tick) : tick.value;\n}\n/**\n * @param axis\n * @return Be null/undefined if no labels.\n */\n\nexport function estimateLabelUnionRect(axis) {\n  var axisModel = axis.model;\n  var scale = axis.scale;\n  if (!axisModel.get(['axisLabel', 'show']) || scale.isBlank()) {\n    return;\n  }\n  var realNumberScaleTicks;\n  var tickCount;\n  var categoryScaleExtent = scale.getExtent(); // Optimize for large category data, avoid call `getTicks()`.\n\n  if (scale instanceof OrdinalScale) {\n    tickCount = scale.count();\n  } else {\n    realNumberScaleTicks = scale.getTicks();\n    tickCount = realNumberScaleTicks.length;\n  }\n  var axisLabelModel = axis.getLabelModel();\n  var labelFormatter = makeLabelFormatter(axis);\n  var rect;\n  var step = 1; // Simple optimization for large amount of labels\n\n  if (tickCount > 40) {\n    step = Math.ceil(tickCount / 40);\n  }\n  for (var i = 0; i < tickCount; i += step) {\n    var tick = realNumberScaleTicks ? realNumberScaleTicks[i] : {\n      value: categoryScaleExtent[0] + i\n    };\n    var label = labelFormatter(tick, i);\n    var unrotatedSingleRect = axisLabelModel.getTextRect(label);\n    var singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get('rotate') || 0);\n    rect ? rect.union(singleRect) : rect = singleRect;\n  }\n  return rect;\n}\nfunction rotateTextRect(textRect, rotate) {\n  var rotateRadians = rotate * Math.PI / 180;\n  var beforeWidth = textRect.width;\n  var beforeHeight = textRect.height;\n  var afterWidth = beforeWidth * Math.abs(Math.cos(rotateRadians)) + Math.abs(beforeHeight * Math.sin(rotateRadians));\n  var afterHeight = beforeWidth * Math.abs(Math.sin(rotateRadians)) + Math.abs(beforeHeight * Math.cos(rotateRadians));\n  var rotatedRect = new BoundingRect(textRect.x, textRect.y, afterWidth, afterHeight);\n  return rotatedRect;\n}\n/**\n * @param model axisLabelModel or axisTickModel\n * @return {number|String} Can be null|'auto'|number|function\n */\n\nexport function getOptionCategoryInterval(model) {\n  var interval = model.get('interval');\n  return interval == null ? 'auto' : interval;\n}\n/**\n * Set `categoryInterval` as 0 implicitly indicates that\n * show all labels reguardless of overlap.\n * @param {Object} axis axisModel.axis\n */\n\nexport function shouldShowAllLabels(axis) {\n  return axis.type === 'category' && getOptionCategoryInterval(axis.getLabelModel()) === 0;\n}\nexport function getDataDimensionsOnAxis(data, axisDim) {\n  // Remove duplicated dat dimensions caused by `getStackedDimension`.\n  var dataDimMap = {}; // Currently `mapDimensionsAll` will contain stack result dimension ('__\\0ecstackresult').\n  // PENDING: is it reasonable? Do we need to remove the original dim from \"coord dim\" since\n  // there has been stacked result dim?\n\n  zrUtil.each(data.mapDimensionsAll(axisDim), function (dataDim) {\n    // For example, the extent of the original dimension\n    // is [0.1, 0.5], the extent of the `stackResultDimension`\n    // is [7, 9], the final extent should NOT include [0.1, 0.5],\n    // because there is no graphic corresponding to [0.1, 0.5].\n    // See the case in `test/area-stack.html` `main1`, where area line\n    // stack needs `yAxis` not start from 0.\n    dataDimMap[getStackedDimension(data, dataDim)] = true;\n  });\n  return zrUtil.keys(dataDimMap);\n}\nexport function unionAxisExtentFromData(dataExtent, data, axisDim) {\n  if (data) {\n    zrUtil.each(getDataDimensionsOnAxis(data, axisDim), function (dim) {\n      var seriesExtent = data.getApproximateExtent(dim);\n      seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n      seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n    });\n  }\n}","map":{"version":3,"names":["zrUtil","OrdinalScale","IntervalScale","Scale","prepareLayoutBarSeries","makeColumnLayout","retrieveColumnLayout","BoundingRect","TimeScale","LogScale","getStackedDimension","ensureScaleRawExtentInfo","getScaleExtent","scale","model","scaleType","type","rawExtentResult","getExtent","calculate","setBlank","isBlank","min","max","ecModel","barSeriesModels","isBaseAxisAndHasBarSeries_1","each","seriesModel","getBaseAxis","axis","barWidthAndOffset","adjustedScale","adjustScaleForOverflow","extent","fixMin","minFixed","fixMax","maxFixed","axisExtent","axisLength","barsOnCurrentAxis","undefined","minOverflow","Infinity","item","Math","offset","maxOverflow","width","abs","totalOverFlow","oldRange","oldRangePercentOfNew","overflowBuffer","niceScaleExtent","extentInfo","splitNumber","get","base","setExtent","niceExtent","minInterval","maxInterval","interval","setInterval","createScaleByModel","axisType","ordinalMeta","getOrdinalMeta","getCategories","locale","getLocaleModel","useUTC","getClass","ifAxisCrossZero","dataExtent","makeLabelFormatter","labelFormatter","getLabelModel","categoryTickStart","tpl","tick","idx","getFormattedLabel","label","getLabel","text","replace","cb","value","getAxisRawValue","level","estimateLabelUnionRect","axisModel","realNumberScaleTicks","tickCount","categoryScaleExtent","count","getTicks","length","axisLabelModel","rect","step","ceil","i","unrotatedSingleRect","getTextRect","singleRect","rotateTextRect","union","textRect","rotate","rotateRadians","PI","beforeWidth","beforeHeight","height","afterWidth","cos","sin","afterHeight","rotatedRect","x","y","getOptionCategoryInterval","shouldShowAllLabels","getDataDimensionsOnAxis","data","axisDim","dataDimMap","mapDimensionsAll","dataDim","keys","unionAxisExtentFromData","dim","seriesExtent","getApproximateExtent"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/coord/axisHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport OrdinalScale from '../scale/Ordinal';\nimport IntervalScale from '../scale/Interval';\nimport Scale from '../scale/Scale';\nimport { prepareLayoutBarSeries, makeColumnLayout, retrieveColumnLayout } from '../layout/barGrid';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport TimeScale from '../scale/Time';\nimport LogScale from '../scale/Log';\nimport { getStackedDimension } from '../data/helper/dataStackHelper';\nimport { ensureScaleRawExtentInfo } from './scaleRawExtentInfo';\n/**\n * Get axis scale extent before niced.\n * Item of returned array can only be number (including Infinity and NaN).\n *\n * Caution:\n * Precondition of calling this method:\n * The scale extent has been initialized using series data extent via\n * `scale.setExtent` or `scale.unionExtentFromData`;\n */\n\nexport function getScaleExtent(scale, model) {\n  var scaleType = scale.type;\n  var rawExtentResult = ensureScaleRawExtentInfo(scale, model, scale.getExtent()).calculate();\n  scale.setBlank(rawExtentResult.isBlank);\n  var min = rawExtentResult.min;\n  var max = rawExtentResult.max; // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis\n  // is base axis\n  // FIXME\n  // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.\n  // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?\n  //     Should not depend on series type `bar`?\n  // (3) Fix that might overlap when using dataZoom.\n  // (4) Consider other chart types using `barGrid`?\n  // See #6728, #4862, `test/bar-overflow-time-plot.html`\n\n  var ecModel = model.ecModel;\n\n  if (ecModel && scaleType === 'time'\n  /*|| scaleType === 'interval' */\n  ) {\n    var barSeriesModels = prepareLayoutBarSeries('bar', ecModel);\n    var isBaseAxisAndHasBarSeries_1 = false;\n    zrUtil.each(barSeriesModels, function (seriesModel) {\n      isBaseAxisAndHasBarSeries_1 = isBaseAxisAndHasBarSeries_1 || seriesModel.getBaseAxis() === model.axis;\n    });\n\n    if (isBaseAxisAndHasBarSeries_1) {\n      // Calculate placement of bars on axis. TODO should be decoupled\n      // with barLayout\n      var barWidthAndOffset = makeColumnLayout(barSeriesModels); // Adjust axis min and max to account for overflow\n\n      var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);\n      min = adjustedScale.min;\n      max = adjustedScale.max;\n    }\n  }\n\n  return {\n    extent: [min, max],\n    // \"fix\" means \"fixed\", the value should not be\n    // changed in the subsequent steps.\n    fixMin: rawExtentResult.minFixed,\n    fixMax: rawExtentResult.maxFixed\n  };\n}\n\nfunction adjustScaleForOverflow(min, max, model, // Only support cartesian coord yet.\nbarWidthAndOffset) {\n  // Get Axis Length\n  var axisExtent = model.axis.getExtent();\n  var axisLength = axisExtent[1] - axisExtent[0]; // Get bars on current base axis and calculate min and max overflow\n\n  var barsOnCurrentAxis = retrieveColumnLayout(barWidthAndOffset, model.axis);\n\n  if (barsOnCurrentAxis === undefined) {\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  var minOverflow = Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    minOverflow = Math.min(item.offset, minOverflow);\n  });\n  var maxOverflow = -Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    maxOverflow = Math.max(item.offset + item.width, maxOverflow);\n  });\n  minOverflow = Math.abs(minOverflow);\n  maxOverflow = Math.abs(maxOverflow);\n  var totalOverFlow = minOverflow + maxOverflow; // Calculate required buffer based on old range and overflow\n\n  var oldRange = max - min;\n  var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;\n  var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;\n  max += overflowBuffer * (maxOverflow / totalOverFlow);\n  min -= overflowBuffer * (minOverflow / totalOverFlow);\n  return {\n    min: min,\n    max: max\n  };\n} // Precondition of calling this method:\n// The scale extent has been initailized using series data extent via\n// `scale.setExtent` or `scale.unionExtentFromData`;\n\n\nexport function niceScaleExtent(scale, model) {\n  var extentInfo = getScaleExtent(scale, model);\n  var extent = extentInfo.extent;\n  var splitNumber = model.get('splitNumber');\n\n  if (scale instanceof LogScale) {\n    scale.base = model.get('logBase');\n  }\n\n  var scaleType = scale.type;\n  scale.setExtent(extent[0], extent[1]);\n  scale.niceExtent({\n    splitNumber: splitNumber,\n    fixMin: extentInfo.fixMin,\n    fixMax: extentInfo.fixMax,\n    minInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('minInterval') : null,\n    maxInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('maxInterval') : null\n  }); // If some one specified the min, max. And the default calculated interval\n  // is not good enough. He can specify the interval. It is often appeared\n  // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n  // to be 60.\n  // FIXME\n\n  var interval = model.get('interval');\n\n  if (interval != null) {\n    scale.setInterval && scale.setInterval(interval);\n  }\n}\n/**\n * @param axisType Default retrieve from model.type\n */\n\nexport function createScaleByModel(model, axisType) {\n  axisType = axisType || model.get('type');\n\n  if (axisType) {\n    switch (axisType) {\n      // Buildin scale\n      case 'category':\n        return new OrdinalScale({\n          ordinalMeta: model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(),\n          extent: [Infinity, -Infinity]\n        });\n\n      case 'time':\n        return new TimeScale({\n          locale: model.ecModel.getLocaleModel(),\n          useUTC: model.ecModel.get('useUTC')\n        });\n\n      default:\n        // case 'value'/'interval', 'log', or others.\n        return new (Scale.getClass(axisType) || IntervalScale)();\n    }\n  }\n}\n/**\n * Check if the axis cross 0\n */\n\nexport function ifAxisCrossZero(axis) {\n  var dataExtent = axis.scale.getExtent();\n  var min = dataExtent[0];\n  var max = dataExtent[1];\n  return !(min > 0 && max > 0 || min < 0 && max < 0);\n}\n/**\n * @param axis\n * @return Label formatter function.\n *         param: {number} tickValue,\n *         param: {number} idx, the index in all ticks.\n *                         If category axis, this param is not required.\n *         return: {string} label string.\n */\n\nexport function makeLabelFormatter(axis) {\n  var labelFormatter = axis.getLabelModel().get('formatter');\n  var categoryTickStart = axis.type === 'category' ? axis.scale.getExtent()[0] : null;\n\n  if (axis.scale.type === 'time') {\n    return function (tpl) {\n      return function (tick, idx) {\n        return axis.scale.getFormattedLabel(tick, idx, tpl);\n      };\n    }(labelFormatter);\n  } else if (typeof labelFormatter === 'string') {\n    return function (tpl) {\n      return function (tick) {\n        // For category axis, get raw value; for numeric axis,\n        // get formatted label like '1,333,444'.\n        var label = axis.scale.getLabel(tick);\n        var text = tpl.replace('{value}', label != null ? label : '');\n        return text;\n      };\n    }(labelFormatter);\n  } else if (typeof labelFormatter === 'function') {\n    return function (cb) {\n      return function (tick, idx) {\n        // The original intention of `idx` is \"the index of the tick in all ticks\".\n        // But the previous implementation of category axis do not consider the\n        // `axisLabel.interval`, which cause that, for example, the `interval` is\n        // `1`, then the ticks \"name5\", \"name7\", \"name9\" are displayed, where the\n        // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep\n        // the definition here for back compatibility.\n        if (categoryTickStart != null) {\n          idx = tick.value - categoryTickStart;\n        }\n\n        return cb(getAxisRawValue(axis, tick), idx, tick.level != null ? {\n          level: tick.level\n        } : null);\n      };\n    }(labelFormatter);\n  } else {\n    return function (tick) {\n      return axis.scale.getLabel(tick);\n    };\n  }\n}\nexport function getAxisRawValue(axis, tick) {\n  // In category axis with data zoom, tick is not the original\n  // index of axis.data. So tick should not be exposed to user\n  // in category axis.\n  return axis.type === 'category' ? axis.scale.getLabel(tick) : tick.value;\n}\n/**\n * @param axis\n * @return Be null/undefined if no labels.\n */\n\nexport function estimateLabelUnionRect(axis) {\n  var axisModel = axis.model;\n  var scale = axis.scale;\n\n  if (!axisModel.get(['axisLabel', 'show']) || scale.isBlank()) {\n    return;\n  }\n\n  var realNumberScaleTicks;\n  var tickCount;\n  var categoryScaleExtent = scale.getExtent(); // Optimize for large category data, avoid call `getTicks()`.\n\n  if (scale instanceof OrdinalScale) {\n    tickCount = scale.count();\n  } else {\n    realNumberScaleTicks = scale.getTicks();\n    tickCount = realNumberScaleTicks.length;\n  }\n\n  var axisLabelModel = axis.getLabelModel();\n  var labelFormatter = makeLabelFormatter(axis);\n  var rect;\n  var step = 1; // Simple optimization for large amount of labels\n\n  if (tickCount > 40) {\n    step = Math.ceil(tickCount / 40);\n  }\n\n  for (var i = 0; i < tickCount; i += step) {\n    var tick = realNumberScaleTicks ? realNumberScaleTicks[i] : {\n      value: categoryScaleExtent[0] + i\n    };\n    var label = labelFormatter(tick, i);\n    var unrotatedSingleRect = axisLabelModel.getTextRect(label);\n    var singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get('rotate') || 0);\n    rect ? rect.union(singleRect) : rect = singleRect;\n  }\n\n  return rect;\n}\n\nfunction rotateTextRect(textRect, rotate) {\n  var rotateRadians = rotate * Math.PI / 180;\n  var beforeWidth = textRect.width;\n  var beforeHeight = textRect.height;\n  var afterWidth = beforeWidth * Math.abs(Math.cos(rotateRadians)) + Math.abs(beforeHeight * Math.sin(rotateRadians));\n  var afterHeight = beforeWidth * Math.abs(Math.sin(rotateRadians)) + Math.abs(beforeHeight * Math.cos(rotateRadians));\n  var rotatedRect = new BoundingRect(textRect.x, textRect.y, afterWidth, afterHeight);\n  return rotatedRect;\n}\n/**\n * @param model axisLabelModel or axisTickModel\n * @return {number|String} Can be null|'auto'|number|function\n */\n\n\nexport function getOptionCategoryInterval(model) {\n  var interval = model.get('interval');\n  return interval == null ? 'auto' : interval;\n}\n/**\n * Set `categoryInterval` as 0 implicitly indicates that\n * show all labels reguardless of overlap.\n * @param {Object} axis axisModel.axis\n */\n\nexport function shouldShowAllLabels(axis) {\n  return axis.type === 'category' && getOptionCategoryInterval(axis.getLabelModel()) === 0;\n}\nexport function getDataDimensionsOnAxis(data, axisDim) {\n  // Remove duplicated dat dimensions caused by `getStackedDimension`.\n  var dataDimMap = {}; // Currently `mapDimensionsAll` will contain stack result dimension ('__\\0ecstackresult').\n  // PENDING: is it reasonable? Do we need to remove the original dim from \"coord dim\" since\n  // there has been stacked result dim?\n\n  zrUtil.each(data.mapDimensionsAll(axisDim), function (dataDim) {\n    // For example, the extent of the original dimension\n    // is [0.1, 0.5], the extent of the `stackResultDimension`\n    // is [7, 9], the final extent should NOT include [0.1, 0.5],\n    // because there is no graphic corresponding to [0.1, 0.5].\n    // See the case in `test/area-stack.html` `main1`, where area line\n    // stack needs `yAxis` not start from 0.\n    dataDimMap[getStackedDimension(data, dataDim)] = true;\n  });\n  return zrUtil.keys(dataDimMap);\n}\nexport function unionAxisExtentFromData(dataExtent, data, axisDim) {\n  if (data) {\n    zrUtil.each(getDataDimensionsOnAxis(data, axisDim), function (dim) {\n      var seriesExtent = data.getApproximateExtent(dim);\n      seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n      seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n    });\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
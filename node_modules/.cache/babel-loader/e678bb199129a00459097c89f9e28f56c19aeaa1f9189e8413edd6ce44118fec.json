{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isFunction, extend, createHashMap } from 'zrender/lib/core/util';\nimport makeStyleMapper from '../model/mixin/makeStyleMapper';\nimport { ITEM_STYLE_KEY_MAP } from '../model/mixin/itemStyle';\nimport { LINE_STYLE_KEY_MAP } from '../model/mixin/lineStyle';\nimport Model from '../model/Model';\nimport { makeInner } from '../util/model';\nvar inner = makeInner();\nvar defaultStyleMappers = {\n  itemStyle: makeStyleMapper(ITEM_STYLE_KEY_MAP, true),\n  lineStyle: makeStyleMapper(LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n  return styleMapper;\n}\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  // return defaultColorKey[stylePath] ||\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n  return colorKey;\n}\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    } // TODO\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey]; // TODO style callback\n\n    var colorCallback = isFunction(color) ? color : null;\n    var hasAutoColor = globalStyle.fill === 'auto' || globalStyle.stroke === 'auto'; // Get from color palette by default.\n\n    if (!globalStyle[colorKey] || colorCallback || hasAutoColor) {\n      // Note: if some series has color specified (e.g., by itemStyle.color), we DO NOT\n      // make it effect palette. Bacause some scenarios users need to make some series\n      // transparent or as background, which should better not effect the palette.\n      var colorPalette = seriesModel.getColorFromPalette(\n      // TODO series count changed.\n      seriesModel.name, null, ecModel.getSeriesCount());\n      if (!globalStyle[colorKey]) {\n        globalStyle[colorKey] = colorPalette;\n        data.setVisual('colorFromPalette', true);\n      }\n      globalStyle.fill = globalStyle.fill === 'auto' || typeof globalStyle.fill === 'function' ? colorPalette : globalStyle.fill;\n      globalStyle.stroke = globalStyle.stroke === 'auto' || typeof globalStyle.stroke === 'function' ? colorPalette : globalStyle.stroke;\n    }\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey); // Only visible series has each data be visual encoded\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = extend({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nvar sharedModel = new Model();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        // Not use getItemModel for performance considuration\n        var rawItem = data.getRawDataItem(idx);\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          extend(existsStyle, style);\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n}; // Pick color from palette for the data which has not been set with color yet.\n// Note: do not support stream rendering. No such cases yet.\n\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    // Each type of series use one scope.\n    // Pie and funnel are using diferrent scopes\n    var paletteScopeGroupByType = createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData) {\n        return;\n      }\n      var colorScope = paletteScopeGroupByType.get(seriesModel.type);\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(seriesModel.type, colorScope);\n      }\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      }); // Iterate on data before filtered. To make sure color from palette can be\n      // Consistent when toggling legend.\n\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette'); // Get color from palette for each data only when the color is inherited from series color, which is\n        // also picked from color palette. So following situation is not in the case:\n        // 1. series.itemStyle.color is set\n        // 2. color is encoded by visualMap\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexport { seriesStyleTask, dataStyleTask, dataColorPaletteTask };","map":{"version":3,"names":["isFunction","extend","createHashMap","makeStyleMapper","ITEM_STYLE_KEY_MAP","LINE_STYLE_KEY_MAP","Model","makeInner","inner","defaultStyleMappers","itemStyle","lineStyle","defaultColorKey","getStyleMapper","seriesModel","stylePath","styleMapper","visualStyleMapper","console","warn","getDefaultColorKey","colorKey","visualDrawType","seriesStyleTask","createOnAllSeries","performRawSeries","reset","ecModel","data","getData","visualStyleAccessPath","styleModel","getModel","getStyle","globalStyle","decalOption","getShallow","setVisual","dirty","color","colorCallback","hasAutoColor","fill","stroke","colorPalette","getColorFromPalette","name","getSeriesCount","isSeriesFiltered","dataEach","idx","dataParams","getDataParams","setItemVisual","sharedModel","dataStyleTask","ignoreStyleOnData","getVisual","hasItemOption","rawItem","getRawDataItem","option","style","existsStyle","ensureUniqueItemVisual","decal","dataColorPaletteTask","overallReset","paletteScopeGroupByType","eachSeries","useColorPaletteOnData","colorScope","get","type","set","scope","dataAll","getRawData","idxMap","each","rawIdx","getRawIndex","fromPalette","getItemVisual","name_1","getName","dataCount","count"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/visual/style.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isFunction, extend, createHashMap } from 'zrender/lib/core/util';\nimport makeStyleMapper from '../model/mixin/makeStyleMapper';\nimport { ITEM_STYLE_KEY_MAP } from '../model/mixin/itemStyle';\nimport { LINE_STYLE_KEY_MAP } from '../model/mixin/lineStyle';\nimport Model from '../model/Model';\nimport { makeInner } from '../util/model';\nvar inner = makeInner();\nvar defaultStyleMappers = {\n  itemStyle: makeStyleMapper(ITEM_STYLE_KEY_MAP, true),\n  lineStyle: makeStyleMapper(LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\n\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n\n  return styleMapper;\n}\n\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  // return defaultColorKey[stylePath] ||\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n\n  return colorKey;\n}\n\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    } // TODO\n\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey]; // TODO style callback\n\n    var colorCallback = isFunction(color) ? color : null;\n    var hasAutoColor = globalStyle.fill === 'auto' || globalStyle.stroke === 'auto'; // Get from color palette by default.\n\n    if (!globalStyle[colorKey] || colorCallback || hasAutoColor) {\n      // Note: if some series has color specified (e.g., by itemStyle.color), we DO NOT\n      // make it effect palette. Bacause some scenarios users need to make some series\n      // transparent or as background, which should better not effect the palette.\n      var colorPalette = seriesModel.getColorFromPalette( // TODO series count changed.\n      seriesModel.name, null, ecModel.getSeriesCount());\n\n      if (!globalStyle[colorKey]) {\n        globalStyle[colorKey] = colorPalette;\n        data.setVisual('colorFromPalette', true);\n      }\n\n      globalStyle.fill = globalStyle.fill === 'auto' || typeof globalStyle.fill === 'function' ? colorPalette : globalStyle.fill;\n      globalStyle.stroke = globalStyle.stroke === 'auto' || typeof globalStyle.stroke === 'function' ? colorPalette : globalStyle.stroke;\n    }\n\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey); // Only visible series has each data be visual encoded\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = extend({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nvar sharedModel = new Model();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle'; // Set in itemStyle\n\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        // Not use getItemModel for performance considuration\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          extend(existsStyle, style);\n\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n}; // Pick color from palette for the data which has not been set with color yet.\n// Note: do not support stream rendering. No such cases yet.\n\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    // Each type of series use one scope.\n    // Pie and funnel are using diferrent scopes\n    var paletteScopeGroupByType = createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData) {\n        return;\n      }\n\n      var colorScope = paletteScopeGroupByType.get(seriesModel.type);\n\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(seriesModel.type, colorScope);\n      }\n\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      }); // Iterate on data before filtered. To make sure color from palette can be\n      // Consistent when toggling legend.\n\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette'); // Get color from palette for each data only when the color is inherited from series color, which is\n        // also picked from color palette. So following situation is not in the case:\n        // 1. series.itemStyle.color is set\n        // 2. color is encoded by visualMap\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexport { seriesStyleTask, dataStyleTask, dataColorPaletteTask };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
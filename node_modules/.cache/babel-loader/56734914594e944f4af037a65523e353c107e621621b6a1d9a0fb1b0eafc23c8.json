{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { retrieveRawValue } from '../../data/helper/dataProvider';\nimport { formatTpl } from '../../util/format';\nimport { makePrintable } from '../../util/log';\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g;\nvar DataFormatMixin = /** @class */\nfunction () {\n  function DataFormatMixin() {}\n  /**\n   * Get params for formatter\n   */\n\n  DataFormatMixin.prototype.getDataParams = function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var style = data.getItemVisual(dataIndex, 'style');\n    var color = style && style[data.getItemVisual(dataIndex, 'drawType') || 'fill'];\n    var borderColor = style && style.stroke;\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput;\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.dimensionNames : null,\n      encode: userOutput ? userOutput.encode : null,\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  };\n  /**\n   * Format label\n   * @param dataIndex\n   * @param status 'normal' by default\n   * @param dataType\n   * @param labelDimIndex Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param formatter Formatter given outside.\n   * @return return null/undefined if no formatter\n   */\n\n  DataFormatMixin.prototype.getFormattedLabel = function (dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var params = this.getDataParams(dataIndex, dataType);\n    if (extendParams) {\n      params.value = extendParams.interpolatedValue;\n    }\n    if (labelDimIndex != null && zrUtil.isArray(params.value)) {\n      params.value = params.value[labelDimIndex];\n    }\n    if (!formatter) {\n      var itemModel = data.getItemModel(dataIndex); // @ts-ignore\n\n      formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : [status, 'label', 'formatter']);\n    }\n    if (typeof formatter === 'function') {\n      params.status = status;\n      params.dimensionIndex = labelDimIndex;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dimStr) {\n        var len = dimStr.length;\n        var dimLoose = dimStr.charAt(0) === '[' && dimStr.charAt(len - 1) === ']' ? +dimStr.slice(1, len - 1) // Also support: '[]' => 0\n        : dimStr;\n        var val = retrieveRawValue(data, dataIndex, dimLoose);\n        if (extendParams && zrUtil.isArray(extendParams.interpolatedValue)) {\n          var dimInfo = data.getDimensionInfo(dimLoose);\n          if (dimInfo) {\n            val = extendParams.interpolatedValue[dimInfo.index];\n          }\n        }\n        return val != null ? val + '' : '';\n      });\n    }\n  };\n  /**\n   * Get raw value in option\n   */\n\n  DataFormatMixin.prototype.getRawValue = function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  };\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {string} [dataType]\n   */\n\n  DataFormatMixin.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    // Empty function\n    return;\n  };\n  return DataFormatMixin;\n}();\nexport { DataFormatMixin };\n; // PENDING: previously we accept this type when calling `formatTooltip`,\n// but guess little chance has been used outside. Do we need to backward\n// compat it?\n// type TooltipFormatResultLegacyObject = {\n//     // `html` means the markup language text, either in 'html' or 'richText'.\n//     // The name `html` is not appropriate becuase in 'richText' it is not a HTML\n//     // string. But still support it for backward compat.\n//     html: string;\n//     markers: Dictionary<ColorString>;\n// };\n\n/**\n * For backward compat, normalize the return from `formatTooltip`.\n */\n\nexport function normalizeTooltipFormatResult(result // markersExisting: Dictionary<ColorString>\n) {\n  var markupText; // let markers: Dictionary<ColorString>;\n\n  var markupFragment;\n  if (zrUtil.isObject(result)) {\n    if (result.type) {\n      markupFragment = result;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('The return type of `formatTooltip` is not supported: ' + makePrintable(result));\n      }\n    } // else {\n    //     markupText = (result as TooltipFormatResultLegacyObject).html;\n    //     markers = (result as TooltipFormatResultLegacyObject).markers;\n    //     if (markersExisting) {\n    //         markers = zrUtil.merge(markersExisting, markers);\n    //     }\n    // }\n  } else {\n    markupText = result;\n  }\n  return {\n    markupText: markupText,\n    // markers: markers || markersExisting,\n    markupFragment: markupFragment\n  };\n}","map":{"version":3,"names":["zrUtil","retrieveRawValue","formatTpl","makePrintable","DIMENSION_LABEL_REG","DataFormatMixin","prototype","getDataParams","dataIndex","dataType","data","getData","rawValue","getRawValue","rawDataIndex","getRawIndex","name","getName","itemOpt","getRawDataItem","style","getItemVisual","color","borderColor","stroke","mainType","isSeries","userOutput","componentType","componentSubType","subType","componentIndex","seriesType","seriesIndex","seriesId","id","seriesName","value","dimensionNames","encode","$vars","getFormattedLabel","status","labelDimIndex","formatter","extendParams","params","interpolatedValue","isArray","itemModel","getItemModel","get","dimensionIndex","str","replace","origin","dimStr","len","length","dimLoose","charAt","slice","val","dimInfo","getDimensionInfo","index","idx","formatTooltip","multipleSeries","normalizeTooltipFormatResult","result","markupText","markupFragment","isObject","type","process","env","NODE_ENV","console","warn"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/model/mixin/dataFormat.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { retrieveRawValue } from '../../data/helper/dataProvider';\nimport { formatTpl } from '../../util/format';\nimport { makePrintable } from '../../util/log';\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g;\n\nvar DataFormatMixin =\n/** @class */\nfunction () {\n  function DataFormatMixin() {}\n  /**\n   * Get params for formatter\n   */\n\n\n  DataFormatMixin.prototype.getDataParams = function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var style = data.getItemVisual(dataIndex, 'style');\n    var color = style && style[data.getItemVisual(dataIndex, 'drawType') || 'fill'];\n    var borderColor = style && style.stroke;\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput;\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.dimensionNames : null,\n      encode: userOutput ? userOutput.encode : null,\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  };\n  /**\n   * Format label\n   * @param dataIndex\n   * @param status 'normal' by default\n   * @param dataType\n   * @param labelDimIndex Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param formatter Formatter given outside.\n   * @return return null/undefined if no formatter\n   */\n\n\n  DataFormatMixin.prototype.getFormattedLabel = function (dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (extendParams) {\n      params.value = extendParams.interpolatedValue;\n    }\n\n    if (labelDimIndex != null && zrUtil.isArray(params.value)) {\n      params.value = params.value[labelDimIndex];\n    }\n\n    if (!formatter) {\n      var itemModel = data.getItemModel(dataIndex); // @ts-ignore\n\n      formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : [status, 'label', 'formatter']);\n    }\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      params.dimensionIndex = labelDimIndex;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dimStr) {\n        var len = dimStr.length;\n        var dimLoose = dimStr.charAt(0) === '[' && dimStr.charAt(len - 1) === ']' ? +dimStr.slice(1, len - 1) // Also support: '[]' => 0\n        : dimStr;\n        var val = retrieveRawValue(data, dataIndex, dimLoose);\n\n        if (extendParams && zrUtil.isArray(extendParams.interpolatedValue)) {\n          var dimInfo = data.getDimensionInfo(dimLoose);\n\n          if (dimInfo) {\n            val = extendParams.interpolatedValue[dimInfo.index];\n          }\n        }\n\n        return val != null ? val + '' : '';\n      });\n    }\n  };\n  /**\n   * Get raw value in option\n   */\n\n\n  DataFormatMixin.prototype.getRawValue = function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  };\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {string} [dataType]\n   */\n\n\n  DataFormatMixin.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    // Empty function\n    return;\n  };\n\n  return DataFormatMixin;\n}();\n\nexport { DataFormatMixin };\n; // PENDING: previously we accept this type when calling `formatTooltip`,\n// but guess little chance has been used outside. Do we need to backward\n// compat it?\n// type TooltipFormatResultLegacyObject = {\n//     // `html` means the markup language text, either in 'html' or 'richText'.\n//     // The name `html` is not appropriate becuase in 'richText' it is not a HTML\n//     // string. But still support it for backward compat.\n//     html: string;\n//     markers: Dictionary<ColorString>;\n// };\n\n/**\n * For backward compat, normalize the return from `formatTooltip`.\n */\n\nexport function normalizeTooltipFormatResult(result // markersExisting: Dictionary<ColorString>\n) {\n  var markupText; // let markers: Dictionary<ColorString>;\n\n  var markupFragment;\n\n  if (zrUtil.isObject(result)) {\n    if (result.type) {\n      markupFragment = result;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('The return type of `formatTooltip` is not supported: ' + makePrintable(result));\n      }\n    } // else {\n    //     markupText = (result as TooltipFormatResultLegacyObject).html;\n    //     markers = (result as TooltipFormatResultLegacyObject).markers;\n    //     if (markersExisting) {\n    //         markers = zrUtil.merge(markersExisting, markers);\n    //     }\n    // }\n\n  } else {\n    markupText = result;\n  }\n\n  return {\n    markupText: markupText,\n    // markers: markers || markersExisting,\n    markupFragment: markupFragment\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
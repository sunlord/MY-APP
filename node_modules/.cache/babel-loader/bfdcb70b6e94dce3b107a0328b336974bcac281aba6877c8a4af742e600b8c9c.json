{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @deprecated\n * Use `echarts/data/helper/createDimensions` instead.\n */\nimport { createHashMap, each, isString, defaults, extend, isObject, clone } from 'zrender/lib/core/util';\nimport { normalizeToArray } from '../../util/model';\nimport { guessOrdinal, BE_ORDINAL } from './sourceHelper';\nimport { createSourceFromSeriesDataOption, isSourceInstance } from '../Source';\nimport { VISUAL_DIMENSIONS } from '../../util/types';\nimport DataDimensionInfo from '../DataDimensionInfo';\n/**\n * @see {module:echarts/test/ut/spec/data/completeDimensions}\n *\n * This method builds the relationship between:\n * + \"what the coord sys or series requires (see `sysDims`)\",\n * + \"what the user defines (in `encode` and `dimensions`, see `opt.dimsDef` and `opt.encodeDef`)\"\n * + \"what the data source provids (see `source`)\".\n *\n * Some guess strategy will be adapted if user does not define something.\n * If no 'value' dimension specified, the first no-named dimension will be\n * named as 'value'.\n *\n * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n *      provides not only dim template, but also default order.\n *      properties: 'name', 'type', 'displayName'.\n *      `name` of each item provides default coord name.\n *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and\n *                                    provide dims count that the sysDim required.\n *      [{ordinalMeta}] can be specified.\n * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)\n * @param {Object} [opt]\n * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n *      For example: ['asdf', {name, type}, ...].\n * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n * @param {Function} [opt.encodeDefaulter] Called if no `opt.encodeDef` exists.\n *      If not specified, auto find the next available data dim.\n *      param source {module:data/Source}\n *      param dimCount {number}\n *      return {Object} encode Never be `null/undefined`.\n * @param {string} [opt.generateCoord] Generate coord dim with the given name.\n *      If not specified, extra dim names will be:\n *      'value', 'value0', 'value1', ...\n * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.\n *      If `generateCoordCount` specified, the generated dim names will be:\n *      `generateCoord` + 0, `generateCoord` + 1, ...\n *      can be Infinity, indicate that use all of the remain columns.\n * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n * @return {Array.<module:data/DataDimensionInfo>}\n */\n\nfunction completeDimensions(sysDims, source, opt) {\n  if (!isSourceInstance(source)) {\n    source = createSourceFromSeriesDataOption(source);\n  }\n  opt = opt || {};\n  sysDims = (sysDims || []).slice();\n  var dimsDef = (opt.dimsDef || []).slice();\n  var dataDimNameMap = createHashMap();\n  var coordDimNameMap = createHashMap(); // let valueCandidate;\n\n  var result = [];\n  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.\n\n  for (var i = 0; i < dimCount; i++) {\n    var dimDefItemRaw = dimsDef[i];\n    var dimDefItem = dimsDef[i] = extend({}, isObject(dimDefItemRaw) ? dimDefItemRaw : {\n      name: dimDefItemRaw\n    });\n    var userDimName = dimDefItem.name;\n    var resultItem = result[i] = new DataDimensionInfo(); // Name will be applied later for avoiding duplication.\n\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n      // Only if `series.dimensions` is defined in option\n      // displayName, will be set, and dimension will be diplayed vertically in\n      // tooltip by default.\n      resultItem.name = resultItem.displayName = userDimName;\n      dataDimNameMap.set(userDimName, i);\n    }\n    dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);\n  }\n  var encodeDef = opt.encodeDef;\n  if (!encodeDef && opt.encodeDefaulter) {\n    encodeDef = opt.encodeDefaulter(source, dimCount);\n  }\n  var encodeDefMap = createHashMap(encodeDef); // Set `coordDim` and `coordDimIndex` by `encodeDefMap` and normalize `encodeDefMap`.\n\n  encodeDefMap.each(function (dataDimsRaw, coordDim) {\n    var dataDims = normalizeToArray(dataDimsRaw).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is\n    // `{encode: {x: -1, y: 1}}`. Should not filter anything in\n    // this case.\n\n    if (dataDims.length === 1 && !isString(dataDims[0]) && dataDims[0] < 0) {\n      encodeDefMap.set(coordDim, false);\n      return;\n    }\n    var validDataDims = encodeDefMap.set(coordDim, []);\n    each(dataDims, function (resultDimIdxOrName, idx) {\n      // The input resultDimIdx can be dim name or index.\n      var resultDimIdx = isString(resultDimIdxOrName) ? dataDimNameMap.get(resultDimIdxOrName) : resultDimIdxOrName;\n      if (resultDimIdx != null && resultDimIdx < dimCount) {\n        validDataDims[idx] = resultDimIdx;\n        applyDim(result[resultDimIdx], coordDim, idx);\n      }\n    });\n  }); // Apply templetes and default order from `sysDims`.\n\n  var availDimIdx = 0;\n  each(sysDims, function (sysDimItemRaw) {\n    var coordDim;\n    var sysDimItemDimsDef;\n    var sysDimItemOtherDims;\n    var sysDimItem;\n    if (isString(sysDimItemRaw)) {\n      coordDim = sysDimItemRaw;\n      sysDimItem = {};\n    } else {\n      sysDimItem = sysDimItemRaw;\n      coordDim = sysDimItem.name;\n      var ordinalMeta = sysDimItem.ordinalMeta;\n      sysDimItem.ordinalMeta = null;\n      sysDimItem = clone(sysDimItem);\n      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.\n\n      sysDimItemDimsDef = sysDimItem.dimsDef;\n      sysDimItemOtherDims = sysDimItem.otherDims;\n      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n    }\n    var dataDims = encodeDefMap.get(coordDim); // negative resultDimIdx means no need to mapping.\n\n    if (dataDims === false) {\n      return;\n    }\n    dataDims = normalizeToArray(dataDims); // dimensions provides default dim sequences.\n\n    if (!dataDims.length) {\n      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n          availDimIdx++;\n        }\n        availDimIdx < result.length && dataDims.push(availDimIdx++);\n      }\n    } // Apply templates.\n\n    each(dataDims, function (resultDimIdx, coordDimIndex) {\n      var resultItem = result[resultDimIdx];\n      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n      if (resultItem.name == null && sysDimItemDimsDef) {\n        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];\n        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {\n          name: sysDimItemDimsDefItem\n        });\n        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;\n        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;\n      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}\n\n      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n    });\n  });\n  function applyDim(resultItem, coordDim, coordDimIndex) {\n    if (VISUAL_DIMENSIONS.get(coordDim) != null) {\n      resultItem.otherDims[coordDim] = coordDimIndex;\n    } else {\n      resultItem.coordDim = coordDim;\n      resultItem.coordDimIndex = coordDimIndex;\n      coordDimNameMap.set(coordDim, true);\n    }\n  } // Make sure the first extra dim is 'value'.\n\n  var generateCoord = opt.generateCoord;\n  var generateCoordCount = opt.generateCoordCount;\n  var fromZero = generateCoordCount != null;\n  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;\n  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.\n\n  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n    var resultItem = result[resultDimIdx] = result[resultDimIdx] || new DataDimensionInfo();\n    var coordDim = resultItem.coordDim;\n    if (coordDim == null) {\n      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);\n      resultItem.coordDimIndex = 0;\n      if (!generateCoord || generateCoordCount <= 0) {\n        resultItem.isExtraCoord = true;\n      }\n      generateCoordCount--;\n    }\n    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap, false));\n    if (resultItem.type == null && (guessOrdinal(source, resultDimIdx) === BE_ORDINAL.Must // Consider the case:\n    // {\n    //    dataset: {source: [\n    //        ['2001', 123],\n    //        ['2002', 456],\n    //        ...\n    //        ['The others', 987],\n    //    ]},\n    //    series: {type: 'pie'}\n    // }\n    // The first colum should better be treated as a \"ordinal\" although it\n    // might not able to be detected as an \"ordinal\" by `guessOrdinal`.\n    || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) {\n      resultItem.type = 'ordinal';\n    }\n  }\n  return result;\n} // ??? TODO\n// Originally detect dimCount by data[0]. Should we\n// optimize it to only by sysDims and dimensions and encode.\n// So only necessary dims will be initialized.\n// But\n// (1) custom series should be considered. where other dims\n// may be visited.\n// (2) sometimes user need to calcualte bubble size or use visualMap\n// on other dimensions besides coordSys needed.\n// So, dims that is not used by system, should be shared in storage?\n\nfunction getDimCount(source, sysDims, dimsDef, optDimCount) {\n  // Note that the result dimCount should not small than columns count\n  // of data, otherwise `dataDimNameMap` checking will be incorrect.\n  var dimCount = Math.max(source.dimensionsDetectedCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);\n  each(sysDims, function (sysDimItem) {\n    var sysDimItemDimsDef;\n    if (isObject(sysDimItem) && (sysDimItemDimsDef = sysDimItem.dimsDef)) {\n      dimCount = Math.max(dimCount, sysDimItemDimsDef.length);\n    }\n  });\n  return dimCount;\n}\nfunction genName(name, map, fromZero) {\n  if (fromZero || map.get(name) != null) {\n    var i = 0;\n    while (map.get(name + i) != null) {\n      i++;\n    }\n    name += i;\n  }\n  map.set(name, true);\n  return name;\n}\nexport default completeDimensions;","map":{"version":3,"names":["createHashMap","each","isString","defaults","extend","isObject","clone","normalizeToArray","guessOrdinal","BE_ORDINAL","createSourceFromSeriesDataOption","isSourceInstance","VISUAL_DIMENSIONS","DataDimensionInfo","completeDimensions","sysDims","source","opt","slice","dimsDef","dataDimNameMap","coordDimNameMap","result","dimCount","getDimCount","i","dimDefItemRaw","dimDefItem","name","userDimName","resultItem","get","displayName","set","type","encodeDef","encodeDefaulter","encodeDefMap","dataDimsRaw","coordDim","dataDims","length","validDataDims","resultDimIdxOrName","idx","resultDimIdx","applyDim","availDimIdx","sysDimItemRaw","sysDimItemDimsDef","sysDimItemOtherDims","sysDimItem","ordinalMeta","otherDims","coordDimIndex","push","sysDimItemDimsDefItem","defaultTooltip","generateCoord","generateCoordCount","fromZero","extra","genName","isExtraCoord","Must","itemName","seriesName","optDimCount","Math","max","dimensionsDetectedCount","map"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/data/helper/completeDimensions.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @deprecated\n * Use `echarts/data/helper/createDimensions` instead.\n */\nimport { createHashMap, each, isString, defaults, extend, isObject, clone } from 'zrender/lib/core/util';\nimport { normalizeToArray } from '../../util/model';\nimport { guessOrdinal, BE_ORDINAL } from './sourceHelper';\nimport { createSourceFromSeriesDataOption, isSourceInstance } from '../Source';\nimport { VISUAL_DIMENSIONS } from '../../util/types';\nimport DataDimensionInfo from '../DataDimensionInfo';\n/**\n * @see {module:echarts/test/ut/spec/data/completeDimensions}\n *\n * This method builds the relationship between:\n * + \"what the coord sys or series requires (see `sysDims`)\",\n * + \"what the user defines (in `encode` and `dimensions`, see `opt.dimsDef` and `opt.encodeDef`)\"\n * + \"what the data source provids (see `source`)\".\n *\n * Some guess strategy will be adapted if user does not define something.\n * If no 'value' dimension specified, the first no-named dimension will be\n * named as 'value'.\n *\n * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n *      provides not only dim template, but also default order.\n *      properties: 'name', 'type', 'displayName'.\n *      `name` of each item provides default coord name.\n *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and\n *                                    provide dims count that the sysDim required.\n *      [{ordinalMeta}] can be specified.\n * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)\n * @param {Object} [opt]\n * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n *      For example: ['asdf', {name, type}, ...].\n * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n * @param {Function} [opt.encodeDefaulter] Called if no `opt.encodeDef` exists.\n *      If not specified, auto find the next available data dim.\n *      param source {module:data/Source}\n *      param dimCount {number}\n *      return {Object} encode Never be `null/undefined`.\n * @param {string} [opt.generateCoord] Generate coord dim with the given name.\n *      If not specified, extra dim names will be:\n *      'value', 'value0', 'value1', ...\n * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.\n *      If `generateCoordCount` specified, the generated dim names will be:\n *      `generateCoord` + 0, `generateCoord` + 1, ...\n *      can be Infinity, indicate that use all of the remain columns.\n * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n * @return {Array.<module:data/DataDimensionInfo>}\n */\n\nfunction completeDimensions(sysDims, source, opt) {\n  if (!isSourceInstance(source)) {\n    source = createSourceFromSeriesDataOption(source);\n  }\n\n  opt = opt || {};\n  sysDims = (sysDims || []).slice();\n  var dimsDef = (opt.dimsDef || []).slice();\n  var dataDimNameMap = createHashMap();\n  var coordDimNameMap = createHashMap(); // let valueCandidate;\n\n  var result = [];\n  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.\n\n  for (var i = 0; i < dimCount; i++) {\n    var dimDefItemRaw = dimsDef[i];\n    var dimDefItem = dimsDef[i] = extend({}, isObject(dimDefItemRaw) ? dimDefItemRaw : {\n      name: dimDefItemRaw\n    });\n    var userDimName = dimDefItem.name;\n    var resultItem = result[i] = new DataDimensionInfo(); // Name will be applied later for avoiding duplication.\n\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n      // Only if `series.dimensions` is defined in option\n      // displayName, will be set, and dimension will be diplayed vertically in\n      // tooltip by default.\n      resultItem.name = resultItem.displayName = userDimName;\n      dataDimNameMap.set(userDimName, i);\n    }\n\n    dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);\n  }\n\n  var encodeDef = opt.encodeDef;\n\n  if (!encodeDef && opt.encodeDefaulter) {\n    encodeDef = opt.encodeDefaulter(source, dimCount);\n  }\n\n  var encodeDefMap = createHashMap(encodeDef); // Set `coordDim` and `coordDimIndex` by `encodeDefMap` and normalize `encodeDefMap`.\n\n  encodeDefMap.each(function (dataDimsRaw, coordDim) {\n    var dataDims = normalizeToArray(dataDimsRaw).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is\n    // `{encode: {x: -1, y: 1}}`. Should not filter anything in\n    // this case.\n\n    if (dataDims.length === 1 && !isString(dataDims[0]) && dataDims[0] < 0) {\n      encodeDefMap.set(coordDim, false);\n      return;\n    }\n\n    var validDataDims = encodeDefMap.set(coordDim, []);\n    each(dataDims, function (resultDimIdxOrName, idx) {\n      // The input resultDimIdx can be dim name or index.\n      var resultDimIdx = isString(resultDimIdxOrName) ? dataDimNameMap.get(resultDimIdxOrName) : resultDimIdxOrName;\n\n      if (resultDimIdx != null && resultDimIdx < dimCount) {\n        validDataDims[idx] = resultDimIdx;\n        applyDim(result[resultDimIdx], coordDim, idx);\n      }\n    });\n  }); // Apply templetes and default order from `sysDims`.\n\n  var availDimIdx = 0;\n  each(sysDims, function (sysDimItemRaw) {\n    var coordDim;\n    var sysDimItemDimsDef;\n    var sysDimItemOtherDims;\n    var sysDimItem;\n\n    if (isString(sysDimItemRaw)) {\n      coordDim = sysDimItemRaw;\n      sysDimItem = {};\n    } else {\n      sysDimItem = sysDimItemRaw;\n      coordDim = sysDimItem.name;\n      var ordinalMeta = sysDimItem.ordinalMeta;\n      sysDimItem.ordinalMeta = null;\n      sysDimItem = clone(sysDimItem);\n      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.\n\n      sysDimItemDimsDef = sysDimItem.dimsDef;\n      sysDimItemOtherDims = sysDimItem.otherDims;\n      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n    }\n\n    var dataDims = encodeDefMap.get(coordDim); // negative resultDimIdx means no need to mapping.\n\n    if (dataDims === false) {\n      return;\n    }\n\n    dataDims = normalizeToArray(dataDims); // dimensions provides default dim sequences.\n\n    if (!dataDims.length) {\n      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n          availDimIdx++;\n        }\n\n        availDimIdx < result.length && dataDims.push(availDimIdx++);\n      }\n    } // Apply templates.\n\n\n    each(dataDims, function (resultDimIdx, coordDimIndex) {\n      var resultItem = result[resultDimIdx];\n      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n\n      if (resultItem.name == null && sysDimItemDimsDef) {\n        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];\n        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {\n          name: sysDimItemDimsDefItem\n        });\n        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;\n        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;\n      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}\n\n\n      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n    });\n  });\n\n  function applyDim(resultItem, coordDim, coordDimIndex) {\n    if (VISUAL_DIMENSIONS.get(coordDim) != null) {\n      resultItem.otherDims[coordDim] = coordDimIndex;\n    } else {\n      resultItem.coordDim = coordDim;\n      resultItem.coordDimIndex = coordDimIndex;\n      coordDimNameMap.set(coordDim, true);\n    }\n  } // Make sure the first extra dim is 'value'.\n\n\n  var generateCoord = opt.generateCoord;\n  var generateCoordCount = opt.generateCoordCount;\n  var fromZero = generateCoordCount != null;\n  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;\n  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.\n\n  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n    var resultItem = result[resultDimIdx] = result[resultDimIdx] || new DataDimensionInfo();\n    var coordDim = resultItem.coordDim;\n\n    if (coordDim == null) {\n      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);\n      resultItem.coordDimIndex = 0;\n\n      if (!generateCoord || generateCoordCount <= 0) {\n        resultItem.isExtraCoord = true;\n      }\n\n      generateCoordCount--;\n    }\n\n    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap, false));\n\n    if (resultItem.type == null && (guessOrdinal(source, resultDimIdx) === BE_ORDINAL.Must // Consider the case:\n    // {\n    //    dataset: {source: [\n    //        ['2001', 123],\n    //        ['2002', 456],\n    //        ...\n    //        ['The others', 987],\n    //    ]},\n    //    series: {type: 'pie'}\n    // }\n    // The first colum should better be treated as a \"ordinal\" although it\n    // might not able to be detected as an \"ordinal\" by `guessOrdinal`.\n    || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) {\n      resultItem.type = 'ordinal';\n    }\n  }\n\n  return result;\n} // ??? TODO\n// Originally detect dimCount by data[0]. Should we\n// optimize it to only by sysDims and dimensions and encode.\n// So only necessary dims will be initialized.\n// But\n// (1) custom series should be considered. where other dims\n// may be visited.\n// (2) sometimes user need to calcualte bubble size or use visualMap\n// on other dimensions besides coordSys needed.\n// So, dims that is not used by system, should be shared in storage?\n\n\nfunction getDimCount(source, sysDims, dimsDef, optDimCount) {\n  // Note that the result dimCount should not small than columns count\n  // of data, otherwise `dataDimNameMap` checking will be incorrect.\n  var dimCount = Math.max(source.dimensionsDetectedCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);\n  each(sysDims, function (sysDimItem) {\n    var sysDimItemDimsDef;\n\n    if (isObject(sysDimItem) && (sysDimItemDimsDef = sysDimItem.dimsDef)) {\n      dimCount = Math.max(dimCount, sysDimItemDimsDef.length);\n    }\n  });\n  return dimCount;\n}\n\nfunction genName(name, map, fromZero) {\n  if (fromZero || map.get(name) != null) {\n    var i = 0;\n\n    while (map.get(name + i) != null) {\n      i++;\n    }\n\n    name += i;\n  }\n\n  map.set(name, true);\n  return name;\n}\n\nexport default completeDimensions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
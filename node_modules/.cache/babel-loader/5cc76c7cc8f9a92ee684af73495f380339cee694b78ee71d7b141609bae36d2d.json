{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport RoamController from './RoamController';\nimport * as roamHelper from '../../component/helper/roamHelper';\nimport { onIrrelevantElement } from '../../component/helper/cursorHelper';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis, enableComponentHighDownFeatures, setDefaultStateProxy } from '../../util/states';\nimport geoSourceManager from '../../coord/geo/geoSourceManager';\nimport { getUID } from '../../util/component';\nimport { setLabelStyle, getLabelStatesModels } from '../../label/labelStyle';\nimport { getECData } from '../../util/innerStore';\nimport { createOrUpdatePatternFromDecal } from '../../util/decal';\nimport Displayable from 'zrender/lib/graphic/Displayable';\nimport { makeInner } from '../../util/model';\n/**\n * Only these tags enable use `itemStyle` if they are named in SVG.\n * Other tags like <text> <tspan> <image> might not suitable for `itemStyle`.\n * They will not be considered to be styled until some requirements come.\n */\n\nvar OPTION_STYLE_ENABLED_TAGS = ['rect', 'circle', 'line', 'ellipse', 'polygon', 'polyline', 'path'];\nvar OPTION_STYLE_ENABLED_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS);\nvar STATE_TRIGGER_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar LABEL_HOST_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar mapLabelRaw = makeInner();\nfunction getFixedItemStyle(model) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n  return itemStyle;\n}\nvar MapDraw = /** @class */\nfunction () {\n  function MapDraw(api) {\n    var group = new graphic.Group();\n    this.uid = getUID('ec_map_draw');\n    this._controller = new RoamController(api.getZr());\n    this._controllerHost = {\n      target: group\n    };\n    this.group = group;\n    group.add(this._regionsGroup = new graphic.Group());\n    group.add(this._svgGroup = new graphic.Group());\n  }\n  MapDraw.prototype.draw = function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var transformInfo = geo.getTransformInfo();\n    var transformInfoRaw = transformInfo.raw;\n    var transformInfoRoam = transformInfo.roam; // No animation when first draw or in action\n\n    var isFirstDraw = !regionsGroup.childAt(0) || payload;\n    if (isFirstDraw) {\n      group.x = transformInfoRoam.x;\n      group.y = transformInfoRoam.y;\n      group.scaleX = transformInfoRoam.scaleX;\n      group.scaleY = transformInfoRoam.scaleY;\n      group.dirty();\n    } else {\n      graphic.updateProps(group, transformInfoRoam, mapOrGeoModel);\n    }\n    var isVisualEncodedByVisualMap = data && data.getVisual('visualMeta') && data.getVisual('visualMeta').length > 0;\n    var viewBuildCtx = {\n      api: api,\n      geo: geo,\n      mapOrGeoModel: mapOrGeoModel,\n      data: data,\n      isVisualEncodedByVisualMap: isVisualEncodedByVisualMap,\n      isGeo: isGeo,\n      transformInfoRaw: transformInfoRaw\n    };\n    if (geo.resourceType === 'geoJSON') {\n      this._buildGeoJSON(viewBuildCtx);\n    } else if (geo.resourceType === 'geoSVG') {\n      this._buildSVG(viewBuildCtx);\n    }\n    this._updateController(mapOrGeoModel, ecModel, api);\n    this._updateMapSelectHandler(mapOrGeoModel, regionsGroup, api, fromView);\n  };\n  MapDraw.prototype._buildGeoJSON = function (viewBuildCtx) {\n    var regionsGroupByName = this._regionsGroupByName = zrUtil.createHashMap();\n    var regionsInfoByName = zrUtil.createHashMap();\n    var regionsGroup = this._regionsGroup;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n    var data = viewBuildCtx.data;\n    var transformPoint = function (point) {\n      return [point[0] * transformInfoRaw.scaleX + transformInfoRaw.x, point[1] * transformInfoRaw.scaleY + transformInfoRaw.y];\n    };\n    regionsGroup.removeAll(); // Only when the resource is GeoJSON, there is `geo.regions`.\n\n    zrUtil.each(viewBuildCtx.geo.regions, function (region) {\n      var regionName = region.name; // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n\n      var regionGroup = regionsGroupByName.get(regionName);\n      var _a = regionsInfoByName.get(regionName) || {},\n        dataIdx = _a.dataIdx,\n        regionModel = _a.regionModel;\n      if (!regionGroup) {\n        regionGroup = regionsGroupByName.set(regionName, new graphic.Group());\n        regionsGroup.add(regionGroup);\n        dataIdx = data ? data.indexOfName(regionName) : null;\n        regionModel = viewBuildCtx.isGeo ? mapOrGeoModel.getRegionModel(regionName) : data ? data.getItemModel(dataIdx) : null;\n        regionsInfoByName.set(regionName, {\n          dataIdx: dataIdx,\n          regionModel: regionModel\n        });\n      }\n      var compoundPath = new graphic.CompoundPath({\n        segmentIgnoreThreshold: 1,\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n        var points = [];\n        for (var i = 0; i < geometry.exterior.length; ++i) {\n          points.push(transformPoint(geometry.exterior[i]));\n        }\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          segmentIgnoreThreshold: 1,\n          shape: {\n            points: points\n          }\n        }));\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); ++i) {\n          var interior = geometry.interiors[i];\n          var points_1 = [];\n          for (var j = 0; j < interior.length; ++j) {\n            points_1.push(transformPoint(interior[j]));\n          }\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            segmentIgnoreThreshold: 1,\n            shape: {\n              points: points_1\n            }\n          }));\n        }\n      });\n      applyOptionStyleForRegion(viewBuildCtx, compoundPath, dataIdx, regionModel);\n      if (compoundPath instanceof Displayable) {\n        compoundPath.culling = true;\n      }\n      var centerPt = transformPoint(region.getCenter());\n      resetLabelForRegion(viewBuildCtx, compoundPath, regionName, regionModel, mapOrGeoModel, dataIdx, centerPt);\n    }); // Ensure children have been added to `regionGroup` before calling them.\n\n    regionsGroupByName.each(function (regionGroup, regionName) {\n      var _a = regionsInfoByName.get(regionName),\n        dataIdx = _a.dataIdx,\n        regionModel = _a.regionModel;\n      resetEventTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel, dataIdx);\n      resetTooltipForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n      resetStateTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n    }, this);\n  };\n  MapDraw.prototype._buildSVG = function (viewBuildCtx) {\n    var mapName = viewBuildCtx.geo.map;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    this._svgGroup.x = transformInfoRaw.x;\n    this._svgGroup.y = transformInfoRaw.y;\n    this._svgGroup.scaleX = transformInfoRaw.scaleX;\n    this._svgGroup.scaleY = transformInfoRaw.scaleY;\n    if (this._svgResourceChanged(mapName)) {\n      this._freeSVG();\n      this._useSVG(mapName);\n    }\n    var svgDispatcherMap = this._svgDispatcherMap = zrUtil.createHashMap();\n    var focusSelf = false;\n    zrUtil.each(this._svgGraphicRecord.named, function (namedItem) {\n      // Note that we also allow different elements have the same name.\n      // For example, a glyph of a city and the label of the city have\n      // the same name and their tooltip info can be defined in a single\n      // region option.\n      var regionName = namedItem.name;\n      var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n      var data = viewBuildCtx.data;\n      var svgNodeTagLower = namedItem.svgNodeTagLower;\n      var el = namedItem.el;\n      var dataIdx = data ? data.indexOfName(regionName) : null;\n      var regionModel = mapOrGeoModel.getRegionModel(regionName);\n      if (OPTION_STYLE_ENABLED_TAG_MAP.get(svgNodeTagLower) != null && el instanceof Displayable) {\n        applyOptionStyleForRegion(viewBuildCtx, el, dataIdx, regionModel);\n      }\n      if (el instanceof Displayable) {\n        el.culling = true;\n      } // We do not know how the SVG like so we'd better not to change z2.\n      // Otherwise it might bring some unexpected result. For example,\n      // an area hovered that make some inner city can not be clicked.\n\n      el.z2EmphasisLift = 0; // If self named:\n\n      if (!namedItem.namedFrom) {\n        // label should batter to be displayed based on the center of <g>\n        // if it is named rather than displayed on each child.\n        if (LABEL_HOST_MAP.get(svgNodeTagLower) != null) {\n          resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx, null);\n        }\n        resetEventTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx);\n        resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n        if (STATE_TRIGGER_TAG_MAP.get(svgNodeTagLower) != null) {\n          var focus_1 = resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n          if (focus_1 === 'self') {\n            focusSelf = true;\n          }\n          var els = svgDispatcherMap.get(regionName) || svgDispatcherMap.set(regionName, []);\n          els.push(el);\n        }\n      }\n    }, this);\n    this._enableBlurEntireSVG(focusSelf, viewBuildCtx);\n  };\n  MapDraw.prototype._enableBlurEntireSVG = function (focusSelf, viewBuildCtx) {\n    // It's a little complicated to support blurring the entire geoSVG in series-map.\n    // So do not suport it until some requirements come.\n    // At present, in series-map, only regions can be blurred.\n    if (focusSelf && viewBuildCtx.isGeo) {\n      var blurStyle = viewBuildCtx.mapOrGeoModel.getModel(['blur', 'itemStyle']).getItemStyle(); // Only suport `opacity` here. Because not sure that other props are suitable for\n      // all of the elements generated by SVG (especially for Text/TSpan/Image/... ).\n\n      var opacity_1 = blurStyle.opacity;\n      this._svgGraphicRecord.root.traverse(function (el) {\n        if (!el.isGroup) {\n          // PENDING: clear those settings to SVG elements when `_freeSVG`.\n          // (Currently it happen not to be needed.)\n          setDefaultStateProxy(el);\n          var style = el.ensureState('blur').style || {}; // Do not overwrite the region style that already set from region option.\n\n          if (style.opacity == null && opacity_1 != null) {\n            style.opacity = opacity_1;\n          } // If `ensureState('blur').style = {}`, there will be default opacity.\n          // Enable `stateTransition` (animation).\n\n          el.ensureState('emphasis');\n        }\n      });\n    }\n  };\n  MapDraw.prototype.remove = function () {\n    this._regionsGroup.removeAll();\n    this._regionsGroupByName = null;\n    this._svgGroup.removeAll();\n    this._freeSVG();\n    this._controller.dispose();\n    this._controllerHost = null;\n  };\n  MapDraw.prototype.findHighDownDispatchers = function (name, geoModel) {\n    if (name == null) {\n      return [];\n    }\n    var geo = geoModel.coordinateSystem;\n    if (geo.resourceType === 'geoJSON') {\n      var regionsGroupByName = this._regionsGroupByName;\n      if (regionsGroupByName) {\n        var regionGroup = regionsGroupByName.get(name);\n        return regionGroup ? [regionGroup] : [];\n      }\n    } else if (geo.resourceType === 'geoSVG') {\n      return this._svgDispatcherMap && this._svgDispatcherMap.get(name) || [];\n    }\n  };\n  MapDraw.prototype._svgResourceChanged = function (mapName) {\n    return this._svgMapName !== mapName;\n  };\n  MapDraw.prototype._useSVG = function (mapName) {\n    var resource = geoSourceManager.getGeoResource(mapName);\n    if (resource && resource.type === 'geoSVG') {\n      var svgGraphic = resource.useGraphic(this.uid);\n      this._svgGroup.add(svgGraphic.root);\n      this._svgGraphicRecord = svgGraphic;\n      this._svgMapName = mapName;\n    }\n  };\n  MapDraw.prototype._freeSVG = function () {\n    var mapName = this._svgMapName;\n    if (mapName == null) {\n      return;\n    }\n    var resource = geoSourceManager.getGeoResource(mapName);\n    if (resource && resource.type === 'geoSVG') {\n      resource.freeGraphic(this.uid);\n    }\n    this._svgGraphicRecord = null;\n    this._svgDispatcherMap = null;\n    this._svgGroup.removeAll();\n    this._svgMapName = null;\n  };\n  MapDraw.prototype._updateController = function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost; // @ts-ignore FIXME:TS\n\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n    // @ts-ignore FIXME:TS\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.containPoint([x, y]) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  };\n  /**\n   * FIXME: this is a temporarily workaround.\n   * When `geoRoam` the elements need to be reset in `MapView['render']`, because the props like\n   * `ignore` might have been modified by `LabelManager`, and `LabelManager#addLabelsOfSeries`\n   * will subsequently cache `defaultAttr` like `ignore`. If do not do this reset, the modified\n   * props will have no chance to be restored.\n   * Note: this reset should be after `clearStates` in `renderSeries` becuase `useStates` in\n   * `renderSeries` will cache the modified `ignore` to `el._normalState`.\n   * TODO:\n   * Use clone/immutable in `LabelManager`?\n   */\n\n  MapDraw.prototype.resetForLabelLayout = function () {\n    this.group.traverse(function (el) {\n      var label = el.getTextContent();\n      if (label) {\n        label.ignore = mapLabelRaw(label).ignore;\n      }\n    });\n  };\n  MapDraw.prototype._updateMapSelectHandler = function (mapOrGeoModel, regionsGroup, api, fromView) {\n    var mapDraw = this;\n    regionsGroup.off('mousedown');\n    regionsGroup.off('click'); // @ts-ignore FIXME:TS resolve type conflict\n\n    if (mapOrGeoModel.get('selectedMode')) {\n      regionsGroup.on('mousedown', function () {\n        mapDraw._mouseDownFlag = true;\n      });\n      regionsGroup.on('click', function (e) {\n        if (!mapDraw._mouseDownFlag) {\n          return;\n        }\n        mapDraw._mouseDownFlag = false;\n      });\n    }\n  };\n  return MapDraw;\n}();\n;\nfunction applyOptionStyleForRegion(viewBuildCtx, el, dataIndex, regionModel) {\n  // All of the path are using `itemStyle`, becuase\n  // (1) Some SVG also use fill on polyline (The different between\n  // polyline and polygon is \"open\" or \"close\" but not fill or not).\n  // (2) For the common props like opacity, if some use itemStyle\n  // and some use `lineStyle`, it might confuse users.\n  // (3) Most SVG use <path>, where can not detect wether draw a \"line\"\n  // or a filled shape, so use `itemStyle` for <path>.\n  var normalStyleModel = regionModel.getModel('itemStyle');\n  var emphasisStyleModel = regionModel.getModel(['emphasis', 'itemStyle']);\n  var blurStyleModel = regionModel.getModel(['blur', 'itemStyle']);\n  var selectStyleModel = regionModel.getModel(['select', 'itemStyle']); // NOTE: DONT use 'style' in visual when drawing map.\n  // This component is used for drawing underlying map for both geo component and map series.\n\n  var normalStyle = getFixedItemStyle(normalStyleModel);\n  var emphasisStyle = getFixedItemStyle(emphasisStyleModel);\n  var selectStyle = getFixedItemStyle(selectStyleModel);\n  var blurStyle = getFixedItemStyle(blurStyleModel); // Update the itemStyle if has data visual\n\n  var data = viewBuildCtx.data;\n  if (data) {\n    // Only visual color of each item will be used. It can be encoded by visualMap\n    // But visual color of series is used in symbol drawing\n    // Visual color for each series is for the symbol draw\n    var style = data.getItemVisual(dataIndex, 'style');\n    var decal = data.getItemVisual(dataIndex, 'decal');\n    if (viewBuildCtx.isVisualEncodedByVisualMap && style.fill) {\n      normalStyle.fill = style.fill;\n    }\n    if (decal) {\n      normalStyle.decal = createOrUpdatePatternFromDecal(decal, viewBuildCtx.api);\n    }\n  } // SVG text, tspan and image can be named but not supporeted\n  // to be styled by region option yet.\n\n  el.setStyle(normalStyle);\n  el.style.strokeNoScale = true;\n  el.ensureState('emphasis').style = emphasisStyle;\n  el.ensureState('select').style = selectStyle;\n  el.ensureState('blur').style = blurStyle; // Enable blur\n\n  setDefaultStateProxy(el);\n}\nfunction resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel,\n// Exist only if `viewBuildCtx.data` exists.\ndataIdx,\n// If labelXY not provided, use `textConfig.position: 'inside'`\nlabelXY) {\n  var data = viewBuildCtx.data;\n  var isGeo = viewBuildCtx.isGeo;\n  var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n  var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n  // 1. In map series and data value is NaN\n  // 2. In geo component\n  // 3. Region has no series legendIcon, which will be add a showLabel flag in mapSymbolLayout\n\n  if (isGeo || isDataNaN || itemLayout && itemLayout.showLabel) {\n    var query = !isGeo ? dataIdx : regionName;\n    var labelFetcher = void 0; // Consider dataIdx not found.\n\n    if (!data || dataIdx >= 0) {\n      labelFetcher = mapOrGeoModel;\n    }\n    var specifiedTextOpt = labelXY ? {\n      normal: {\n        align: 'center',\n        verticalAlign: 'middle'\n      }\n    } : null; // Caveat: must be called after `setDefaultStateProxy(el);` called.\n    // because textContent will be assign with `el.stateProxy` inside.\n\n    setLabelStyle(el, getLabelStatesModels(regionModel), {\n      labelFetcher: labelFetcher,\n      labelDataIndex: query,\n      defaultText: regionName\n    }, specifiedTextOpt);\n    var textEl = el.getTextContent();\n    if (textEl) {\n      mapLabelRaw(textEl).ignore = textEl.ignore;\n      if (el.textConfig && labelXY) {\n        // Compute a relative offset based on the el bounding rect.\n        var rect = el.getBoundingRect().clone(); // Need to make sure the percent position base on the same rect in normal and\n        // emphasis state. Otherwise if using boundingRect of el, but the emphasis state\n        // has borderWidth (even 0.5px), the text position will be changed obviously\n        // if the position is very big like ['1234%', '1345%'].\n\n        el.textConfig.layoutRect = rect;\n        el.textConfig.position = [(labelXY[0] - rect.x) / rect.width * 100 + '%', (labelXY[1] - rect.y) / rect.height * 100 + '%'];\n      }\n    } // PENDING:\n    // If labelLayout is enabled (test/label-layout.html), el.dataIndex should be specified.\n    // But el.dataIndex is also used to determine whether user event should be triggered,\n    // where el.seriesIndex or el.dataModel must be specified. At present for a single el\n    // there is not case that \"only label layout enabled but user event disabled\", so here\n    // we depends `resetEventTriggerForRegion` to do the job of setting `el.dataIndex`.\n\n    el.disableLabelAnimation = true;\n  } else {\n    el.removeTextContent();\n    el.removeTextConfig();\n    el.disableLabelAnimation = null;\n  }\n}\nfunction resetEventTriggerForRegion(viewBuildCtx, eventTrigger, regionName, regionModel, mapOrGeoModel,\n// Exist only if `viewBuildCtx.data` exists.\ndataIdx) {\n  // setItemGraphicEl, setHoverStyle after all polygons and labels\n  // are added to the rigionGroup\n  if (viewBuildCtx.data) {\n    // FIXME: when series-map use a SVG map, and there are duplicated name specified\n    // on different SVG elements, after `data.setItemGraphicEl(...)`:\n    // (1) all of them will be mounted with `dataIndex`, `seriesIndex`, so that tooltip\n    // can be triggered only mouse hover. That's correct.\n    // (2) only the last element will be kept in `data`, so that if trigger tooltip\n    // by `dispatchAction`, only the last one can be found and triggered. That might be\n    // not correct. We will fix it in future if anyone demanding that.\n    viewBuildCtx.data.setItemGraphicEl(dataIdx, eventTrigger);\n  } // series-map will not trigger \"geoselectchange\" no matter it is\n  // based on a declared geo component. Becuause series-map will\n  // trigger \"selectchange\". If it trigger both the two events,\n  // If users call `chart.dispatchAction({type: 'toggleSelect'})`,\n  // it not easy to also fire event \"geoselectchanged\".\n  else {\n    // Package custom mouse event for geo component\n    getECData(eventTrigger).eventData = {\n      componentType: 'geo',\n      componentIndex: mapOrGeoModel.componentIndex,\n      geoIndex: mapOrGeoModel.componentIndex,\n      name: regionName,\n      region: regionModel && regionModel.option || {}\n    };\n  }\n}\nfunction resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  if (!viewBuildCtx.data) {\n    graphic.setTooltipConfig({\n      el: el,\n      componentModel: mapOrGeoModel,\n      itemName: regionName,\n      // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n      itemTooltipOption: regionModel.get('tooltip')\n    });\n  }\n}\nfunction resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n  el.highDownSilentOnTouch = !!mapOrGeoModel.get('selectedMode'); // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n\n  var emphasisModel = regionModel.getModel('emphasis');\n  var focus = emphasisModel.get('focus');\n  enableHoverEmphasis(el, focus, emphasisModel.get('blurScope'));\n  if (viewBuildCtx.isGeo) {\n    enableComponentHighDownFeatures(el, mapOrGeoModel, regionName);\n  }\n  return focus;\n}\nexport default MapDraw; // @ts-ignore FIXME:TS fix the \"compatible with each other\"?","map":{"version":3,"names":["zrUtil","RoamController","roamHelper","onIrrelevantElement","graphic","enableHoverEmphasis","enableComponentHighDownFeatures","setDefaultStateProxy","geoSourceManager","getUID","setLabelStyle","getLabelStatesModels","getECData","createOrUpdatePatternFromDecal","Displayable","makeInner","OPTION_STYLE_ENABLED_TAGS","OPTION_STYLE_ENABLED_TAG_MAP","createHashMap","STATE_TRIGGER_TAG_MAP","concat","LABEL_HOST_MAP","mapLabelRaw","getFixedItemStyle","model","itemStyle","getItemStyle","areaColor","get","fill","MapDraw","api","group","Group","uid","_controller","getZr","_controllerHost","target","add","_regionsGroup","_svgGroup","prototype","draw","mapOrGeoModel","ecModel","fromView","payload","isGeo","mainType","data","getData","eachComponent","subType","mapSeries","getHostGeoModel","geo","coordinateSystem","regionsGroup","transformInfo","getTransformInfo","transformInfoRaw","raw","transformInfoRoam","roam","isFirstDraw","childAt","x","y","scaleX","scaleY","dirty","updateProps","isVisualEncodedByVisualMap","getVisual","length","viewBuildCtx","resourceType","_buildGeoJSON","_buildSVG","_updateController","_updateMapSelectHandler","regionsGroupByName","_regionsGroupByName","regionsInfoByName","transformPoint","point","removeAll","each","regions","region","regionName","name","regionGroup","_a","dataIdx","regionModel","set","indexOfName","getRegionModel","getItemModel","compoundPath","CompoundPath","segmentIgnoreThreshold","shape","paths","geometries","geometry","type","points","i","exterior","push","Polygon","interiors","interior","points_1","j","applyOptionStyleForRegion","culling","centerPt","getCenter","resetLabelForRegion","resetEventTriggerForRegion","resetTooltipForRegion","resetStateTriggerForRegion","mapName","map","_svgResourceChanged","_freeSVG","_useSVG","svgDispatcherMap","_svgDispatcherMap","focusSelf","_svgGraphicRecord","named","namedItem","svgNodeTagLower","el","z2EmphasisLift","namedFrom","focus_1","els","_enableBlurEntireSVG","blurStyle","getModel","opacity_1","opacity","root","traverse","isGroup","style","ensureState","remove","dispose","findHighDownDispatchers","geoModel","_svgMapName","resource","getGeoResource","svgGraphic","useGraphic","freeGraphic","controller","controllerHost","zoomLimit","zoom","getZoom","enable","makeActionBase","action","componentType","id","off","on","e","_mouseDownFlag","updateViewOnPan","dx","dy","dispatchAction","extend","updateViewOnZoom","scale","originX","originY","setPointerChecker","containPoint","resetForLabelLayout","label","getTextContent","ignore","mapDraw","dataIndex","normalStyleModel","emphasisStyleModel","blurStyleModel","selectStyleModel","normalStyle","emphasisStyle","selectStyle","getItemVisual","decal","setStyle","strokeNoScale","labelXY","isDataNaN","isNaN","mapDimension","itemLayout","getItemLayout","showLabel","query","labelFetcher","specifiedTextOpt","normal","align","verticalAlign","labelDataIndex","defaultText","textEl","textConfig","rect","getBoundingRect","clone","layoutRect","position","width","height","disableLabelAnimation","removeTextContent","removeTextConfig","eventTrigger","setItemGraphicEl","eventData","componentIndex","geoIndex","option","setTooltipConfig","componentModel","itemName","itemTooltipOption","highDownSilentOnTouch","emphasisModel","focus"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/component/helper/MapDraw.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport RoamController from './RoamController';\nimport * as roamHelper from '../../component/helper/roamHelper';\nimport { onIrrelevantElement } from '../../component/helper/cursorHelper';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis, enableComponentHighDownFeatures, setDefaultStateProxy } from '../../util/states';\nimport geoSourceManager from '../../coord/geo/geoSourceManager';\nimport { getUID } from '../../util/component';\nimport { setLabelStyle, getLabelStatesModels } from '../../label/labelStyle';\nimport { getECData } from '../../util/innerStore';\nimport { createOrUpdatePatternFromDecal } from '../../util/decal';\nimport Displayable from 'zrender/lib/graphic/Displayable';\nimport { makeInner } from '../../util/model';\n/**\n * Only these tags enable use `itemStyle` if they are named in SVG.\n * Other tags like <text> <tspan> <image> might not suitable for `itemStyle`.\n * They will not be considered to be styled until some requirements come.\n */\n\nvar OPTION_STYLE_ENABLED_TAGS = ['rect', 'circle', 'line', 'ellipse', 'polygon', 'polyline', 'path'];\nvar OPTION_STYLE_ENABLED_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS);\nvar STATE_TRIGGER_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar LABEL_HOST_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar mapLabelRaw = makeInner();\n\nfunction getFixedItemStyle(model) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nvar MapDraw =\n/** @class */\nfunction () {\n  function MapDraw(api) {\n    var group = new graphic.Group();\n    this.uid = getUID('ec_map_draw');\n    this._controller = new RoamController(api.getZr());\n    this._controllerHost = {\n      target: group\n    };\n    this.group = group;\n    group.add(this._regionsGroup = new graphic.Group());\n    group.add(this._svgGroup = new graphic.Group());\n  }\n\n  MapDraw.prototype.draw = function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var transformInfo = geo.getTransformInfo();\n    var transformInfoRaw = transformInfo.raw;\n    var transformInfoRoam = transformInfo.roam; // No animation when first draw or in action\n\n    var isFirstDraw = !regionsGroup.childAt(0) || payload;\n\n    if (isFirstDraw) {\n      group.x = transformInfoRoam.x;\n      group.y = transformInfoRoam.y;\n      group.scaleX = transformInfoRoam.scaleX;\n      group.scaleY = transformInfoRoam.scaleY;\n      group.dirty();\n    } else {\n      graphic.updateProps(group, transformInfoRoam, mapOrGeoModel);\n    }\n\n    var isVisualEncodedByVisualMap = data && data.getVisual('visualMeta') && data.getVisual('visualMeta').length > 0;\n    var viewBuildCtx = {\n      api: api,\n      geo: geo,\n      mapOrGeoModel: mapOrGeoModel,\n      data: data,\n      isVisualEncodedByVisualMap: isVisualEncodedByVisualMap,\n      isGeo: isGeo,\n      transformInfoRaw: transformInfoRaw\n    };\n\n    if (geo.resourceType === 'geoJSON') {\n      this._buildGeoJSON(viewBuildCtx);\n    } else if (geo.resourceType === 'geoSVG') {\n      this._buildSVG(viewBuildCtx);\n    }\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    this._updateMapSelectHandler(mapOrGeoModel, regionsGroup, api, fromView);\n  };\n\n  MapDraw.prototype._buildGeoJSON = function (viewBuildCtx) {\n    var regionsGroupByName = this._regionsGroupByName = zrUtil.createHashMap();\n    var regionsInfoByName = zrUtil.createHashMap();\n    var regionsGroup = this._regionsGroup;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n    var data = viewBuildCtx.data;\n\n    var transformPoint = function (point) {\n      return [point[0] * transformInfoRaw.scaleX + transformInfoRaw.x, point[1] * transformInfoRaw.scaleY + transformInfoRaw.y];\n    };\n\n    regionsGroup.removeAll(); // Only when the resource is GeoJSON, there is `geo.regions`.\n\n    zrUtil.each(viewBuildCtx.geo.regions, function (region) {\n      var regionName = region.name; // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n\n      var regionGroup = regionsGroupByName.get(regionName);\n\n      var _a = regionsInfoByName.get(regionName) || {},\n          dataIdx = _a.dataIdx,\n          regionModel = _a.regionModel;\n\n      if (!regionGroup) {\n        regionGroup = regionsGroupByName.set(regionName, new graphic.Group());\n        regionsGroup.add(regionGroup);\n        dataIdx = data ? data.indexOfName(regionName) : null;\n        regionModel = viewBuildCtx.isGeo ? mapOrGeoModel.getRegionModel(regionName) : data ? data.getItemModel(dataIdx) : null;\n        regionsInfoByName.set(regionName, {\n          dataIdx: dataIdx,\n          regionModel: regionModel\n        });\n      }\n\n      var compoundPath = new graphic.CompoundPath({\n        segmentIgnoreThreshold: 1,\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        var points = [];\n\n        for (var i = 0; i < geometry.exterior.length; ++i) {\n          points.push(transformPoint(geometry.exterior[i]));\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          segmentIgnoreThreshold: 1,\n          shape: {\n            points: points\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); ++i) {\n          var interior = geometry.interiors[i];\n          var points_1 = [];\n\n          for (var j = 0; j < interior.length; ++j) {\n            points_1.push(transformPoint(interior[j]));\n          }\n\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            segmentIgnoreThreshold: 1,\n            shape: {\n              points: points_1\n            }\n          }));\n        }\n      });\n      applyOptionStyleForRegion(viewBuildCtx, compoundPath, dataIdx, regionModel);\n\n      if (compoundPath instanceof Displayable) {\n        compoundPath.culling = true;\n      }\n\n      var centerPt = transformPoint(region.getCenter());\n      resetLabelForRegion(viewBuildCtx, compoundPath, regionName, regionModel, mapOrGeoModel, dataIdx, centerPt);\n    }); // Ensure children have been added to `regionGroup` before calling them.\n\n    regionsGroupByName.each(function (regionGroup, regionName) {\n      var _a = regionsInfoByName.get(regionName),\n          dataIdx = _a.dataIdx,\n          regionModel = _a.regionModel;\n\n      resetEventTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel, dataIdx);\n      resetTooltipForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n      resetStateTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n    }, this);\n  };\n\n  MapDraw.prototype._buildSVG = function (viewBuildCtx) {\n    var mapName = viewBuildCtx.geo.map;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    this._svgGroup.x = transformInfoRaw.x;\n    this._svgGroup.y = transformInfoRaw.y;\n    this._svgGroup.scaleX = transformInfoRaw.scaleX;\n    this._svgGroup.scaleY = transformInfoRaw.scaleY;\n\n    if (this._svgResourceChanged(mapName)) {\n      this._freeSVG();\n\n      this._useSVG(mapName);\n    }\n\n    var svgDispatcherMap = this._svgDispatcherMap = zrUtil.createHashMap();\n    var focusSelf = false;\n    zrUtil.each(this._svgGraphicRecord.named, function (namedItem) {\n      // Note that we also allow different elements have the same name.\n      // For example, a glyph of a city and the label of the city have\n      // the same name and their tooltip info can be defined in a single\n      // region option.\n      var regionName = namedItem.name;\n      var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n      var data = viewBuildCtx.data;\n      var svgNodeTagLower = namedItem.svgNodeTagLower;\n      var el = namedItem.el;\n      var dataIdx = data ? data.indexOfName(regionName) : null;\n      var regionModel = mapOrGeoModel.getRegionModel(regionName);\n\n      if (OPTION_STYLE_ENABLED_TAG_MAP.get(svgNodeTagLower) != null && el instanceof Displayable) {\n        applyOptionStyleForRegion(viewBuildCtx, el, dataIdx, regionModel);\n      }\n\n      if (el instanceof Displayable) {\n        el.culling = true;\n      } // We do not know how the SVG like so we'd better not to change z2.\n      // Otherwise it might bring some unexpected result. For example,\n      // an area hovered that make some inner city can not be clicked.\n\n\n      el.z2EmphasisLift = 0; // If self named:\n\n      if (!namedItem.namedFrom) {\n        // label should batter to be displayed based on the center of <g>\n        // if it is named rather than displayed on each child.\n        if (LABEL_HOST_MAP.get(svgNodeTagLower) != null) {\n          resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx, null);\n        }\n\n        resetEventTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx);\n        resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n\n        if (STATE_TRIGGER_TAG_MAP.get(svgNodeTagLower) != null) {\n          var focus_1 = resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n\n          if (focus_1 === 'self') {\n            focusSelf = true;\n          }\n\n          var els = svgDispatcherMap.get(regionName) || svgDispatcherMap.set(regionName, []);\n          els.push(el);\n        }\n      }\n    }, this);\n\n    this._enableBlurEntireSVG(focusSelf, viewBuildCtx);\n  };\n\n  MapDraw.prototype._enableBlurEntireSVG = function (focusSelf, viewBuildCtx) {\n    // It's a little complicated to support blurring the entire geoSVG in series-map.\n    // So do not suport it until some requirements come.\n    // At present, in series-map, only regions can be blurred.\n    if (focusSelf && viewBuildCtx.isGeo) {\n      var blurStyle = viewBuildCtx.mapOrGeoModel.getModel(['blur', 'itemStyle']).getItemStyle(); // Only suport `opacity` here. Because not sure that other props are suitable for\n      // all of the elements generated by SVG (especially for Text/TSpan/Image/... ).\n\n      var opacity_1 = blurStyle.opacity;\n\n      this._svgGraphicRecord.root.traverse(function (el) {\n        if (!el.isGroup) {\n          // PENDING: clear those settings to SVG elements when `_freeSVG`.\n          // (Currently it happen not to be needed.)\n          setDefaultStateProxy(el);\n          var style = el.ensureState('blur').style || {}; // Do not overwrite the region style that already set from region option.\n\n          if (style.opacity == null && opacity_1 != null) {\n            style.opacity = opacity_1;\n          } // If `ensureState('blur').style = {}`, there will be default opacity.\n          // Enable `stateTransition` (animation).\n\n\n          el.ensureState('emphasis');\n        }\n      });\n    }\n  };\n\n  MapDraw.prototype.remove = function () {\n    this._regionsGroup.removeAll();\n\n    this._regionsGroupByName = null;\n\n    this._svgGroup.removeAll();\n\n    this._freeSVG();\n\n    this._controller.dispose();\n\n    this._controllerHost = null;\n  };\n\n  MapDraw.prototype.findHighDownDispatchers = function (name, geoModel) {\n    if (name == null) {\n      return [];\n    }\n\n    var geo = geoModel.coordinateSystem;\n\n    if (geo.resourceType === 'geoJSON') {\n      var regionsGroupByName = this._regionsGroupByName;\n\n      if (regionsGroupByName) {\n        var regionGroup = regionsGroupByName.get(name);\n        return regionGroup ? [regionGroup] : [];\n      }\n    } else if (geo.resourceType === 'geoSVG') {\n      return this._svgDispatcherMap && this._svgDispatcherMap.get(name) || [];\n    }\n  };\n\n  MapDraw.prototype._svgResourceChanged = function (mapName) {\n    return this._svgMapName !== mapName;\n  };\n\n  MapDraw.prototype._useSVG = function (mapName) {\n    var resource = geoSourceManager.getGeoResource(mapName);\n\n    if (resource && resource.type === 'geoSVG') {\n      var svgGraphic = resource.useGraphic(this.uid);\n\n      this._svgGroup.add(svgGraphic.root);\n\n      this._svgGraphicRecord = svgGraphic;\n      this._svgMapName = mapName;\n    }\n  };\n\n  MapDraw.prototype._freeSVG = function () {\n    var mapName = this._svgMapName;\n\n    if (mapName == null) {\n      return;\n    }\n\n    var resource = geoSourceManager.getGeoResource(mapName);\n\n    if (resource && resource.type === 'geoSVG') {\n      resource.freeGraphic(this.uid);\n    }\n\n    this._svgGraphicRecord = null;\n    this._svgDispatcherMap = null;\n\n    this._svgGroup.removeAll();\n\n    this._svgMapName = null;\n  };\n\n  MapDraw.prototype._updateController = function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost; // @ts-ignore FIXME:TS\n\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n    // @ts-ignore FIXME:TS\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.containPoint([x, y]) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  };\n  /**\n   * FIXME: this is a temporarily workaround.\n   * When `geoRoam` the elements need to be reset in `MapView['render']`, because the props like\n   * `ignore` might have been modified by `LabelManager`, and `LabelManager#addLabelsOfSeries`\n   * will subsequently cache `defaultAttr` like `ignore`. If do not do this reset, the modified\n   * props will have no chance to be restored.\n   * Note: this reset should be after `clearStates` in `renderSeries` becuase `useStates` in\n   * `renderSeries` will cache the modified `ignore` to `el._normalState`.\n   * TODO:\n   * Use clone/immutable in `LabelManager`?\n   */\n\n\n  MapDraw.prototype.resetForLabelLayout = function () {\n    this.group.traverse(function (el) {\n      var label = el.getTextContent();\n\n      if (label) {\n        label.ignore = mapLabelRaw(label).ignore;\n      }\n    });\n  };\n\n  MapDraw.prototype._updateMapSelectHandler = function (mapOrGeoModel, regionsGroup, api, fromView) {\n    var mapDraw = this;\n    regionsGroup.off('mousedown');\n    regionsGroup.off('click'); // @ts-ignore FIXME:TS resolve type conflict\n\n    if (mapOrGeoModel.get('selectedMode')) {\n      regionsGroup.on('mousedown', function () {\n        mapDraw._mouseDownFlag = true;\n      });\n      regionsGroup.on('click', function (e) {\n        if (!mapDraw._mouseDownFlag) {\n          return;\n        }\n\n        mapDraw._mouseDownFlag = false;\n      });\n    }\n  };\n\n  return MapDraw;\n}();\n\n;\n\nfunction applyOptionStyleForRegion(viewBuildCtx, el, dataIndex, regionModel) {\n  // All of the path are using `itemStyle`, becuase\n  // (1) Some SVG also use fill on polyline (The different between\n  // polyline and polygon is \"open\" or \"close\" but not fill or not).\n  // (2) For the common props like opacity, if some use itemStyle\n  // and some use `lineStyle`, it might confuse users.\n  // (3) Most SVG use <path>, where can not detect wether draw a \"line\"\n  // or a filled shape, so use `itemStyle` for <path>.\n  var normalStyleModel = regionModel.getModel('itemStyle');\n  var emphasisStyleModel = regionModel.getModel(['emphasis', 'itemStyle']);\n  var blurStyleModel = regionModel.getModel(['blur', 'itemStyle']);\n  var selectStyleModel = regionModel.getModel(['select', 'itemStyle']); // NOTE: DONT use 'style' in visual when drawing map.\n  // This component is used for drawing underlying map for both geo component and map series.\n\n  var normalStyle = getFixedItemStyle(normalStyleModel);\n  var emphasisStyle = getFixedItemStyle(emphasisStyleModel);\n  var selectStyle = getFixedItemStyle(selectStyleModel);\n  var blurStyle = getFixedItemStyle(blurStyleModel); // Update the itemStyle if has data visual\n\n  var data = viewBuildCtx.data;\n\n  if (data) {\n    // Only visual color of each item will be used. It can be encoded by visualMap\n    // But visual color of series is used in symbol drawing\n    // Visual color for each series is for the symbol draw\n    var style = data.getItemVisual(dataIndex, 'style');\n    var decal = data.getItemVisual(dataIndex, 'decal');\n\n    if (viewBuildCtx.isVisualEncodedByVisualMap && style.fill) {\n      normalStyle.fill = style.fill;\n    }\n\n    if (decal) {\n      normalStyle.decal = createOrUpdatePatternFromDecal(decal, viewBuildCtx.api);\n    }\n  } // SVG text, tspan and image can be named but not supporeted\n  // to be styled by region option yet.\n\n\n  el.setStyle(normalStyle);\n  el.style.strokeNoScale = true;\n  el.ensureState('emphasis').style = emphasisStyle;\n  el.ensureState('select').style = selectStyle;\n  el.ensureState('blur').style = blurStyle; // Enable blur\n\n  setDefaultStateProxy(el);\n}\n\nfunction resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, // Exist only if `viewBuildCtx.data` exists.\ndataIdx, // If labelXY not provided, use `textConfig.position: 'inside'`\nlabelXY) {\n  var data = viewBuildCtx.data;\n  var isGeo = viewBuildCtx.isGeo;\n  var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n  var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n  // 1. In map series and data value is NaN\n  // 2. In geo component\n  // 3. Region has no series legendIcon, which will be add a showLabel flag in mapSymbolLayout\n\n  if (isGeo || isDataNaN || itemLayout && itemLayout.showLabel) {\n    var query = !isGeo ? dataIdx : regionName;\n    var labelFetcher = void 0; // Consider dataIdx not found.\n\n    if (!data || dataIdx >= 0) {\n      labelFetcher = mapOrGeoModel;\n    }\n\n    var specifiedTextOpt = labelXY ? {\n      normal: {\n        align: 'center',\n        verticalAlign: 'middle'\n      }\n    } : null; // Caveat: must be called after `setDefaultStateProxy(el);` called.\n    // because textContent will be assign with `el.stateProxy` inside.\n\n    setLabelStyle(el, getLabelStatesModels(regionModel), {\n      labelFetcher: labelFetcher,\n      labelDataIndex: query,\n      defaultText: regionName\n    }, specifiedTextOpt);\n    var textEl = el.getTextContent();\n\n    if (textEl) {\n      mapLabelRaw(textEl).ignore = textEl.ignore;\n\n      if (el.textConfig && labelXY) {\n        // Compute a relative offset based on the el bounding rect.\n        var rect = el.getBoundingRect().clone(); // Need to make sure the percent position base on the same rect in normal and\n        // emphasis state. Otherwise if using boundingRect of el, but the emphasis state\n        // has borderWidth (even 0.5px), the text position will be changed obviously\n        // if the position is very big like ['1234%', '1345%'].\n\n        el.textConfig.layoutRect = rect;\n        el.textConfig.position = [(labelXY[0] - rect.x) / rect.width * 100 + '%', (labelXY[1] - rect.y) / rect.height * 100 + '%'];\n      }\n    } // PENDING:\n    // If labelLayout is enabled (test/label-layout.html), el.dataIndex should be specified.\n    // But el.dataIndex is also used to determine whether user event should be triggered,\n    // where el.seriesIndex or el.dataModel must be specified. At present for a single el\n    // there is not case that \"only label layout enabled but user event disabled\", so here\n    // we depends `resetEventTriggerForRegion` to do the job of setting `el.dataIndex`.\n\n\n    el.disableLabelAnimation = true;\n  } else {\n    el.removeTextContent();\n    el.removeTextConfig();\n    el.disableLabelAnimation = null;\n  }\n}\n\nfunction resetEventTriggerForRegion(viewBuildCtx, eventTrigger, regionName, regionModel, mapOrGeoModel, // Exist only if `viewBuildCtx.data` exists.\ndataIdx) {\n  // setItemGraphicEl, setHoverStyle after all polygons and labels\n  // are added to the rigionGroup\n  if (viewBuildCtx.data) {\n    // FIXME: when series-map use a SVG map, and there are duplicated name specified\n    // on different SVG elements, after `data.setItemGraphicEl(...)`:\n    // (1) all of them will be mounted with `dataIndex`, `seriesIndex`, so that tooltip\n    // can be triggered only mouse hover. That's correct.\n    // (2) only the last element will be kept in `data`, so that if trigger tooltip\n    // by `dispatchAction`, only the last one can be found and triggered. That might be\n    // not correct. We will fix it in future if anyone demanding that.\n    viewBuildCtx.data.setItemGraphicEl(dataIdx, eventTrigger);\n  } // series-map will not trigger \"geoselectchange\" no matter it is\n  // based on a declared geo component. Becuause series-map will\n  // trigger \"selectchange\". If it trigger both the two events,\n  // If users call `chart.dispatchAction({type: 'toggleSelect'})`,\n  // it not easy to also fire event \"geoselectchanged\".\n  else {\n      // Package custom mouse event for geo component\n      getECData(eventTrigger).eventData = {\n        componentType: 'geo',\n        componentIndex: mapOrGeoModel.componentIndex,\n        geoIndex: mapOrGeoModel.componentIndex,\n        name: regionName,\n        region: regionModel && regionModel.option || {}\n      };\n    }\n}\n\nfunction resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  if (!viewBuildCtx.data) {\n    graphic.setTooltipConfig({\n      el: el,\n      componentModel: mapOrGeoModel,\n      itemName: regionName,\n      // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n      itemTooltipOption: regionModel.get('tooltip')\n    });\n  }\n}\n\nfunction resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n  el.highDownSilentOnTouch = !!mapOrGeoModel.get('selectedMode'); // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n\n  var emphasisModel = regionModel.getModel('emphasis');\n  var focus = emphasisModel.get('focus');\n  enableHoverEmphasis(el, focus, emphasisModel.get('blurScope'));\n\n  if (viewBuildCtx.isGeo) {\n    enableComponentHighDownFeatures(el, mapOrGeoModel, regionName);\n  }\n\n  return focus;\n}\n\nexport default MapDraw; // @ts-ignore FIXME:TS fix the \"compatible with each other\"?"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
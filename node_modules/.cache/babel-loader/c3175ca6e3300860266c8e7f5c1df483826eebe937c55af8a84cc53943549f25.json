{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { setAsPrimitive, map, isTypedArray, assert, each, retrieve2 } from 'zrender/lib/core/util';\nimport { createSource, cloneSourceShallow } from '../Source';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../../util/types';\nimport { querySeriesUpstreamDatasetModel, queryDatasetUpstreamDatasetModels } from './sourceHelper';\nimport { applyDataTransform } from './transform';\n/**\n * [REQUIREMENT_MEMO]:\n * (0) `metaRawOption` means `dimensions`/`sourceHeader`/`seriesLayoutBy` in raw option.\n * (1) Keep support the feature: `metaRawOption` can be specified both on `series` and\n * `root-dataset`. Them on `series` has higher priority.\n * (2) Do not support to set `metaRawOption` on a `non-root-dataset`, because it might\n * confuse users: whether those props indicate how to visit the upstream source or visit\n * the transform result source, and some transforms has nothing to do with these props,\n * and some transforms might have multiple upstream.\n * (3) Transforms should specify `metaRawOption` in each output, just like they can be\n * declared in `root-dataset`.\n * (4) At present only support visit source in `SERIES_LAYOUT_BY_COLUMN` in transforms.\n * That is for reducing complexity in transfroms.\n * PENDING: Whether to provide transposition transform?\n *\n * [IMPLEMENTAION_MEMO]:\n * \"sourceVisitConfig\" are calculated from `metaRawOption` and `data`.\n * They will not be calculated until `source` is about to be visited (to prevent from\n * duplicate calcuation). `source` is visited only in series and input to transforms.\n *\n * [DIMENSION_INHERIT_RULE]:\n * By default the dimensions are inherited from ancestors, unless a transform return\n * a new dimensions definition.\n * Consider the case:\n * ```js\n * dataset: [{\n *     source: [ ['Product', 'Sales', 'Prise'], ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * dataset: [{\n *     dimension: ['Product', 'Sales', 'Prise'],\n *     source: [ ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * ```\n * The two types of option should have the same behavior after transform.\n *\n *\n * [SCENARIO]:\n * (1) Provide source data directly:\n * ```js\n * series: {\n *     encode: {...},\n *     dimensions: [...]\n *     seriesLayoutBy: 'row',\n *     data: [[...]]\n * }\n * ```\n * (2) Series refer to dataset.\n * ```js\n * series: [{\n *     encode: {...}\n *     // Ignore datasetIndex means `datasetIndex: 0`\n *     // and the dimensions defination in dataset is used\n * }, {\n *     encode: {...},\n *     seriesLayoutBy: 'column',\n *     datasetIndex: 1\n * }]\n * ```\n * (3) dataset transform\n * ```js\n * dataset: [{\n *     source: [...]\n * }, {\n *     source: [...]\n * }, {\n *     // By default from 0.\n *     transform: { type: 'filter', config: {...} }\n * }, {\n *     // Piped.\n *     transform: [\n *         { type: 'filter', config: {...} },\n *         { type: 'sort', config: {...} }\n *     ]\n * }, {\n *     id: 'regressionData',\n *     fromDatasetIndex: 1,\n *     // Third-party transform\n *     transform: { type: 'ecStat:regression', config: {...} }\n * }, {\n *     // retrieve the extra result.\n *     id: 'regressionFormula',\n *     fromDatasetId: 'regressionData',\n *     fromTransformResult: 1\n * }]\n * ```\n */\n\nvar SourceManager = /** @class */\nfunction () {\n  function SourceManager(sourceHost) {\n    // Cached source. Do not repeat calculating if not dirty.\n    this._sourceList = []; // version sign of each upstream source manager.\n\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._sourceHost = sourceHost;\n  }\n  /**\n   * Mark dirty.\n   */\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n  };\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n  /**\n   * For detecting whether the upstream source is dirty, so that\n   * the local cached source (in `_sourceList`) should be discarded.\n   */\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n  /**\n   * Always return a source instance. Otherwise throw error.\n   */\n\n  SourceManager.prototype.prepareSource = function () {\n    // For the case that call `setOption` multiple time but no data changed,\n    // cache the result source to prevent from repeating transform.\n    if (this._isDirty()) {\n      this._createSource();\n    }\n  };\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n    var sourceHost = this._sourceHost;\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0; // Has upstream dataset\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } // Series data is from own.\n      else {\n        data = seriesModel.get('data', true);\n        sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n        upstreamSignList = [];\n      } // See [REQUIREMENT_MEMO], merge settings on series and parent dataset if it is root.\n\n      var newMetaRawOption = this._getSourceMetaRawOption();\n      var upMetaRawOption = upSource ? upSource.metaRawOption : null;\n      var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, upMetaRawOption ? upMetaRawOption.seriesLayoutBy : null);\n      var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upMetaRawOption ? upMetaRawOption.sourceHeader : null); // Note here we should not use `upSource.dimensionsDefine`. Consider the case:\n      // `upSource.dimensionsDefine` is detected by `seriesLayoutBy: 'column'`,\n      // but series need `seriesLayoutBy: 'row'`.\n\n      var dimensions = retrieve2(newMetaRawOption.dimensions, upMetaRawOption ? upMetaRawOption.dimensions : null);\n      resultSourceList = [createSource(data, {\n        seriesLayoutBy: seriesLayoutBy,\n        sourceHeader: sourceHeader,\n        dimensions: dimensions\n      }, sourceFormat, seriesModel.get('encode', true))];\n    } else {\n      var datasetModel = sourceHost; // Has upstream dataset.\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } // Is root dataset.\n      else {\n        var sourceData = datasetModel.get('source', true);\n        resultSourceList = [createSource(sourceData, this._getSourceMetaRawOption(), null,\n        // Note: dataset option does not have `encode`.\n        null)];\n        upstreamSignList = [];\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      assert(resultSourceList && upstreamSignList);\n    }\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n    if (process.env.NODE_ENV !== 'production') {\n      assert(fromTransformResult != null || transformOption != null);\n    }\n    if (fromTransformResult != null) {\n      var errMsg = '';\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n        doThrow(errMsg);\n      }\n    }\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n        doThrow(errMsg);\n      }\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n    if (transformOption) {\n      sourceList = applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [cloneSourceShallow(upSourceList[0])];\n    }\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n  SourceManager.prototype._isDirty = function () {\n    var sourceList = this._sourceList;\n    if (!sourceList.length) {\n      return true;\n    } // All sourceList is from the some upsteam.\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n      if (\n      // Consider the case that there is ancestor diry, call it recursively.\n      // The performance is probably not an issue because usually the chain is not long.\n      upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n  /**\n   * @param sourceIndex By defualt 0, means \"main source\".\n   *                    Most cases there is only one source.\n   */\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    return this._sourceList[sourceIndex || 0];\n  };\n  /**\n   * PEDING: Is it fast enough?\n   * If no upstream, return empty array.\n   */\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    // Always get the relationship from the raw option.\n    // Do not cache the link of the dependency graph, so that\n    // no need to update them when change happen.\n    var sourceHost = this._sourceHost;\n    if (isSeries(sourceHost)) {\n      var datasetModel = querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return map(queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } // See [REQUIREMENT_MEMO], `non-root-dataset` do not support them.\n    else if (!this._getUpstreamSourceManagers().length) {\n      var model = sourceHost;\n      seriesLayoutBy = model.get('seriesLayoutBy', true);\n      sourceHeader = model.get('sourceHeader', true);\n      dimensions = model.get('dimensions', true);\n    }\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n  return SourceManager;\n}();\nexport { SourceManager }; // Call this method after `super.init` and `super.mergeOption` to\n// disable the transform merge, but do not disable transfrom clone from rawOption.\n\nexport function disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && setAsPrimitive(datasetModel.option.transform);\n}\nfunction isSeries(sourceHost) {\n  // Avoid circular dependency with Series.ts\n  return sourceHost.mainType === 'series';\n}\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}","map":{"version":3,"names":["setAsPrimitive","map","isTypedArray","assert","each","retrieve2","createSource","cloneSourceShallow","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ORIGINAL","querySeriesUpstreamDatasetModel","queryDatasetUpstreamDatasetModels","applyDataTransform","SourceManager","sourceHost","_sourceList","_upstreamSignList","_versionSignBase","_sourceHost","prototype","dirty","_setLocalSource","sourceList","upstreamSignList","_getVersionSign","uid","prepareSource","_isDirty","_createSource","upSourceMgrList","_getUpstreamSourceManagers","hasUpstream","length","resultSourceList","isSeries","seriesModel","data","sourceFormat","upSource","upSourceMgr","getSource","get","newMetaRawOption","_getSourceMetaRawOption","upMetaRawOption","metaRawOption","seriesLayoutBy","sourceHeader","dimensions","datasetModel","result","_applyTransform","sourceData","process","env","NODE_ENV","upMgrList","transformOption","fromTransformResult","errMsg","doThrow","upSourceList","upMgr","push","datasetIndex","componentIndex","i","upSrcMgr","sourceIndex","getSourceManager","model","disableTransformOptionMerge","option","transform","mainType","Error"],"sources":["/Users/jiong/Downloads/my-app/node_modules/echarts/lib/data/helper/sourceManager.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { setAsPrimitive, map, isTypedArray, assert, each, retrieve2 } from 'zrender/lib/core/util';\nimport { createSource, cloneSourceShallow } from '../Source';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../../util/types';\nimport { querySeriesUpstreamDatasetModel, queryDatasetUpstreamDatasetModels } from './sourceHelper';\nimport { applyDataTransform } from './transform';\n/**\n * [REQUIREMENT_MEMO]:\n * (0) `metaRawOption` means `dimensions`/`sourceHeader`/`seriesLayoutBy` in raw option.\n * (1) Keep support the feature: `metaRawOption` can be specified both on `series` and\n * `root-dataset`. Them on `series` has higher priority.\n * (2) Do not support to set `metaRawOption` on a `non-root-dataset`, because it might\n * confuse users: whether those props indicate how to visit the upstream source or visit\n * the transform result source, and some transforms has nothing to do with these props,\n * and some transforms might have multiple upstream.\n * (3) Transforms should specify `metaRawOption` in each output, just like they can be\n * declared in `root-dataset`.\n * (4) At present only support visit source in `SERIES_LAYOUT_BY_COLUMN` in transforms.\n * That is for reducing complexity in transfroms.\n * PENDING: Whether to provide transposition transform?\n *\n * [IMPLEMENTAION_MEMO]:\n * \"sourceVisitConfig\" are calculated from `metaRawOption` and `data`.\n * They will not be calculated until `source` is about to be visited (to prevent from\n * duplicate calcuation). `source` is visited only in series and input to transforms.\n *\n * [DIMENSION_INHERIT_RULE]:\n * By default the dimensions are inherited from ancestors, unless a transform return\n * a new dimensions definition.\n * Consider the case:\n * ```js\n * dataset: [{\n *     source: [ ['Product', 'Sales', 'Prise'], ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * dataset: [{\n *     dimension: ['Product', 'Sales', 'Prise'],\n *     source: [ ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * ```\n * The two types of option should have the same behavior after transform.\n *\n *\n * [SCENARIO]:\n * (1) Provide source data directly:\n * ```js\n * series: {\n *     encode: {...},\n *     dimensions: [...]\n *     seriesLayoutBy: 'row',\n *     data: [[...]]\n * }\n * ```\n * (2) Series refer to dataset.\n * ```js\n * series: [{\n *     encode: {...}\n *     // Ignore datasetIndex means `datasetIndex: 0`\n *     // and the dimensions defination in dataset is used\n * }, {\n *     encode: {...},\n *     seriesLayoutBy: 'column',\n *     datasetIndex: 1\n * }]\n * ```\n * (3) dataset transform\n * ```js\n * dataset: [{\n *     source: [...]\n * }, {\n *     source: [...]\n * }, {\n *     // By default from 0.\n *     transform: { type: 'filter', config: {...} }\n * }, {\n *     // Piped.\n *     transform: [\n *         { type: 'filter', config: {...} },\n *         { type: 'sort', config: {...} }\n *     ]\n * }, {\n *     id: 'regressionData',\n *     fromDatasetIndex: 1,\n *     // Third-party transform\n *     transform: { type: 'ecStat:regression', config: {...} }\n * }, {\n *     // retrieve the extra result.\n *     id: 'regressionFormula',\n *     fromDatasetId: 'regressionData',\n *     fromTransformResult: 1\n * }]\n * ```\n */\n\nvar SourceManager =\n/** @class */\nfunction () {\n  function SourceManager(sourceHost) {\n    // Cached source. Do not repeat calculating if not dirty.\n    this._sourceList = []; // version sign of each upstream source manager.\n\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._sourceHost = sourceHost;\n  }\n  /**\n   * Mark dirty.\n   */\n\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n  };\n\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n  /**\n   * For detecting whether the upstream source is dirty, so that\n   * the local cached source (in `_sourceList`) should be discarded.\n   */\n\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n  /**\n   * Always return a source instance. Otherwise throw error.\n   */\n\n\n  SourceManager.prototype.prepareSource = function () {\n    // For the case that call `setOption` multiple time but no data changed,\n    // cache the result source to prevent from repeating transform.\n    if (this._isDirty()) {\n      this._createSource();\n    }\n  };\n\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n\n    var sourceHost = this._sourceHost;\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0; // Has upstream dataset\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } // Series data is from own.\n      else {\n          data = seriesModel.get('data', true);\n          sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n          upstreamSignList = [];\n        } // See [REQUIREMENT_MEMO], merge settings on series and parent dataset if it is root.\n\n\n      var newMetaRawOption = this._getSourceMetaRawOption();\n\n      var upMetaRawOption = upSource ? upSource.metaRawOption : null;\n      var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, upMetaRawOption ? upMetaRawOption.seriesLayoutBy : null);\n      var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upMetaRawOption ? upMetaRawOption.sourceHeader : null); // Note here we should not use `upSource.dimensionsDefine`. Consider the case:\n      // `upSource.dimensionsDefine` is detected by `seriesLayoutBy: 'column'`,\n      // but series need `seriesLayoutBy: 'row'`.\n\n      var dimensions = retrieve2(newMetaRawOption.dimensions, upMetaRawOption ? upMetaRawOption.dimensions : null);\n      resultSourceList = [createSource(data, {\n        seriesLayoutBy: seriesLayoutBy,\n        sourceHeader: sourceHeader,\n        dimensions: dimensions\n      }, sourceFormat, seriesModel.get('encode', true))];\n    } else {\n      var datasetModel = sourceHost; // Has upstream dataset.\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } // Is root dataset.\n      else {\n          var sourceData = datasetModel.get('source', true);\n          resultSourceList = [createSource(sourceData, this._getSourceMetaRawOption(), null, // Note: dataset option does not have `encode`.\n          null)];\n          upstreamSignList = [];\n        }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(resultSourceList && upstreamSignList);\n    }\n\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(fromTransformResult != null || transformOption != null);\n    }\n\n    if (fromTransformResult != null) {\n      var errMsg = '';\n\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n\n        doThrow(errMsg);\n      }\n    }\n\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n\n        doThrow(errMsg);\n      }\n\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n\n    if (transformOption) {\n      sourceList = applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [cloneSourceShallow(upSourceList[0])];\n    }\n\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n\n  SourceManager.prototype._isDirty = function () {\n    var sourceList = this._sourceList;\n\n    if (!sourceList.length) {\n      return true;\n    } // All sourceList is from the some upsteam.\n\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n\n      if ( // Consider the case that there is ancestor diry, call it recursively.\n      // The performance is probably not an issue because usually the chain is not long.\n      upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n  /**\n   * @param sourceIndex By defualt 0, means \"main source\".\n   *                    Most cases there is only one source.\n   */\n\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    return this._sourceList[sourceIndex || 0];\n  };\n  /**\n   * PEDING: Is it fast enough?\n   * If no upstream, return empty array.\n   */\n\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    // Always get the relationship from the raw option.\n    // Do not cache the link of the dependency graph, so that\n    // no need to update them when change happen.\n    var sourceHost = this._sourceHost;\n\n    if (isSeries(sourceHost)) {\n      var datasetModel = querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return map(queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } // See [REQUIREMENT_MEMO], `non-root-dataset` do not support them.\n    else if (!this._getUpstreamSourceManagers().length) {\n        var model = sourceHost;\n        seriesLayoutBy = model.get('seriesLayoutBy', true);\n        sourceHeader = model.get('sourceHeader', true);\n        dimensions = model.get('dimensions', true);\n      }\n\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n\n  return SourceManager;\n}();\n\nexport { SourceManager }; // Call this method after `super.init` and `super.mergeOption` to\n// disable the transform merge, but do not disable transfrom clone from rawOption.\n\nexport function disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && setAsPrimitive(datasetModel.option.transform);\n}\n\nfunction isSeries(sourceHost) {\n  // Avoid circular dependency with Series.ts\n  return sourceHost.mainType === 'series';\n}\n\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,EAAEC,GAAG,EAAEC,YAAY,EAAEC,MAAM,EAAEC,IAAI,EAAEC,SAAS,QAAQ,uBAAuB;AAClG,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,WAAW;AAC5D,SAASC,yBAAyB,EAAEC,sBAAsB,QAAQ,kBAAkB;AACpF,SAASC,+BAA+B,EAAEC,iCAAiC,QAAQ,gBAAgB;AACnG,SAASC,kBAAkB,QAAQ,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GACjB;AACA,YAAY;EACV,SAASA,aAAa,CAACC,UAAU,EAAE;IACjC;IACA,IAAI,CAACC,WAAW,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,WAAW,GAAGJ,UAAU;EAC/B;EACA;AACF;AACA;;EAGED,aAAa,CAACM,SAAS,CAACC,KAAK,GAAG,YAAY;IAC1C,IAAI,CAACC,eAAe,CAAC,EAAE,EAAE,EAAE,CAAC;EAC9B,CAAC;EAEDR,aAAa,CAACM,SAAS,CAACE,eAAe,GAAG,UAAUC,UAAU,EAAEC,gBAAgB,EAAE;IAChF,IAAI,CAACR,WAAW,GAAGO,UAAU;IAC7B,IAAI,CAACN,iBAAiB,GAAGO,gBAAgB;IACzC,IAAI,CAACN,gBAAgB,EAAE;IAEvB,IAAI,IAAI,CAACA,gBAAgB,GAAG,IAAI,EAAE;MAChC,IAAI,CAACA,gBAAgB,GAAG,CAAC;IAC3B;EACF,CAAC;EACD;AACF;AACA;AACA;;EAGEJ,aAAa,CAACM,SAAS,CAACK,eAAe,GAAG,YAAY;IACpD,OAAO,IAAI,CAACN,WAAW,CAACO,GAAG,GAAG,GAAG,GAAG,IAAI,CAACR,gBAAgB;EAC3D,CAAC;EACD;AACF;AACA;;EAGEJ,aAAa,CAACM,SAAS,CAACO,aAAa,GAAG,YAAY;IAClD;IACA;IACA,IAAI,IAAI,CAACC,QAAQ,EAAE,EAAE;MACnB,IAAI,CAACC,aAAa,EAAE;IACtB;EACF,CAAC;EAEDf,aAAa,CAACM,SAAS,CAACS,aAAa,GAAG,YAAY;IAClD,IAAI,CAACP,eAAe,CAAC,EAAE,EAAE,EAAE,CAAC;IAE5B,IAAIP,UAAU,GAAG,IAAI,CAACI,WAAW;IAEjC,IAAIW,eAAe,GAAG,IAAI,CAACC,0BAA0B,EAAE;IAEvD,IAAIC,WAAW,GAAG,CAAC,CAACF,eAAe,CAACG,MAAM;IAC1C,IAAIC,gBAAgB;IACpB,IAAIV,gBAAgB;IAEpB,IAAIW,QAAQ,CAACpB,UAAU,CAAC,EAAE;MACxB,IAAIqB,WAAW,GAAGrB,UAAU;MAC5B,IAAIsB,IAAI,GAAG,KAAK,CAAC;MACjB,IAAIC,YAAY,GAAG,KAAK,CAAC;MACzB,IAAIC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC;;MAEvB,IAAIP,WAAW,EAAE;QACf,IAAIQ,WAAW,GAAGV,eAAe,CAAC,CAAC,CAAC;QACpCU,WAAW,CAACb,aAAa,EAAE;QAC3BY,QAAQ,GAAGC,WAAW,CAACC,SAAS,EAAE;QAClCJ,IAAI,GAAGE,QAAQ,CAACF,IAAI;QACpBC,YAAY,GAAGC,QAAQ,CAACD,YAAY;QACpCd,gBAAgB,GAAG,CAACgB,WAAW,CAACf,eAAe,EAAE,CAAC;MACpD,CAAC,CAAC;MAAA,KACG;QACDY,IAAI,GAAGD,WAAW,CAACM,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;QACpCJ,YAAY,GAAGnC,YAAY,CAACkC,IAAI,CAAC,GAAG5B,yBAAyB,GAAGC,sBAAsB;QACtFc,gBAAgB,GAAG,EAAE;MACvB,CAAC,CAAC;;MAGJ,IAAImB,gBAAgB,GAAG,IAAI,CAACC,uBAAuB,EAAE;MAErD,IAAIC,eAAe,GAAGN,QAAQ,GAAGA,QAAQ,CAACO,aAAa,GAAG,IAAI;MAC9D,IAAIC,cAAc,GAAGzC,SAAS,CAACqC,gBAAgB,CAACI,cAAc,EAAEF,eAAe,GAAGA,eAAe,CAACE,cAAc,GAAG,IAAI,CAAC;MACxH,IAAIC,YAAY,GAAG1C,SAAS,CAACqC,gBAAgB,CAACK,YAAY,EAAEH,eAAe,GAAGA,eAAe,CAACG,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC;MACpH;MACA;;MAEA,IAAIC,UAAU,GAAG3C,SAAS,CAACqC,gBAAgB,CAACM,UAAU,EAAEJ,eAAe,GAAGA,eAAe,CAACI,UAAU,GAAG,IAAI,CAAC;MAC5Gf,gBAAgB,GAAG,CAAC3B,YAAY,CAAC8B,IAAI,EAAE;QACrCU,cAAc,EAAEA,cAAc;QAC9BC,YAAY,EAAEA,YAAY;QAC1BC,UAAU,EAAEA;MACd,CAAC,EAAEX,YAAY,EAAEF,WAAW,CAACM,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;IACpD,CAAC,MAAM;MACL,IAAIQ,YAAY,GAAGnC,UAAU,CAAC,CAAC;;MAE/B,IAAIiB,WAAW,EAAE;QACf,IAAImB,MAAM,GAAG,IAAI,CAACC,eAAe,CAACtB,eAAe,CAAC;QAElDI,gBAAgB,GAAGiB,MAAM,CAAC5B,UAAU;QACpCC,gBAAgB,GAAG2B,MAAM,CAAC3B,gBAAgB;MAC5C,CAAC,CAAC;MAAA,KACG;QACD,IAAI6B,UAAU,GAAGH,YAAY,CAACR,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC;QACjDR,gBAAgB,GAAG,CAAC3B,YAAY,CAAC8C,UAAU,EAAE,IAAI,CAACT,uBAAuB,EAAE,EAAE,IAAI;QAAE;QACnF,IAAI,CAAC,CAAC;QACNpB,gBAAgB,GAAG,EAAE;MACvB;IACJ;IAEA,IAAI8B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCpD,MAAM,CAAC8B,gBAAgB,IAAIV,gBAAgB,CAAC;IAC9C;IAEA,IAAI,CAACF,eAAe,CAACY,gBAAgB,EAAEV,gBAAgB,CAAC;EAC1D,CAAC;EAEDV,aAAa,CAACM,SAAS,CAACgC,eAAe,GAAG,UAAUK,SAAS,EAAE;IAC7D,IAAIP,YAAY,GAAG,IAAI,CAAC/B,WAAW;IACnC,IAAIuC,eAAe,GAAGR,YAAY,CAACR,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;IACzD,IAAIiB,mBAAmB,GAAGT,YAAY,CAACR,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC;IAEvE,IAAIY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCpD,MAAM,CAACuD,mBAAmB,IAAI,IAAI,IAAID,eAAe,IAAI,IAAI,CAAC;IAChE;IAEA,IAAIC,mBAAmB,IAAI,IAAI,EAAE;MAC/B,IAAIC,MAAM,GAAG,EAAE;MAEf,IAAIH,SAAS,CAACxB,MAAM,KAAK,CAAC,EAAE;QAC1B,IAAIqB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzCI,MAAM,GAAG,6EAA6E;QACxF;QAEAC,OAAO,CAACD,MAAM,CAAC;MACjB;IACF;IAEA,IAAIrC,UAAU;IACd,IAAIuC,YAAY,GAAG,EAAE;IACrB,IAAItC,gBAAgB,GAAG,EAAE;IACzBnB,IAAI,CAACoD,SAAS,EAAE,UAAUM,KAAK,EAAE;MAC/BA,KAAK,CAACpC,aAAa,EAAE;MACrB,IAAIY,QAAQ,GAAGwB,KAAK,CAACtB,SAAS,CAACkB,mBAAmB,IAAI,CAAC,CAAC;MACxD,IAAIC,MAAM,GAAG,EAAE;MAEf,IAAID,mBAAmB,IAAI,IAAI,IAAI,CAACpB,QAAQ,EAAE;QAC5C,IAAIe,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzCI,MAAM,GAAG,oDAAoD,GAAGD,mBAAmB;QACrF;QAEAE,OAAO,CAACD,MAAM,CAAC;MACjB;MAEAE,YAAY,CAACE,IAAI,CAACzB,QAAQ,CAAC;MAC3Bf,gBAAgB,CAACwC,IAAI,CAACD,KAAK,CAACtC,eAAe,EAAE,CAAC;IAChD,CAAC,CAAC;IAEF,IAAIiC,eAAe,EAAE;MACnBnC,UAAU,GAAGV,kBAAkB,CAAC6C,eAAe,EAAEI,YAAY,EAAE;QAC7DG,YAAY,EAAEf,YAAY,CAACgB;MAC7B,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIP,mBAAmB,IAAI,IAAI,EAAE;MACtCpC,UAAU,GAAG,CAACf,kBAAkB,CAACsD,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD;IAEA,OAAO;MACLvC,UAAU,EAAEA,UAAU;MACtBC,gBAAgB,EAAEA;IACpB,CAAC;EACH,CAAC;EAEDV,aAAa,CAACM,SAAS,CAACQ,QAAQ,GAAG,YAAY;IAC7C,IAAIL,UAAU,GAAG,IAAI,CAACP,WAAW;IAEjC,IAAI,CAACO,UAAU,CAACU,MAAM,EAAE;MACtB,OAAO,IAAI;IACb,CAAC,CAAC;;IAGF,IAAIH,eAAe,GAAG,IAAI,CAACC,0BAA0B,EAAE;IAEvD,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrC,eAAe,CAACG,MAAM,EAAEkC,CAAC,EAAE,EAAE;MAC/C,IAAIC,QAAQ,GAAGtC,eAAe,CAACqC,CAAC,CAAC;MAEjC;MAAK;MACL;MACAC,QAAQ,CAACxC,QAAQ,EAAE,IAAI,IAAI,CAACX,iBAAiB,CAACkD,CAAC,CAAC,KAAKC,QAAQ,CAAC3C,eAAe,EAAE,EAAE;QAC/E,OAAO,IAAI;MACb;IACF;EACF,CAAC;EACD;AACF;AACA;AACA;;EAGEX,aAAa,CAACM,SAAS,CAACqB,SAAS,GAAG,UAAU4B,WAAW,EAAE;IACzD,OAAO,IAAI,CAACrD,WAAW,CAACqD,WAAW,IAAI,CAAC,CAAC;EAC3C,CAAC;EACD;AACF;AACA;AACA;;EAGEvD,aAAa,CAACM,SAAS,CAACW,0BAA0B,GAAG,YAAY;IAC/D;IACA;IACA;IACA,IAAIhB,UAAU,GAAG,IAAI,CAACI,WAAW;IAEjC,IAAIgB,QAAQ,CAACpB,UAAU,CAAC,EAAE;MACxB,IAAImC,YAAY,GAAGvC,+BAA+B,CAACI,UAAU,CAAC;MAC9D,OAAO,CAACmC,YAAY,GAAG,EAAE,GAAG,CAACA,YAAY,CAACoB,gBAAgB,EAAE,CAAC;IAC/D,CAAC,MAAM;MACL,OAAOpE,GAAG,CAACU,iCAAiC,CAACG,UAAU,CAAC,EAAE,UAAUmC,YAAY,EAAE;QAChF,OAAOA,YAAY,CAACoB,gBAAgB,EAAE;MACxC,CAAC,CAAC;IACJ;EACF,CAAC;EAEDxD,aAAa,CAACM,SAAS,CAACwB,uBAAuB,GAAG,YAAY;IAC5D,IAAI7B,UAAU,GAAG,IAAI,CAACI,WAAW;IACjC,IAAI4B,cAAc;IAClB,IAAIC,YAAY;IAChB,IAAIC,UAAU;IAEd,IAAId,QAAQ,CAACpB,UAAU,CAAC,EAAE;MACxBgC,cAAc,GAAGhC,UAAU,CAAC2B,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC;MACvDM,YAAY,GAAGjC,UAAU,CAAC2B,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC;MACnDO,UAAU,GAAGlC,UAAU,CAAC2B,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC;IACjD,CAAC,CAAC;IAAA,KACG,IAAI,CAAC,IAAI,CAACX,0BAA0B,EAAE,CAACE,MAAM,EAAE;MAChD,IAAIsC,KAAK,GAAGxD,UAAU;MACtBgC,cAAc,GAAGwB,KAAK,CAAC7B,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC;MAClDM,YAAY,GAAGuB,KAAK,CAAC7B,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC;MAC9CO,UAAU,GAAGsB,KAAK,CAAC7B,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC;IAC5C;IAEF,OAAO;MACLK,cAAc,EAAEA,cAAc;MAC9BC,YAAY,EAAEA,YAAY;MAC1BC,UAAU,EAAEA;IACd,CAAC;EACH,CAAC;EAED,OAAOnC,aAAa;AACtB,CAAC,EAAE;AAEH,SAASA,aAAa,GAAG,CAAC;AAC1B;;AAEA,OAAO,SAAS0D,2BAA2B,CAACtB,YAAY,EAAE;EACxD,IAAIQ,eAAe,GAAGR,YAAY,CAACuB,MAAM,CAACC,SAAS;EACnDhB,eAAe,IAAIzD,cAAc,CAACiD,YAAY,CAACuB,MAAM,CAACC,SAAS,CAAC;AAClE;AAEA,SAASvC,QAAQ,CAACpB,UAAU,EAAE;EAC5B;EACA,OAAOA,UAAU,CAAC4D,QAAQ,KAAK,QAAQ;AACzC;AAEA,SAASd,OAAO,CAACD,MAAM,EAAE;EACvB,MAAM,IAAIgB,KAAK,CAAChB,MAAM,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}